{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Another Terry Attempt at Notes","text":"<p>Right now this is stored at github in the class_notes repository</p>"},{"location":"#welcome-to-mkdocs","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Cornell_Notes/","title":"Cornell (kind of) Notes Template","text":""},{"location":"Cornell_Notes/#title","title":"Title","text":""},{"location":"Cornell_Notes/#notes","title":"Notes","text":""},{"location":"Cornell_Notes/#summary","title":"Summary","text":""},{"location":"Cornell_Notes/#category","title":"Category","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#coreyschaefer","title":"coreyschaefer","text":"<ul> <li>Corey Schaefer Django Video Series 1</li> </ul>"},{"location":"tags/#django","title":"django","text":"<ul> <li>Corey Schaefer Django Video Series 1</li> </ul>"},{"location":"tags/#django_start","title":"django_start","text":"<ul> <li>Corey Schaefer Django Video Series 1</li> </ul>"},{"location":"Python/Invent_Your_Own_Computer_Games_with_Python/","title":"Invent Your Own Computer Games with Python","text":""},{"location":"Python/Object_Oriented_Python/","title":"Object Oriented Python","text":""},{"location":"Python/Object_Oriented_Python/#introduction","title":"Introduction","text":"<ul> <li> <p>The OOP paradigm gives programmers an efficient way to combine code and data into cohesive units that are often highly reusable.</p> </li> <li> <p>Even though PEP 8 Style Guide for Python Code recommends snake_case, he uses camelCase.</p> </li> <li> <p>He created a package of pygame widgets called pygwidgets which will be used later.</p> </li> <li> <p>Downloaded all code from book in /home/terry/github/Object-Oriented-Python</p> </li> <li> <p>He uses and suggests Pycharm Community Edition</p> </li> <li> <p>please see my YouTube video \u201cDebugging Python 3 with PyCharm\u201d at   https://www.youtube.com/watch?v=cxAOSQQwDJ4&amp;t=43s/.</p> </li> </ul>"},{"location":"Python/Object_Oriented_Python/#chapter-1-5626","title":"Chapter 1 - 56:26","text":""},{"location":"Python/Codemy_SQLite3/Create_connection/","title":"Using SQLite3 Databases with Python","text":""},{"location":"Python/Codemy_SQLite3/Create_connection/#create-sqlite-connection-codemycom-video-4","title":"Create SQLite Connection Codemy.com Video 4","text":"<p>SQLite comes with Python. </p>"},{"location":"Python/Codemy_SQLite3/Create_connection/#this-code-creates-the-database","title":"This code creates the Database:","text":"<pre><code># import sqlite3 object\nimport sqlite3\n\n# Create a connection called conn and create a database called customer.db\n# if db already exists this will just connect to it. \nconn = sqlite3.connect('customer.db')\n\n# You can create an in memory database that only lasts the duration of your\n# program and isn't saved. Use ':memory:' as the argument.\n\n# conn = sqlite3.connect(':memory:')\n</code></pre>"},{"location":"Python/Codemy_SQLite3/Create_connection/#this-creates-a-database-table","title":"This Creates a Database Table","text":"<p>Tables contain all the data in a database. Pretty much like a spreadsheet, tables and columns. </p> <pre><code># import sqlite3 object\nimport sqlite3\n\n# Create a connection called conn and create a database called customer.db\n# if db already exists this will just connect to it. \nconn = sqlite3.connect('customer.db')\n\n# Most activities require a cursor. Build it once, call it anything\nc = conn.cursor()\n\n# Now create the table using a docstring\n# sqlite3 only has 5 datatypes. NULL, INTEGER, REAL, TEXT, BLOB\n# NULL is does it exist, BLOB for things like videos, images, mp3, etc. \nc.execute(\"\"\"CREATE TABLE customers (\n    first_name text,\n    last_name text,\n    email text\n)\n\n    \"\"\")\n\n# To actually create the table have to commit our connection\nconn.commit()\n\n# Close the connection\nconn.close()\n</code></pre>"},{"location":"Python/Codemy_SQLite3/ManageTables/","title":"Adding Data in SQLite3","text":""},{"location":"Python/Codemy_SQLite3/ManageTables/#add-one-record-to-a-table-video-6","title":"Add One Record to a table - Video 6","text":"<pre><code>import sqlite3\n\n# Connect to the database\nconn = sqlite3.connect('customer.db')\n\n# Create a Cursor\nc = conn.cursor\n\n# These correspond to the fields we added to our table, first_name,\n# last_name, email\n\nc.execute(\"INSERT INTO customers VALUES ('John', 'Elder', 'john@codemy.com')\")\nc.execute(\"INSERT INTO customers VALUES ('Tim', 'Smith', 'tim@codemy.com')\")\nc.execute(\"INSERT INTO customers VALUES ('Mary', 'Brown', 'mary@codemy.com')\")\n\n\n# Commit our command\nconn.commit()\n\n# Close our connection\nconn.close()\n</code></pre>"},{"location":"Python/Codemy_SQLite3/ManageTables/#insert-many-records-into-the-database-video-7","title":"Insert many records into the database - Video 7","text":"<pre><code>import sqlite3\n\n# Connect to the database\nconn = sqlite3.connect('customer.db')\n\n# Create a Cursor\nc = conn.cursor\n\n# These correspond to the fields we added to our table, first_name,\n# last_name, email\n\nmany_customers = [('Wes', 'Brown', 'wes@brown.com'), \n    ('Steph', 'Kuewa', 'steph@kuewa.com'), \n    ('Dan', 'Pas', 'dan@pas.com'),\n]\n\nc.executemany(\"INSERT INTO customers VALUES (?,?,?)\", many_customers)\n\n# Commit our command\nconn.commit()\n\n# Close our connection\nconn.close()\n</code></pre>"},{"location":"WebDevelopment/HeadFirst_HTML_and_CSS_Notes/","title":"How to Use a Head First Book to study","text":"<ul> <li>Slow down. The more you understand, the less you have to memorize</li> <li>Do the exercises. Write your own notes. Use a pencil. Physical activity while learning can increase learning.</li> <li>Read the \"There Are No Dumb Questions\". They're part of the core content.</li> <li>Drink water. Lots of it. Dehydration decreases cognitive function</li> <li>Listen to your brain. If you're starting to skim or forget what you just read, it's time for a break. </li> <li>Create something. Go beyond the book.</li> </ul>"},{"location":"WebDevelopment/HeadFirst_HTML_and_CSS_Notes/#chapter-1-getting-to-know-html","title":"Chapter 1 - Getting to know HTML","text":""},{"location":"WebDevelopment/HeadFirst_HTML_and_CSS_Notes/#the-language-of-the-web","title":"The Language of the Web","text":"<ul> <li>6 Levels of headings <code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code> with h1 being the largest</li> <li>Typically headings beyond h3</li> <li>Comments <code>&lt;!-- Here's the beginning of the lounge content --&gt;</code></li> <li></li> </ul>"},{"location":"WebDevelopment/html_css/","title":"HTML/CSS John Smilga Udemy","text":"<p>This is simply a place to write notes and show examples of information learned from this course. The projects that are built during the course will be in separate          files / directories. </p>"},{"location":"WebDevelopment/html_css/#video-4","title":"Video 4","text":"<ul> <li>HTML - Hyper Text Markup Language</li> <li>Responsible for Webpage Structure</li> <li>example of html: <code>&lt;element&gt;content&lt;/element&gt;</code></li> <li>header example: <code>&lt;h1&gt;Header Content&lt;/h1&gt;</code>     *Header Content </li> <li>paragraph example: <code>&lt;p&gt;paragraph content&lt;/p&gt;</code></li> </ul> <p>paragraph content</p>"},{"location":"WebDevelopment/wa4e_notes/","title":"Web Applications for Everyone","text":""},{"location":"WebDevelopment/wa4e_notes/#dr-chuck","title":"Dr. Chuck","text":""},{"location":"WebDevelopment/wa4e_notes/#video-1","title":"Video 1","text":"<ul> <li> <p>Request response cycles are foundation of all web applications.</p> </li> <li> <p>This course is the most basic way to develop web applications. </p> </li> <li> <p>End User &lt;--&gt; Browser (HTML, CSS, DOM, JavaScript, Jquery)  &lt;--&gt; Web Server (Application Software e.g. php) &lt;--&gt; Database / Database Model &lt;--&gt; Database Tools (i.e. phpMyAdmin)</p> </li> <li> <p>HTTP - Hypertext Transfer Protocol - very simple, can even be done by hand. Connect to a server, navigate to a document, send the document back. Not practical to do manually HTTP 2.0 and later. Doesn't work for all webservers.</p> </li> <li> <p>URL Uniform Resource Locator 3 components </p> </li> <li>http:// is the protocol - how will the document be transferred</li> <li>www.dr-chuck.com is the name of the webhost - where is the document located</li> <li> <p>page1.htm - which document do we send back</p> </li> <li> <p>By default web servers communicate on port 80</p> </li> </ul>"},{"location":"WebDevelopment/wa4e_notes/#video-2","title":"Video 2","text":"<ul> <li>Browser Developer Mod</li> <li>Network Tab shows requests and responses</li> </ul>"},{"location":"WebDevelopment/wa4e_notes/#video-3-html-part-1","title":"Video 3 - HTML Part 1","text":"<ul> <li>Built with tags</li> <li>Browsers tolerate a lot of broken HTML</li> <li>Standards set by World Wide Web Consortium W3C</li> </ul>"},{"location":"WebDevelopment/wa4e_notes/#video-4-html-part-2","title":"Video 4 - HTML Part 2","text":"<ul> <li> <p><code>&lt;html&gt; &lt;/html&gt;</code> outer tags</p> </li> <li> <p><code>&lt;head&gt; &lt;/head&gt;</code> non printing info nested in html tags</p> </li> <li>title of page</li> <li> <p>links to css and javascript</p> </li> <li> <p><code>&lt;body&gt; &lt;/body&gt;</code> page content, nested in html tags after head tags</p> </li> <li> <p>index.html, index.htm, index.php, etc are usual starting web pages</p> </li> <li> <p>use anchor tags to point between web pages <code>&lt;a&gt; &lt;/a&gt;</code></p> </li> <li> <p>Absolute references <code>&lt;a href=\"http://www.dr-chuck.com/page2.htm\"&gt;Second Page&lt;/a&gt;</code></p> </li> <li> <p>Relative references <code>&lt;a href=\"page1.htm\"&gt;First Page&lt;/a&gt;</code></p> </li> <li> <p>white space and carriage returns usually ignored by browser (pre tag can override)</p> </li> <li> <p>most tags have both beginning and ending tags</p> </li> <li> <p>some like image are self closing</p> </li> <li> <p>opening tags can have attributes <code>&lt;img src='somepicture.png'&gt;</code></p> </li> <li> <p>special characters for show characters used by html - </p> </li> <li>&amp;lt - less than</li> <li>&amp;gt - greater than</li> <li>&amp;amp - ampersand</li> <li> <p>Those are main 3, but there are miscellaneous - card suits, money characters, etc.</p> </li> <li> <p>comments: <code>&lt;!-- comment syntax --&gt;</code></p> </li> <li> <p>lists and unordered lists:</p> </li> <li> <p><code>&lt;ul&gt;&lt;li&gt;item 1&lt;/li&gt;&lt;li&gt;item2&lt;/li&gt;&lt;/ul&gt;</code></p> </li> <li> <p><code>&lt;ol&gt;&lt;li&gt;item 1&lt;/li&gt;&lt;li&gt;item2&lt;/li&gt;&lt;/ol&gt;</code></p> </li> <li> <p>tables - Laid out logically - table, tr (table row), th(table header), td(table data), </p> </li> </ul>"},{"location":"django/dennis_ivy_todo/","title":"Dennis ivy todo","text":""},{"location":"django/dennis_ivy_todo/#dennis-ivy-django-todo-list","title":"Dennis Ivy Django ToDo List","text":""},{"location":"django/dennis_ivy_todo/#march-12-2021-youtube","title":"March 12, 2021 - YouTube","text":"<p>My intention is that this be a list of the steps and that the detail will be in the program files (hopefully well commented) in this Django project. </p>"},{"location":"django/dennis_ivy_todo/#setup-process","title":"Setup Process","text":"<ul> <li>Created dennisivy/todo directory</li> <li>Go to that directory</li> </ul> <pre><code>    cd /home/terrystudent/todo\n</code></pre> <ul> <li>Created virtual environment called .venv (so it's hidden)</li> <li>Activated virtual environment .venv</li> <li>Install django:</li> </ul> <pre><code>    python -m pip install django\n</code></pre> <ul> <li>He's on 3.0.2 and I just installed 4.0.6</li> <li>Create the project:</li> </ul> <pre><code>    django-admin startproject todo_list\n</code></pre> <ul> <li>Create the app</li> </ul> <pre><code>    python manage.py startapp base\n</code></pre>"},{"location":"django/dennis_ivy_todo/#first-steps","title":"First Steps","text":"<ul> <li>Connect the app and project together - see comment and code in dennisivy/todo/todo_list/settings.py</li> <li>Create a urls.py file in the app dennisivy/todo/base/urls.py</li> <li></li> </ul>"},{"location":"django/Codemy_Simple_Blog/Codemy%20Simple%20Blog%20Video%201/","title":"Codemy Simple Blog Video 1","text":""},{"location":"django/Codemy_Simple_Blog/Codemy%20Simple%20Blog%20Video%201/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/Codemy_Simple_Blog/Codemy%20Simple%20Blog%20Video%201/#length-1810","title":"Length 18:10","text":""},{"location":"django/Codemy_Simple_Blog/Codemy%20Simple%20Blog%20Video%201/#summary","title":"Summary","text":"<ul> <li>Set up both the project and an app</li> <li>Create the post model and register it.</li> </ul> <p>So my plan is to watch the video and take notes - not code but flow, bash instructions, etc. Then go back through the same video and write the code.</p>"},{"location":"django/Codemy_Simple_Blog/Codemy%20Simple%20Blog%20Video%201/#setup-initial-urls-views-and-templates","title":"Setup initial urls, views, and templates","text":"<ul> <li>Make directory called simpleblog</li> <li>Create a virtual environment called virt in simpleblog</li> <li>Activate virtual environment</li> <li>Install DJango using pip - he got django 3.0.5. I'm on 4.2.1.</li> <li>Create Django project called ablog  <pre><code>django-admin startproject ablog\n</code></pre></li> <li> <p>In the ablog directory to get rid of error messages and set up admin route. Then run the server to see the default site and make sure the install went OK. localhost:8000 is the default. <pre><code>python manage.py migrate\npython manage.py runserver\n</code></pre> To create the administrative user. Used admin for name, and put in an email and password. I used my hotmail email and password jacqui. <pre><code>python manage.py createsuperuser\n</code></pre></p> </li> <li> <p><code>python manage.py runserver</code> and go to localhost:8000/admin and login, then click on the admin user and put in actual first and last name.</p> </li> <li>to create the app under the project. <pre><code>python manage.py startapp theblog\n</code></pre></li> <li>open the top ablog folder in your text editor</li> <li>Then in ablog/ablog/settings.py add theblog to the INSTALLED_APPS list. <pre><code>INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'theblog',\n]\n</code></pre></li> <li>In ablog/ablog/urls.py add include to the second import statement, and import include and add theblog/urls.py to the urlpatterns list. This gives our app its own urls.py file. <pre><code>from django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('theblog.urls')),\n]\n</code></pre></li> <li>Now create ablog/theblog/urls.py and put a home page view in it. Also import the views.py file from ablog/theblog. <pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name=\"home\"),\n]\n</code></pre></li> <li>In theblog/views.py create a function to define the home page. <pre><code>from django.shortcuts import render\n\n# Create your views here.\ndef home(request):\n    return render(request, 'home.html', {})\n</code></pre></li> <li>in ablog/theblog create a templates folder and put home.html in it. <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li> <li><code>python manage.py runserver</code> to ensure that our new home page shows up at localhost:8000</li> </ul>"},{"location":"django/Codemy_Simple_Blog/Codemy%20Simple%20Blog%20Video%201/#now-start-working-on-database","title":"Now start working on database","text":"<ul> <li>In ablog/theblog/models.py import the User so we can use our admin user, and create our data model and its fields. This is a class based model. <pre><code>from django.db import models\nfrom django.contrib.auth.models import User \n\n# Create your models here.\nclass Post(models.Model):\n    title = models.CharField(max_length=255)\n    # the on_delete will delete all the users blog posts if the user gets deleted.\n    author = models.ForeignKey(User, on_delete=models.CASCADE)\n    body = models.TextField()\n\n    def __str__(self):\n        return self.title + ' | ' + str(self.author)\n</code></pre></li> <li>Fields are title, author (set up so if author is deleted, all the associated blog posts go away), and body.</li> <li>And create a function <code>__str__</code>  function to show the title and the author on the admin page.</li> <li>in ablog/theblog/admin.py import and register the Post class. <pre><code>from django.contrib import admin\nfrom .models import Post\n\n# Register your models here.\nadmin.site.register(Post)\n</code></pre></li> <li>makemigrations and migrate to get the new database to work. <pre><code>python manage.py migrate\npython manage.py runserver\n</code></pre></li> <li>Then added two blog posts using the admin page.</li> </ul>"},{"location":"django/Corey_Schaefer/Video%201%20Getting%20Started/","title":"Corey Schaefer Django Video Series 1","text":"","tags":["django","coreyschaefer","django_start"]},{"location":"django/Corey_Schaefer/Video%201%20Getting%20Started/#length-1532","title":"Length 15:32","text":"","tags":["django","coreyschaefer","django_start"]},{"location":"django/Corey_Schaefer/Video%201%20Getting%20Started/#summary","title":"Summary","text":"<ul> <li>Overview of the application that's being built</li> <li>Installation of Django</li> <li>Creation of new project, and overview of the folders and files created by Django</li> <li>Running the default server</li> </ul>","tags":["django","coreyschaefer","django_start"]},{"location":"django/Corey_Schaefer/Video%201%20Getting%20Started/#notes","title":"Notes","text":"<ul> <li>Building a blog style application<ul> <li>Authentication System</li> <li>Multiple Users</li> <li>Profile including a profile picture</li> <li>Can update and delete owned posts</li> <li>Can view posts by others</li> <li>Source code available</li> </ul> </li> <li>Install Packages Needed<ul> <li>Use a virtual environment</li> <li>Install django  - Installed version 2.1 <pre><code>pip install django\n</code></pre></li> <li>Use at least python 3.7</li> </ul> </li> <li>Create a new project <pre><code>django-admin startproject django_project\n</code></pre>         - django_project folder now contains folder django_project (yup - 2 folders with the same name), and program manage.py         - in sub folder django_project:              - <code>__init__.py</code> empty file that tells python this is a python package             - settings.py -                  - SECRET_KEY - Adds security to Django                 - DEBUG = True                 - INSTALLED_APPS             - urls.py -                 - path admin already setup              - wsgi.py - used to communicate with web server</li> <li>See the default site  <pre><code>python manage.py runserver\n</code></pre><ul> <li>Warnings about migrations</li> <li>Site at localhost:8000 or 127.0.0.1:8000</li> <li>Can got to localhost:8000/admin for admin screen. No way to login yet.</li> </ul> </li> </ul>","tags":["django","coreyschaefer","django_start"]},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/","title":"Chapter 1 Initial Setup","text":""},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#build-websites-with-python-django","title":"Build websites with Python &amp; Django","text":""},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#william-s-vincent","title":"William S. Vincent","text":""},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#create-a-folder-where-were-going-to-build-our-first-project","title":"Create a folder where we're going to build our first project.","text":"<pre><code>mkdir code          # Create a directory for our projects\ncd code             # Change to that directory\nmkdir ch1-setup     # Make a subdirectory for Chapter 1\ncd ch1-setup        # Change to that subdirectory\n</code></pre>"},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#to-create-a-virtual-environment-within-this-new-directory-use-the-format","title":"To create a virtual environment within this new directory use the format:","text":"<pre><code>python3 -m venv &lt;name_of_env&gt; # This creates a venv\n</code></pre> <p>It is up to the developer to choose a proper environment name but a common choice is to call it .venv. That hides the venv and is therefore one less piece of clutter on screens.</p>"},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#activate-the-virtual-environment","title":"Activate the virtual environment","text":"<pre><code> source .venv/bin/activate\n</code></pre> <p>The shell prompt now has the environment name (.venv) prefixed which indicates that the virtual environment is active. Any Python packages installed or updated within this location will be confined to the active virtual environment. To deactivate and leave a virtual environment type <code>deactivate</code>.</p>"},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#install-django","title":"Install Django","text":"<p><pre><code>python -m pip install django~=4.0.0\n</code></pre> The comparison operator \u223c= ensures that subsequent security updates for Django, such as 4.0.1, 4.0.2, and so on are automatically installed. Note that while it is possible to use the shorter version of pip install , it is a best practice to use the longer but more explicit form of python -m pip install  to ensure that the correct version of Python is used. This can be an issue if you have multiple versions of Python installed on your computer."},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#first-django-project","title":"First Django Project","text":"<p>A Django project can have almost any name but we will use django_project in this book.  <pre><code>(.venv) &gt; django-admin startproject django_project .\n</code></pre></p> <p>It\u2019s worth pausing here to explain why you should add a period (.) to the end of the previous command. If you don't include the period, Django creates another django_project directory. This feels redundant to me which is why I prefer adding a period to the end which installs Django in the current directory.</p>"},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#runserver-to-test-installation","title":"Runserver to test installation","text":"<p>Now let\u2019s confirm everything is working by running Django\u2019s internal web server via the runserver command. This is suitable for local development purposes, but when it comes time to deploy our project\u2019s online we will switch to a more robust WSGI server like Gunicorn.</p> <pre><code>python manage.py runserver\n</code></pre>"},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#code-editor-and-git","title":"Code Editor and Git","text":"<p>Make sure you have a code editor and git installed. He recommends both the microsoft python extension for vscode and an extension called black which formats python code. </p>"},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/","title":"Django for Beginners","text":""},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/#build-websites-with-python-django","title":"Build websites with Python &amp; Django","text":""},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/#william-s-vincent","title":"William S. Vincent","text":""},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/#chapter-2-hello-world-app","title":"Chapter 2: Hello World App","text":"<p>In this chapter we will build a Django project that simply says \u201cHello, World\u201d on the homepage. This is the traditional way to start a new programming language or framework. We\u2019ll also work with Git for the first time and deploy our code to GitHub.</p>"},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/#initial-setup","title":"Initial Setup","text":"<pre><code>% cd ~/code\n% mkdir helloworld\n% cd helloworld\n</code></pre> <p>Create a new virtual environment called .venv, activate it, and install Django with Pip as we did in the previous chapter.</p> <p>Now we\u2019ll use the Django startproject command to make a new project called django_project. Don\u2019t forget to include the period (.) at the end of the command so that it is installed in our current directory.</p> <pre><code>(.venv) &gt; django-admin startproject django_project .\n</code></pre> <p>Django has added a django_project directory and a manage.py file. Within directory django_project are five new files: * <code>__init__.py</code> indicates that the files in the folder are part of a Python package. Without this file, we cannot import files from another directory which we will be doing a lot of in Django! * asgi.py allows for an optional Asynchronous Server Gateway Interface to be run * settings.py controls our Django project\u2019s overall settings * urls.py tells Django which pages to build in response to a browser or URL request * wsgi.py stands for Web Server Gateway Interface which helps Django serve our eventual web pages.</p> <p>The manage.py file is not part of django_project but is used to execute various Django commands such as running the local web server or creating a new app.</p> <p>Let\u2019s try out our new project by using Django\u2019s lightweight built-in web server for local development purposes. The command we\u2019ll use is runserver which is located in manage.py.</p> <p>Note that the full command line output will contain additional information including a warning about 18 unapplied migrations. Technically, this warning doesn\u2019t matter at this point. Django is complaining that we have not yet \u201cmigrated\u201d our initial database. Since we won\u2019t actually use a database in this chapter the warning won\u2019t affect the end result. However, since warnings are still annoying to see, we can remove it by first stopping the local server with the command Control+c and then running <code>python manage.py migrate</code>.</p> <p>What Django has done here is create a SQLite database and migrated its built-in apps provided for us. This is represented by the new file db.sqlite3 in our directory.</p> <p>The Django MVT pattern is as follows: * Model: Manages data and core business logic * View: Describes which data is sent to the user but not its presentation * Template: Presents the data as HTML with optional CSS, JavaScript, and Static Assets * URL Configuration: Regular-expression components configured to a View</p> <p>When you type in a URL, such as https://djangoproject.com, the first thing that happens within our Django project is a URL pattern (contained in urls.py) is found that matches it. The URL pattern is linked to a single view (contained in views.py) which combines the data from the model (stored in models.py) and the styling from a template (any file ending in .html). The view then returns a HTTP response to the user.</p>"},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/#create-an-app","title":"Create an App","text":"<p>Django uses the concept of projects and apps to keep code clean and readable. A single top-level Django project can contain multiple apps. Each app controls an isolated piece of functionality. For example, an e-commerce site might have one app for user authentication, another app for payments, and a third app to power item listing details. That\u2019s three distinct apps that all live within one top-level project. How and when you split functionality into apps is somewhat subjective, but in general, each app should have a clear function.</p> <pre><code>(.venv) % python3 manage.py startapp pages\n</code></pre> <p>If you look visually at the helloworld directory Django has created within it a new pages directory.</p> <p>Let\u2019s review what each new pages app file does:</p> <ul> <li>admin.py is a configuration file for the built-in Django Admin app</li> <li>apps.py is a configuration file for the app itself</li> <li>migrations/ keeps track of any changes to our models.py file so it stays in sync with our database</li> <li>models.py is where we define our database models which Django automatically translates into database tables</li> <li>tests.py is for app-specific tests</li> <li>views.py is where we handle the request/response logic for our web app</li> </ul> <p>Notice that the model, view, and url from the MVT pattern are present from the beginning. The only thing missing is a template which we\u2019ll add shortly. Even though our new app exists within the Django project, Django doesn\u2019t \u201cknow\u201d about it until we explicitly add it to the django_project/settings.py file. Add pages.apps.PagesConfig at the bottom.</p> <pre><code># django_project/settings.py\nINSTALLED_APPS = [\n\"django.contrib.admin\",\n\"django.contrib.auth\",\n\"django.contrib.contenttypes\",\n\"django.contrib.sessions\",\n\"django.contrib.messages\",\n\"django.contrib.staticfiles\",\n\"pages.apps.PagesConfig\", # new\n]\n</code></pre> <p>What is PagesConfig you might ask? Well, it is the name of the solitary function within the pages/apps.py file at this point.</p>"},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/#create-first-view","title":"Create First View","text":"<p>The next step is therefore to create our first view. Start by updating the views.py file in our pages app to look as follows:</p> <pre><code># pages/views.py\nfrom django.http import HttpResponse\n\ndef homePageView(request):\n    return HttpResponse(\"Hello, World!\")\n</code></pre> <p>There are two types of views in Django: function-based views (FBVs) and class-based views (CBVs). Our code in this example is a function-based view: it is relatively simple to implement and explicit. Django originally started with only FBVs but over time added CBVs which allow for much greater code reusability, keeps things DRY (Don\u2019t-Repeat-Yourself), and can be extended via mixins. The additional abstraction of CBVs makes them quite powerful and concise, however it also makes them harder to read for Django newcomers.</p> <p>Because web development quickly becomes repetitive Django also comes with a number of built- in generic class-based views (GCBVs) to handle common use cases such as creating a new object, forms, list views, pagination, and so on. We will be using GCBVs heavily in this book in later chapters.</p> <p>There are therefore technically three ways to write a view in Django: function-based views (FBVs), class-based views (CBVs), and generic class-based views (GCBVs). This customization is helpful for advanced developers but confusing for newcomers. Many Django developers\u2013including your author\u2013prefer to use GCBVs when possible and revert to CBVs or FBVs when required. </p> <p>We need to configure our URLs. In your text editor, create a new file called urls.py within the pages app. Then update it with the following code:</p> <pre><code># pages/urls.py\nfrom django.urls import path\nfrom .views import homePageView\n\nurlpatterns = [\n    path(\"\", homePageView, name=\"home\"),\n]\n</code></pre> <p>On the top line we import path from Django to power our URL pattern and on the next line we import our views. By referring to the views.py file as .views we are telling Django to look within the current directory for a views.py file and import the view homePageView from there. Our URL pattern has three parts: * a Python regular expression for the empty string \"\" * a reference to the view called homePageView * an optional named URL pattern22 called \"home\"</p> <p>In other words, if the user requests the homepage represented by the empty string \"\", Django should use the view called homePageView.</p> <p>The last step is to update our django_project/urls.py file. It\u2019s common to have multiple apps within a single Django project, like pages here, and they each need their own dedicated URL path.</p> <pre><code># django_project/urls.py\nfrom django.contrib import admin\nfrom django.urls import path, include\n # new\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"\", include(\"pages.urls\")), # new\n]\n</code></pre> <p>This need for two separate urls.py files is often confusing to beginners. Think of the top-level django_project/urls.py as the gateway to various url patterns distinct to each app.</p>"},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/#git","title":"Git","text":"<p>initialize (or add) Git to our repository. Make sure you\u2019ve stopped the local server with Control+c, then run the command git init.</p> <p>If you then type git status you\u2019ll see a list of changes since the last Git commit. Since this is our first commit, this list is all of our changes so far.</p> <p>Note that our virtual environment .venv is included which is not a best practice. It should be kept out of Git source control since secret information such as API keys and the like are often included in it. The solution is to create a new file called .gitignore which tells Git what to ignore. In this new file, add a single line for .venv.</p> <p>We do want a record of packages installed in our virtual environment. The current best practice is to create a requirements.txt file with this information. The command <code>pip freeze</code> will output the contents of your current virtual environment and by using the &gt; operator we can do all this in one step: output the contents into a new file called requirements.txt.</p> <pre><code>(.venv) &gt; pip freeze &gt; requirements.txt\n</code></pre> <p>We next want to add all recent changes by using the command add -A and then commit the changes along with a message (-m) describing what has changed.</p> <pre><code>(.venv) &gt; git add -A\n(.venv) &gt; git commit -m \"initial commit\"\n</code></pre> <pre><code>cd existing_repo\ngit remote add origin https://gitlab.com/terryinfcco/hello-world.git\ngit branch -M main\ngit push -uf origin main\n</code></pre> <p>Note I added an ssh key to gitlab from the beelink i5 kubuntu 21.10 upgraded to 22.04 build. I couldn't make the ssh work, so I finally did the git push with username and password, deleted all the local stuff and then cloned the hello-world repo using ssh. Now it works.</p>"},{"location":"django/Udemy_Django_Academind/section1/","title":"Django Practical Guide Section 1","text":""},{"location":"django/Udemy_Django_Academind/section1/#getting-started","title":"Getting Started","text":""},{"location":"django/Udemy_Django_Academind/section1/#notes","title":"Notes","text":""},{"location":"django/Udemy_Django_Academind/section1/#what-is-django","title":"What is Django","text":"<p>HTML, CSS and Javascript still used for the front end. Django is just a python back end / web development framework. Tools for sessions, databases, request / response. And a clear set of rules for projects. Django is \"opinionated\". Still customizable and flexible. </p>"},{"location":"django/Udemy_Django_Academind/section1/#course-prequisites","title":"Course Prequisites","text":"<p>Basic Python knowledge. Basic Web Development knowledge. Request / response, HTML, CSS, Javascript. </p>"},{"location":"django/Udemy_Django_Academind/section1/#whats-inside-the-course","title":"What's Inside the Course","text":"<p>Three main pillars: Foundation - URL's, Routes, Views, Templates, Static Files, Data, Models</p> <p>Beyond the Basics - Forms, Class based views, File Uploads, Sessions</p> <p>Preparing for Reality - Many Small Examples, A Real Project Blog, Front End + Admin Area, Implementation. </p>"},{"location":"django/Udemy_Django_Academind/section1/#getting-the-most-out-of-the-course","title":"Getting the most out of the course.","text":"<p>Watch the videos. Don't hesitate to repeat as necessary. Use playback speed if too slow or fast. Code along and code ahead. Compare your approach to his. Use code attachments - github repo's for each section. </p>"},{"location":"django/Udemy_Django_Academind/section1/#course-path","title":"Course Path","text":"<p>Standard approach - start with video 1 and go in order. At end is a Django summary module. Great recap and refresh.</p> <p>Summary Approach - just take the summary. Not recommended. </p>"},{"location":"django/Udemy_Django_Academind/section1/#summary","title":"Summary","text":""},{"location":"django/Udemy_Django_Academind/section1/#category","title":"Category","text":""},{"location":"django/codemy_django_intro/00-Home/","title":"00-Codemy Django Intro Index","text":"<ul> <li>Start a Django Project</li> <li>Add an App to the Project</li> </ul>"},{"location":"django/codemy_django_intro/01-Stuff_For_Every_Django_Project/","title":"01 Stuff For Every Django Project","text":""},{"location":"django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#set-up-a-development-environment","title":"Set up a Development Environment","text":"<ul> <li>install Python3</li> <li>install Pip3</li> <li>install venv</li> <li>You need a text editor</li> <li>Make sure you have a terminal app / a command line.</li> </ul>"},{"location":"django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#create-a-virtual-environment","title":"Create a Virtual Environment","text":"<pre><code>mkdir code # Create a directory for our code\ncd code # change to the code directory\npython3 -m venv venv # Creates a venv named venv\nsource venv/bin/activate # activates the venv\npip freeze # shows a list of what's installed in the venv \n</code></pre>"},{"location":"django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#install-django-make-sure-venv-is-active","title":"Install Django - make sure venv is active","text":"<p><code>pip install django</code></p>"},{"location":"django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#create-a-new-django-project","title":"Create a new Django Project","text":"<pre><code># Make sure you're in code and the venv is active\nmkdir djangoproject\ncd djangoproject\ndjango-admin startproject mysite .\n# This creates a mysite subdirectory and a manage.py file\n</code></pre>"},{"location":"django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#run-the-django-devlopment-server","title":"Run the Django Devlopment Server","text":"<pre><code># Make sure you're in code/djangoproject\npython manage.py runserver\n# go to localhost:8000 in a browser to make sure you get successful install screen\n</code></pre>"},{"location":"django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#fix-the-migration-errors","title":"Fix the migration errors","text":"<pre><code># To fix the initial migrations errors you get\npython3 manage.py migrate\n# This also creates the admin section which can be accessed at localhost:8000/admin\n</code></pre>"},{"location":"django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#create-the-superuser","title":"Create the Superuser","text":"<pre><code>python manage.py createsuperuser\n# give a username, email, and password\n# Now can login at localhost:8000/admin/\n</code></pre>"},{"location":"django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#notes","title":"Notes","text":"<p>I think I did the last two steps on the pi 400 in the basement, but they didn't exist when I moved upstairs. So they either don't get put on gitlab or I forgot to do a git push at the end.</p>"},{"location":"django/codemy_django_intro/02-Set_Up_App/","title":"02-These Are Steps to Add an App to a Django Project","text":""},{"location":"django/codemy_django_intro/02-Set_Up_App/#create-the-app","title":"Create the App","text":"<p>An app is one section of a large website, but this project has only one app.</p> <pre><code>python manage.py startapp pages\n# Creates code/djangoproject/pages\n</code></pre>"},{"location":"django/codemy_django_intro/02-Set_Up_App/#add-the-app-to-the-project","title":"Add the App to the Project","text":"<p>In code/djangoproject/mysite/settings.py add 'pages', to INSTALLED_APPS list.</p>"},{"location":"django/codemy_django_intro/02-Set_Up_App/#add-urlspy-at-app-level","title":"Add urls.py at app level","text":"<p>It's cleaner to keep urls separated by app. So in code/djangoproject/pages create urls.py. Then set up a skeleton in the new urls.py</p> <pre><code>from django.urls import path\nurlpatterns = []\n</code></pre>"},{"location":"django/codemy_django_intro/02-Set_Up_App/#create-the-views","title":"Create the Views","text":"<p>Every web page created in our app has to have a view so in pages/views.py:</p> <p><pre><code>from django.shortcuts import render\ndef home(request):\n    return render(request, \"home.html\", {})\ndef about(request):\n    return render(request, \"about.html\", {})\n</code></pre> In each function, request is required, the html files are the names of the templates we're going to use. {} is a dictionary that we can use to pass data to the template</p>"},{"location":"django/codemy_django_intro/02-Set_Up_App/#add-templates","title":"Add Templates","text":"<p>Add a subdirectory in pages called templates. Create home.html and about.html and add a header in each page. HOME PAGE and ABOUT PAGE.</p>"},{"location":"django/codemy_django_intro/02-Set_Up_App/#add-the-views-to-pagesurlspy","title":"Add the views to pages/urls.py","text":"<pre><code># import the views.py file so we can connect them to urls.\nfrom . import views\n# Then in usrpatterns list add a url for each view\npath ('', views.home, name='home'),\npath ('about/', views.about, name='about'),\n# First is the page name that follows localhost:8000,\n# Then the name of the function in views.py that we're attaching to that url,\n# Then a name we can use for linking to this page.\n</code></pre>"},{"location":"django/codemy_django_intro/02-Set_Up_App/#link-app-urlspy-to-project-urlspy","title":"Link App urls.py to Project urls.py","text":"<p>So in project urls.py </p> <pre><code>from django.urls import path, include\n# then add to urlpatterns list\npath('', include('pages.urls)),\n</code></pre>"},{"location":"django/codemy_django_intro/03-Django-Basics/","title":"03-Django Basics","text":""},{"location":"django/codemy_django_intro/03-Django-Basics/#creating-links","title":"Creating Links","text":"<p>You could use regular old html links:</p> <pre><code>&lt;a href=\"/\"&gt;Home&lt;/a&gt; | &lt;a href=\"/about\"&gt;About&lt;/a&gt;\n</code></pre> <p>But it's more flexible and easier to change later if necessary if we use Django links:</p> <pre><code>&lt;a href=\"{% url 'home' %}\"&gt;Home&lt;/a&gt; | &lt;a href=\"{% url 'about' %}\"&gt;About&lt;/a&gt;\n</code></pre> <p>The 'home' and 'about' refer to the names in the urlpatterns list in urls.py.  Later if we want to change a path, we don't have to change it on every page, we just have to change the path in urls.py.</p>"},{"location":"django/codemy_django_intro/03-Django-Basics/#extends-base-file","title":"Extends Base File","text":"<p>Sharing common things among web pages. </p> <ul> <li> <p>Create a template file called base.html in pages/templates and paste the bootstrap template.</p> </li> <li> <p>At beginning of body in base.html put a block where the code that's unique to the various web pages goes. </p> </li> </ul> <pre><code>{% block content %}\n{% endblock %}\n</code></pre> <ul> <li>Then in each web page put the content of that web page in:</li> </ul> <pre><code>{% extends 'base.html' %}\n\n{% block content %}\n&lt;h1&gt;\n    Home Page\n&lt;/h1&gt;\n{% endblock %}\n</code></pre>"},{"location":"django/codemy_django_intro/03-Django-Basics/#block-title","title":"Block Title","text":"<p>This will allow unique titles on each page of the website (what goes on the tab in the browser)</p> <p>So in about.html he put:</p> <pre><code>{% block title %}About John Elder{% endblock %}\n</code></pre> <p>This is a separate block from block content and isn't nested.</p> <p>Then in base.html:</p> <pre><code>&lt;title&gt;{% block title %}Hello, world! {% endblock %}&lt;/title&gt;\n</code></pre> <p>What happens is if the page we're displaying has a block named title, that name will be used, so in the above example the about page will show About John Elder. However on a page that doesn't have a block named title we'll see Hello, world! (like on our home page since we haven't added a block title to it).</p>"},{"location":"django/codemy_django_intro/03-Django-Basics/#add-a-navbar","title":"Add a Navbar","text":"<p>Grabs the navbar example at the top of the Bootstrap 4.1 Components navbar page and pastes it into base.html right below the opening body tag. </p> <p>At the opening nav tag, he changed navbar-light to navbar-dark and bg-light to bg-dark. </p> <p>Again in base.html, he wraps the block content and endblock statements in a div with the class of container, and adds a line break above the div that he just added.</p> <p>Then clean up the navbar. Delete the form that's a search box. Deletes the dropdown menu. Deletes the disabled link, and the home link. Change the label that says Navbar to John Elder.</p> <p>Then change the navbar links to Django style:</p> <pre><code>          &lt;li class=\"nav-item\"&gt;\n            &lt;a class=\"nav-link\" href=\"{% url 'home' %}\"&gt;Home&lt;/a&gt;\n          &lt;/li&gt;\n          &lt;li class=\"nav-item\"&gt;\n            &lt;a class=\"nav-link\" href=\"{% url 'about' %}\"&gt;About&lt;/a&gt;\n          &lt;/li&gt;\n</code></pre>"},{"location":"flask/Flask_Tutorial_for_Beginners-Clever_%20Programmer_%20Youtube/","title":"Flask Tutorial for Beginners - Clever Programmer Youtube","text":""},{"location":"flask/Flask_Tutorial_for_Beginners-Clever_%20Programmer_%20Youtube/#section-1-very-basic-flask-app","title":"Section 1 Very Basic Flask App","text":"<ul> <li>Micro Framework - lightweight and bare bones</li> <li>Created directory called Flask App</li> <li>After creating a virtual environment called venv: <code>pip install flask</code> to install Flask</li> <li><code>flask --version</code> to make sure Flask is installed. He was on 1.1.1  and Python 2.7. So fairly old. We'll see if that messes me up.</li> <li>Create new file <code>app.py</code></li> </ul> <p>````Python from flask import Flask</p> <p>app = Flask(name)</p> <p>@app.route('/')   # Set up the root page of the website</p>"},{"location":"flask/Flask_Tutorial_for_Beginners-Clever_%20Programmer_%20Youtube/#could-put-multiple-routes-for-one-function-so","title":"Could put multiple routes for one function so:","text":"<p>@app.rount('/home') def hello():     return \"Hello World\"</p> <p>if name == \"main\":  # only true if running from command line on localhost     app.run(debug=True)</p> <p>```</p> <ul> <li>To run <code>python app.py</code> and should run at localhost:5000</li> </ul>"},{"location":"flask/Flask_Tutorial_for_Beginners-Clever_%20Programmer_%20Youtube/#section-2","title":"Section 2","text":""},{"location":"flask/bootcamp_section_7/","title":"Flask Bootcamp Jose Section 7","text":""},{"location":"flask/bootcamp_section_7/#flask-basics","title":"Flask Basics","text":""},{"location":"flask/bootcamp_section_7/#virtual-environments","title":"Virtual Environments.","text":"<p>He uses Anaconda, so I'll just do it my way. Each project can have it's own development environment. He created an enviroment called myflaskenv, activated it, and installed flask. </p>"},{"location":"flask/bootcamp_section_7/#flask-hello-world-site","title":"Flask Hello World Site","text":"<p>He created the following program and called it basic.py</p> <pre><code>from flask import Flask # import the Flask Class\napp = Flask(__name__)   # creates Flask application object. \n\n@app.route('/') # decorator links page to root route. \ndef index(): # defines page named index \n    return '&lt;h1&gt;Hello Puppy!'&lt;/h1&gt;\n\nif __name__ == '__main__': # Only run if we are running program directly\n    app.run()\n</code></pre>"},{"location":"flask/bootcamp_section_7/#basic-routes","title":"Basic Routes","text":"<p>String passed in the decorator determines the URL extension that will link to the function that directly follows the decorator. Also known as a view.</p> <pre><code># points to http://localhost:5000/some_page\n@app.route(\"/some_page\")\n</code></pre> <p>Add an info page to our application</p> <pre><code>from flask import Flask # import the Flask Class\napp = Flask(__name__)   # creates Flask application object. \n\n@app.route('/') # decorator links page to root route. \ndef index(): # defines page named index \n    return '&lt;h1&gt;Hello Puppy!'&lt;/h1&gt;\n\n@app.route('/information') #127.0.0.1:5000/information\ndef info():\n    return \"&lt;h1&gt;Puppies are cute!&lt;/h1&gt;\"\n\nif __name__ == '__main__': # Only run if we are running program directly\n    app.run()\n</code></pre>"},{"location":"flask/bootcamp_section_7/#dynamic-routing","title":"Dynamic Routing","text":"<p>Example would be when we want a landing page for each user, so after the user logs in, the page could be www.site.com/user/unique_user_name. </p> <pre><code>@app.route('/some_page/&lt;name&gt;')\ndef other_page(name):\n    return 'User: {}'.format(name)\n</code></pre> <p>Adding to our program</p> <pre><code>from flask import Flask # import the Flask Class\napp = Flask(__name__)   # creates Flask application object. \n\n@app.route('/') # decorator links page to root route. \ndef index(): # defines page named index \n    return '&lt;h1&gt;Hello Puppy!'&lt;/h1&gt;\n\n@app.route('/information') #127.0.0.1:5000/information\ndef info():\n    return \"&lt;h1&gt;Puppies are cute!&lt;/h1&gt;\"\n\n# Example of dynamic routing    \n@app.route('/puppy/&lt;name&gt;')\ndef puppy(name):\n    return \"&lt;h1&gt;This is a page for {}&lt;/h1&gt;\".format(name)\n\n# Example of dynamic routing    and return upper case\n@app.route('/puppy/&lt;name&gt;')\ndef puppy(name):\n    return \"&lt;h1&gt;Upper Case: {}&lt;/h1&gt;\".format(name.upper())\n\nif __name__ == '__main__': # Only run if we are running program directly\n    app.run()\n</code></pre>"},{"location":"flask/bootcamp_section_7/#debug-mode","title":"Debug Mode","text":"<pre><code># to get better error messages in the browser. You get a debugger PIN when you\nlaunch the application and can use that to start a python console. \napp.run(debug=True)\n</code></pre>"},{"location":"flask/bootcamp_section_7/#summary","title":"Summary","text":""},{"location":"flask/bootcamp_section_7/#category","title":"Category","text":""},{"location":"tkinter/vid1_window_basics/","title":"Bro Code Youtube Channel Tkinter","text":""},{"location":"tkinter/vid1_window_basics/#video-1-windows","title":"Video 1 - Windows","text":"<pre><code>from tkinter import *\n\nwindow = Tk() # instantiate an instance of a tkinter window\n# Change the size of the window\nwindow.geometry(\"420x420\")\n\n# Change the title of the window\nwindow.title(\"Bro Code First GUI Program\")\n\n# Give it a favicon - I tried both True and False in the iconphoto stmt and \n# couldn't tell any difference.\n\nicon = PhotoImage(file=\"linux.png\")\nwindow.iconphoto(True, icon)\n\n# change background color of window\nwindow.config(background=\"#5cfcff\")\n\nwindow.mainloop() # place window on computer screen and listen for events.\n</code></pre>"},{"location":"tkinter/vid2_labels/","title":"Bro Code Youtube Channel Video 2","text":""},{"location":"tkinter/vid2_labels/#labels","title":"Labels","text":"<pre><code>from tkinter import *\n\nwindow = Tk()\n\n# label is an area widget that holds text or an image\n# window is the container where the label goes.\n# text puts text in the label\n# font changes the font color\n# fg is the foreground color - color name or hex value works for all these colors\n# bg is the background color\n# relief is the border style\n# bd is the width of the border in pixels\n# padx is horizontal spacing between text and border\n# pady is vertical spacing between text and border\nlabel = Label(window,\n     text=\"Hello World\", \n     font=(\"Arial\",40,'bold','underline'), \n     fg='green',\n     bg='black',\n     relief=RAISED,\n     bd=10, \n     padx=20,\n     pady=20)\n# label.place(relx = 0.35 , rely = 0.0)\nlabel.pack()\n\n# 2nd label to show SUNKEN relief\nlabel2 = Label(window,\n     text=\"Label 2\", \n     font=(\"Arial\",40,'bold','underline'), \n     fg='green',\n     bg='black',\n     relief=SUNKEN,\n     bd=10)\n# label.place(relx = 0.35 , rely = 0.0)\nlabel2.pack()\n\n# Put an image in a label\n# make it a photoimage, compound shows where the image goes relative to the text. \n# so in this case the image is above the text. \nphoto = PhotoImage(file=\"linux.png\")\nlabel3 = Label(text=\"Linux Penguin\",\n    font=(\"Arial\", 20), \n    image=photo, compound=\"top\")\nlabel3.pack()\nwindow.mainloop()\n</code></pre>"},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#coreyschaefer","title":"coreyschaefer","text":"<ul> <li>Corey Schaefer Django Video Series 1</li> </ul>"},{"location":"tags/#django","title":"django","text":"<ul> <li>Corey Schaefer Django Video Series 1</li> </ul>"},{"location":"tags/#django_start","title":"django_start","text":"<ul> <li>Corey Schaefer Django Video Series 1</li> </ul>"}]}