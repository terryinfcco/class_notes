{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Another Terry Attempt at Notes","text":"<p>Right now this is stored at github in the class_notes repository</p>"},{"location":"#scratchpad","title":"Scratchpad","text":""},{"location":"#welcome-to-mkdocs","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Cornell_Notes/","title":"Cornell (kind of) Notes Template","text":""},{"location":"Cornell_Notes/#title","title":"Title","text":""},{"location":"Cornell_Notes/#notes","title":"Notes","text":""},{"location":"Cornell_Notes/#summary","title":"Summary","text":""},{"location":"Cornell_Notes/#category","title":"Category","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#caleb","title":"caleb","text":"<ul> <li>Setup</li> <li>New Project</li> <li>Model View Template</li> <li>First View</li> <li>Using Templates</li> <li>More Complicated Data</li> <li>Models and Databases</li> <li>Working With Real Data</li> <li>Create Detailed View</li> </ul>"},{"location":"tags/#codemy","title":"codemy","text":"<ul> <li>Codemy Django Simple Blog Series 1</li> </ul>"},{"location":"tags/#coreyschaefer","title":"coreyschaefer","text":"<ul> <li>Corey Schaefer Django Video Series 1</li> <li>Corey Schaefer Flask Video Series 1</li> <li>Corey Schaefer Flask Video Series 2</li> </ul>"},{"location":"tags/#dj_data","title":"dj_data","text":"<ul> <li>Working With Real Data</li> </ul>"},{"location":"tags/#dj_forms","title":"dj_forms","text":"<ul> <li>Create Detailed View</li> </ul>"},{"location":"tags/#dj_models","title":"dj_models","text":"<ul> <li>Models and Databases</li> </ul>"},{"location":"tags/#dj_mvt","title":"dj_mvt","text":"<ul> <li>Model View Template</li> </ul>"},{"location":"tags/#dj_setup","title":"dj_setup","text":"<ul> <li>Setup</li> </ul>"},{"location":"tags/#dj_startproject","title":"dj_startproject","text":"<ul> <li>New Project</li> </ul>"},{"location":"tags/#dj_templates","title":"dj_templates","text":"<ul> <li>Using Templates</li> <li>More Complicated Data</li> </ul>"},{"location":"tags/#dj_views","title":"dj_views","text":"<ul> <li>First View</li> </ul>"},{"location":"tags/#django","title":"django","text":"<ul> <li>Setup</li> <li>New Project</li> <li>Model View Template</li> <li>First View</li> <li>Using Templates</li> <li>More Complicated Data</li> <li>Models and Databases</li> <li>Working With Real Data</li> <li>Create Detailed View</li> <li>Codemy Django Simple Blog Series 1</li> <li>Corey Schaefer Django Video Series 1</li> </ul>"},{"location":"tags/#django_start","title":"django_start","text":"<ul> <li>Codemy Django Simple Blog Series 1</li> <li>Corey Schaefer Django Video Series 1</li> </ul>"},{"location":"tags/#flask","title":"flask","text":"<ul> <li>Corey Schaefer Flask Video Series 1</li> <li>Corey Schaefer Flask Video Series 2</li> </ul>"},{"location":"tags/#flask_start","title":"flask_start","text":"<ul> <li>Corey Schaefer Flask Video Series 1</li> </ul>"},{"location":"tags/#flasktemplates","title":"flasktemplates","text":"<ul> <li>Corey Schaefer Flask Video Series 2</li> </ul>"},{"location":"Python/Invent_Your_Own_Computer_Games_with_Python/","title":"Invent Your Own Computer Games with Python","text":""},{"location":"Python/Object_Oriented_Python/","title":"Object Oriented Python","text":""},{"location":"Python/Object_Oriented_Python/#introduction","title":"Introduction","text":"<ul> <li> <p>The OOP paradigm gives programmers an efficient way to combine code and data into cohesive units that are often highly reusable.</p> </li> <li> <p>Even though PEP 8 Style Guide for Python Code recommends snake_case, he uses camelCase.</p> </li> <li> <p>He created a package of pygame widgets called pygwidgets which will be used later.</p> </li> <li> <p>Downloaded all code from book in /home/terry/github/Object-Oriented-Python</p> </li> <li> <p>He uses and suggests Pycharm Community Edition</p> </li> <li> <p>please see my YouTube video \u201cDebugging Python 3 with PyCharm\u201d at   https://www.youtube.com/watch?v=cxAOSQQwDJ4&amp;t=43s/.</p> </li> </ul>"},{"location":"Python/Object_Oriented_Python/#chapter-1-5626","title":"Chapter 1 - 56:26","text":""},{"location":"Python/Codemy_SQLite3/Create_connection/","title":"Using SQLite3 Databases with Python","text":""},{"location":"Python/Codemy_SQLite3/Create_connection/#create-sqlite-connection-codemycom-video-4","title":"Create SQLite Connection Codemy.com Video 4","text":"<p>SQLite comes with Python. </p>"},{"location":"Python/Codemy_SQLite3/Create_connection/#this-code-creates-the-database","title":"This code creates the Database:","text":"<pre><code># import sqlite3 object\nimport sqlite3\n\n# Create a connection called conn and create a database called customer.db\n# if db already exists this will just connect to it. \nconn = sqlite3.connect('customer.db')\n\n# You can create an in memory database that only lasts the duration of your\n# program and isn't saved. Use ':memory:' as the argument.\n\n# conn = sqlite3.connect(':memory:')\n</code></pre>"},{"location":"Python/Codemy_SQLite3/Create_connection/#this-creates-a-database-table","title":"This Creates a Database Table","text":"<p>Tables contain all the data in a database. Pretty much like a spreadsheet, tables and columns. </p> <pre><code># import sqlite3 object\nimport sqlite3\n\n# Create a connection called conn and create a database called customer.db\n# if db already exists this will just connect to it. \nconn = sqlite3.connect('customer.db')\n\n# Most activities require a cursor. Build it once, call it anything\nc = conn.cursor()\n\n# Now create the table using a docstring\n# sqlite3 only has 5 datatypes. NULL, INTEGER, REAL, TEXT, BLOB\n# NULL is does it exist, BLOB for things like videos, images, mp3, etc. \nc.execute(\"\"\"CREATE TABLE customers (\n    first_name text,\n    last_name text,\n    email text\n)\n\n    \"\"\")\n\n# To actually create the table have to commit our connection\nconn.commit()\n\n# Close the connection\nconn.close()\n</code></pre>"},{"location":"Python/Codemy_SQLite3/ManageTables/","title":"Adding Data in SQLite3","text":""},{"location":"Python/Codemy_SQLite3/ManageTables/#add-one-record-to-a-table-video-6","title":"Add One Record to a table - Video 6","text":"<pre><code>import sqlite3\n\n# Connect to the database\nconn = sqlite3.connect('customer.db')\n\n# Create a Cursor\nc = conn.cursor\n\n# These correspond to the fields we added to our table, first_name,\n# last_name, email\n\nc.execute(\"INSERT INTO customers VALUES ('John', 'Elder', 'john@codemy.com')\")\nc.execute(\"INSERT INTO customers VALUES ('Tim', 'Smith', 'tim@codemy.com')\")\nc.execute(\"INSERT INTO customers VALUES ('Mary', 'Brown', 'mary@codemy.com')\")\n\n\n# Commit our command\nconn.commit()\n\n# Close our connection\nconn.close()\n</code></pre>"},{"location":"Python/Codemy_SQLite3/ManageTables/#insert-many-records-into-the-database-video-7","title":"Insert many records into the database - Video 7","text":"<pre><code>import sqlite3\n\n# Connect to the database\nconn = sqlite3.connect('customer.db')\n\n# Create a Cursor\nc = conn.cursor\n\n# These correspond to the fields we added to our table, first_name,\n# last_name, email\n\nmany_customers = [('Wes', 'Brown', 'wes@brown.com'), \n    ('Steph', 'Kuewa', 'steph@kuewa.com'), \n    ('Dan', 'Pas', 'dan@pas.com'),\n]\n\nc.executemany(\"INSERT INTO customers VALUES (?,?,?)\", many_customers)\n\n# Commit our command\nconn.commit()\n\n# Close our connection\nconn.close()\n</code></pre>"},{"location":"WebDevelopment/HeadFirst_HTML_and_CSS_Notes/","title":"How to Use a Head First Book to study","text":"<ul> <li>Slow down. The more you understand, the less you have to memorize</li> <li>Do the exercises. Write your own notes. Use a pencil. Physical activity while learning can increase learning.</li> <li>Read the \"There Are No Dumb Questions\". They're part of the core content.</li> <li>Drink water. Lots of it. Dehydration decreases cognitive function</li> <li>Listen to your brain. If you're starting to skim or forget what you just read, it's time for a break. </li> <li>Create something. Go beyond the book.</li> </ul>"},{"location":"WebDevelopment/HeadFirst_HTML_and_CSS_Notes/#chapter-1-getting-to-know-html","title":"Chapter 1 - Getting to know HTML","text":""},{"location":"WebDevelopment/HeadFirst_HTML_and_CSS_Notes/#the-language-of-the-web","title":"The Language of the Web","text":"<ul> <li>6 Levels of headings <code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code> with h1 being the largest</li> <li>Typically headings beyond h3</li> <li>Comments <code>&lt;!-- Here's the beginning of the lounge content --&gt;</code></li> <li></li> </ul>"},{"location":"WebDevelopment/html_css/","title":"HTML/CSS John Smilga Udemy","text":"<p>This is simply a place to write notes and show examples of information learned from this course. The projects that are built during the course will be in separate          files / directories. </p>"},{"location":"WebDevelopment/html_css/#video-4","title":"Video 4","text":"<ul> <li>HTML - Hyper Text Markup Language</li> <li>Responsible for Webpage Structure</li> <li>example of html: <code>&lt;element&gt;content&lt;/element&gt;</code></li> <li>header example: <code>&lt;h1&gt;Header Content&lt;/h1&gt;</code>     *Header Content </li> <li>paragraph example: <code>&lt;p&gt;paragraph content&lt;/p&gt;</code></li> </ul> <p>paragraph content</p>"},{"location":"WebDevelopment/wa4e_notes/","title":"Web Applications for Everyone","text":""},{"location":"WebDevelopment/wa4e_notes/#dr-chuck","title":"Dr. Chuck","text":""},{"location":"WebDevelopment/wa4e_notes/#video-1","title":"Video 1","text":"<ul> <li> <p>Request response cycles are foundation of all web applications.</p> </li> <li> <p>This course is the most basic way to develop web applications. </p> </li> <li> <p>End User &lt;--&gt; Browser (HTML, CSS, DOM, JavaScript, Jquery)  &lt;--&gt; Web Server (Application Software e.g. php) &lt;--&gt; Database / Database Model &lt;--&gt; Database Tools (i.e. phpMyAdmin)</p> </li> <li> <p>HTTP - Hypertext Transfer Protocol - very simple, can even be done by hand. Connect to a server, navigate to a document, send the document back. Not practical to do manually HTTP 2.0 and later. Doesn't work for all webservers.</p> </li> <li> <p>URL Uniform Resource Locator 3 components </p> </li> <li>http:// is the protocol - how will the document be transferred</li> <li>www.dr-chuck.com is the name of the webhost - where is the document located</li> <li> <p>page1.htm - which document do we send back</p> </li> <li> <p>By default web servers communicate on port 80</p> </li> </ul>"},{"location":"WebDevelopment/wa4e_notes/#video-2","title":"Video 2","text":"<ul> <li>Browser Developer Mod</li> <li>Network Tab shows requests and responses</li> </ul>"},{"location":"WebDevelopment/wa4e_notes/#video-3-html-part-1","title":"Video 3 - HTML Part 1","text":"<ul> <li>Built with tags</li> <li>Browsers tolerate a lot of broken HTML</li> <li>Standards set by World Wide Web Consortium W3C</li> </ul>"},{"location":"WebDevelopment/wa4e_notes/#video-4-html-part-2","title":"Video 4 - HTML Part 2","text":"<ul> <li> <p><code>&lt;html&gt; &lt;/html&gt;</code> outer tags</p> </li> <li> <p><code>&lt;head&gt; &lt;/head&gt;</code> non printing info nested in html tags</p> </li> <li>title of page</li> <li> <p>links to css and javascript</p> </li> <li> <p><code>&lt;body&gt; &lt;/body&gt;</code> page content, nested in html tags after head tags</p> </li> <li> <p>index.html, index.htm, index.php, etc are usual starting web pages</p> </li> <li> <p>use anchor tags to point between web pages <code>&lt;a&gt; &lt;/a&gt;</code></p> </li> <li> <p>Absolute references <code>&lt;a href=\"http://www.dr-chuck.com/page2.htm\"&gt;Second Page&lt;/a&gt;</code></p> </li> <li> <p>Relative references <code>&lt;a href=\"page1.htm\"&gt;First Page&lt;/a&gt;</code></p> </li> <li> <p>white space and carriage returns usually ignored by browser (pre tag can override)</p> </li> <li> <p>most tags have both beginning and ending tags</p> </li> <li> <p>some like image are self closing</p> </li> <li> <p>opening tags can have attributes <code>&lt;img src='somepicture.png'&gt;</code></p> </li> <li> <p>special characters for show characters used by html - </p> </li> <li>&amp;lt - less than</li> <li>&amp;gt - greater than</li> <li>&amp;amp - ampersand</li> <li> <p>Those are main 3, but there are miscellaneous - card suits, money characters, etc.</p> </li> <li> <p>comments: <code>&lt;!-- comment syntax --&gt;</code></p> </li> <li> <p>lists and unordered lists:</p> </li> <li> <p><code>&lt;ul&gt;&lt;li&gt;item 1&lt;/li&gt;&lt;li&gt;item2&lt;/li&gt;&lt;/ul&gt;</code></p> </li> <li> <p><code>&lt;ol&gt;&lt;li&gt;item 1&lt;/li&gt;&lt;li&gt;item2&lt;/li&gt;&lt;/ol&gt;</code></p> </li> <li> <p>tables - Laid out logically - table, tr (table row), th(table header), td(table data), </p> </li> </ul>"},{"location":"django/dennis_ivy_todo/","title":"Dennis ivy todo","text":""},{"location":"django/dennis_ivy_todo/#dennis-ivy-django-todo-list","title":"Dennis Ivy Django ToDo List","text":""},{"location":"django/dennis_ivy_todo/#march-12-2021-youtube","title":"March 12, 2021 - YouTube","text":"<p>My intention is that this be a list of the steps and that the detail will be in the program files (hopefully well commented) in this Django project. </p>"},{"location":"django/dennis_ivy_todo/#setup-process","title":"Setup Process","text":"<ul> <li>Created dennisivy/todo directory</li> <li>Go to that directory</li> </ul> <pre><code>    cd /home/terrystudent/todo\n</code></pre> <ul> <li>Created virtual environment called .venv (so it's hidden)</li> <li>Activated virtual environment .venv</li> <li>Install django:</li> </ul> <pre><code>    python -m pip install django\n</code></pre> <ul> <li>He's on 3.0.2 and I just installed 4.0.6</li> <li>Create the project:</li> </ul> <pre><code>    django-admin startproject todo_list\n</code></pre> <ul> <li>Create the app</li> </ul> <pre><code>    python manage.py startapp base\n</code></pre>"},{"location":"django/dennis_ivy_todo/#first-steps","title":"First Steps","text":"<ul> <li>Connect the app and project together - see comment and code in dennisivy/todo/todo_list/settings.py</li> <li>Create a urls.py file in the app dennisivy/todo/base/urls.py</li> <li></li> </ul>"},{"location":"django/Caleb_Crash_Course/caleb_django_crash_course/","title":"Caleb Curry Django Crash Course","text":""},{"location":"django/Caleb_Crash_Course/cdjcc1/","title":"Setup","text":"<pre><code># Create directory for project\nmkdir movies\ncd movies\n# Create then activate virtual environment\npython -m venv .venv\n. .venv/bin/activate\n# Install django - he's on 4.0.1\npip install django\n# To see what's installed\npip freeze\n</code></pre>","tags":["django","caleb","dj_setup"]},{"location":"django/Caleb_Crash_Course/cdjcc2/","title":"New Project","text":"","tags":["django","caleb","dj_startproject"]},{"location":"django/Caleb_Crash_Course/cdjcc2/#create-django-project-and-add-to-git","title":"Create Django Project and add to Git","text":"<pre><code># We'll end up with a movies/movies folder structure\ndjango-admin startproject movies .\n# He added to git from the command line.\n# I'm perfectly happy to do it the other way from the web\n# He does a commit at this point.\n</code></pre>","tags":["django","caleb","dj_startproject"]},{"location":"django/Caleb_Crash_Course/cdjcc3/","title":"Model View Template","text":"","tags":["django","caleb","dj_mvt"]},{"location":"django/Caleb_Crash_Course/cdjcc3/#model-view-template-mvt","title":"Model, View, Template (MVT)","text":"<ul> <li>Model is representation of data</li> <li>View accepts requests from user and gets the appropriate data</li> <li>Template is structure of data being sent to the users</li> </ul>","tags":["django","caleb","dj_mvt"]},{"location":"django/Caleb_Crash_Course/cdjcc4/","title":"First View","text":"","tags":["django","caleb","dj_views"]},{"location":"django/Caleb_Crash_Course/cdjcc4/#first-view","title":"First View","text":"<ul> <li>Note that the admin site already exists.</li> <li><code>python manage.py runserver</code> runs a local django server on port 8000</li> <li>In movies/movies/urls.py add to urlpatterns list <pre><code>from django.contrib import admin\nfrom django.urls import path\nfrom movies import views # new\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('movies/', views.movies), # new\n    path('', views.home), # new \n]\n</code></pre></li> <li>Create views.py in movies <pre><code>from django.http import HttpResponse\n\ndef movies(request):\n    return HttpResponse(\"Hello There\")\ndef home(request):\n    return HttpResponse(\"Home Page\")\n</code></pre></li> <li>at localhost:8000/movies/ should see Hello There</li> </ul>","tags":["django","caleb","dj_views"]},{"location":"django/Caleb_Crash_Course/cdjcc5/","title":"Using Templates","text":"","tags":["django","caleb","dj_templates"]},{"location":"django/Caleb_Crash_Course/cdjcc5/#using-templates","title":"Using Templates","text":"<ul> <li>Modify views.py <pre><code>from django.http import HttpResponse\nfrom django.shortcuts import render\n\n# 3 parameters for render - request, template name / location, data dictionary\ndef movies(request):\n    return render(request, \"movies/movies.html\", {\"movies\": [\"movie1\", \"movie2\"]})\n\ndef home(request):\n    return HttpResponse(\"Home Page\")\n</code></pre></li> <li>create folder movies/templates/movies</li> <li>create file movies.html in movies/templates/movies <pre><code>&lt;!-- Refers to the dictionary in views.py which we called movies --&gt;\n\n{{ movies }}\n</code></pre></li> <li>in movies/settings.py add movies to installed apps so that django can find the template</li> <li>Now see <code>['movie1', 'movie2']</code> at movies/</li> <li>Easier to understand maybe with dictionary created separately <pre><code>from django.http import HttpResponse\nfrom django.shortcuts import render\n\ndata = {\"movies\": [\"movie1\", \"movie2\"]}\n\n# 3 parameters for render - request, template name / location, data dictionary\ndef movies(request):\n    #   return render(request, \"movies/movies.html\", {\"movies\": [\"movie1\", \"movie2\"]})\n    return render(request, \"movies/movies.html\", data)\n\ndef home(request):\n    return HttpResponse(\"Home Page\")\n</code></pre></li> </ul>","tags":["django","caleb","dj_templates"]},{"location":"django/Caleb_Crash_Course/cdjcc6/","title":"More Complicated Data","text":"","tags":["django","caleb","dj_templates"]},{"location":"django/Caleb_Crash_Course/cdjcc6/#more-complicated-data","title":"More complicated data","text":"<ul> <li>made movies a dictionary with a list of dictionaries inside and each </li> <li>entry having an id, title, and year</li> <li>Then a for loop using django templating language to show the movie titles. <pre><code># Views.py at this point\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\n\ndata = {\n    \"movies\": [\n        {\"id\": 5, \"title\": \"Jaws\", \"year\": 1969},\n        {\"id\": 6, \"title\": \"Sharknado\", \"year\": 2000},\n        {\"id\": 7, \"title\": \"The Meg\", \"year\": 2000},\n    ]\n}\n\n# 3 parameters for render - request, template name / location, data dictionary\ndef movies(request):\n    #   return render(request, \"movies/movies.html\", {\"movies\": [\"movie1\", \"movie2\"]})\n    return render(request, \"movies/movies.html\", data)\n\ndef home(request):\n    return HttpResponse(\"Home Page\")\n</code></pre> <pre><code>&lt;!-- movies.html at this point --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Movies Caleb Django Crash Course&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Movies&lt;/h1&gt;\n    &lt;!-- Refers to the dictionary in views.py which we called movies --&gt;\n    &lt;ul&gt;\n    {% for movie in movies %}\n        &lt;li&gt;{{ movie.title }}&lt;/li&gt;\n    {% endfor %}\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li> </ul>","tags":["django","caleb","dj_templates"]},{"location":"django/Caleb_Crash_Course/cdjcc7/","title":"Models and Databases","text":"","tags":["django","caleb","dj_models"]},{"location":"django/Caleb_Crash_Course/cdjcc7/#models-and-databases","title":"Models and Databases","text":"<ul> <li>Run this to do the built in database stuff. </li> <li>Also now the admin page will work</li> <li><code>python manage.py migrate</code> </li> <li><code>python manage.py createsuperuser</code></li> <li>just used terry/jacqui</li> <li>Django uses ORM - Object Relational Mappers</li> <li>Meaning you write Python stuff and it gets converted to SQL stuff</li> <li>Makes converting from a test db like sqlite3 to mariadb or postgres much easier</li> </ul>","tags":["django","caleb","dj_models"]},{"location":"django/Caleb_Crash_Course/cdjcc7/#create-first-model","title":"Create First Model","text":"<ul> <li>create models.py inside movies <pre><code>from django.db import models\n\n# Django automatically creates an id field unique to each row in the table\nclass Movie(models.Model):\n    title = models.CharField(max_length=200)\n    year = models.IntegerField()\n</code></pre></li> <li>Now tell django that we need to create / update our model</li> <li>movies in this case is the name of the app in settings.py/INSTALLED_APPS <code>python manage.py makemigrations movies</code></li> <li>Now migrate the changes - if you're working with multiple apps you can specify an app like in makemigrations <code>python manage.py migrate</code></li> </ul>","tags":["django","caleb","dj_models"]},{"location":"django/Caleb_Crash_Course/cdjcc7/#add-the-new-model-to-the-admin-section","title":"Add the New Model to the Admin Section","text":"<ul> <li>Create movies/admin.py <pre><code># Import our Model and the Django Admin Stuff\n\nfrom .models import Movie\nfrom django.contrib import admin\n\n# Now register the model with the admin site\nadmin.site.register(Movie)\n</code></pre></li> <li>Now you can add movies on the admin site. But right now the admin page just shows Movie object(1)</li> <li>To get the title to show we need to add a method to our class in models.py <pre><code>    def __str__(self):\n        return f\"{self.title} from {self.year}\"\n</code></pre></li> </ul>","tags":["django","caleb","dj_models"]},{"location":"django/Caleb_Crash_Course/cdjcc8/","title":"Working With Real Data","text":"<ul> <li>Change views.py to use data from database rather than mock data</li> <li>Have to import the Movie class from model.py <pre><code>from django.http import HttpResponse\nfrom django.shortcuts import render\n\n# Have to import the Movie class from model.py\nfrom .models import Movie\n\n# 3 parameters for render - request, template name / location, data dictionary\ndef movies(request):\n    # Get all the objects from the database\n    data = Movie.objects.all()\n    # Have to convert the queryset data to a dictionary which he called movies\n    return render(request, \"movies/movies.html\", {\"movies\": data})\n\ndef home(request):\n    return HttpResponse(\"Home Page\")\n</code></pre></li> </ul>","tags":["django","caleb","dj_data"]},{"location":"django/Caleb_Crash_Course/cdjcc9/","title":"Create Detailed View","text":"","tags":["django","caleb","dj_forms"]},{"location":"django/Caleb_Crash_Course/cdjcc9/#click-on-a-movie-and-go-to-a-detailed-view","title":"Click on a Movie and go to a Detailed View","text":"<ul> <li>First create a new view in views.py <pre><code>def detail(request, id):\n    # This time the data is one record. The id will come from the url when the user clicks on a movie name\n    data = Movie.objects.get(pk=id)\n    return render(request, \"movies/detail.html\", {\"movie\": data})\n</code></pre></li> <li>Now in urls.py add a new url <code>path(\"movies/&lt;int:id&gt;\", views.detail),</code></li> <li>now make the detail template <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;!-- Just show the move (remember the __str__ method gives us a formatted string --&gt;\n    {{ movie }}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li> <li>Now modify movies.html to make the title a link and pass an id</li> </ul>","tags":["django","caleb","dj_forms"]},{"location":"django/Codemy_Django_Intro/00-Home/","title":"00-Codemy Django Intro Index","text":"<ul> <li>Start a Django Project</li> <li>Add an App to the Project</li> </ul>"},{"location":"django/Codemy_Django_Intro/01-Stuff_For_Every_Django_Project/","title":"01 Stuff For Every Django Project","text":""},{"location":"django/Codemy_Django_Intro/01-Stuff_For_Every_Django_Project/#set-up-a-development-environment","title":"Set up a Development Environment","text":"<ul> <li>install Python3</li> <li>install Pip3</li> <li>install venv</li> <li>You need a text editor</li> <li>Make sure you have a terminal app / a command line.</li> </ul>"},{"location":"django/Codemy_Django_Intro/01-Stuff_For_Every_Django_Project/#create-a-virtual-environment","title":"Create a Virtual Environment","text":"<pre><code>mkdir code # Create a directory for our code\ncd code # change to the code directory\npython3 -m venv venv # Creates a venv named venv\nsource venv/bin/activate # activates the venv\npip freeze # shows a list of what's installed in the venv \n</code></pre>"},{"location":"django/Codemy_Django_Intro/01-Stuff_For_Every_Django_Project/#install-django-make-sure-venv-is-active","title":"Install Django - make sure venv is active","text":"<p><code>pip install django</code></p>"},{"location":"django/Codemy_Django_Intro/01-Stuff_For_Every_Django_Project/#create-a-new-django-project","title":"Create a new Django Project","text":"<pre><code># Make sure you're in code and the venv is active\nmkdir djangoproject\ncd djangoproject\ndjango-admin startproject mysite .\n# This creates a mysite subdirectory and a manage.py file\n</code></pre>"},{"location":"django/Codemy_Django_Intro/01-Stuff_For_Every_Django_Project/#run-the-django-devlopment-server","title":"Run the Django Devlopment Server","text":"<pre><code># Make sure you're in code/djangoproject\npython manage.py runserver\n# go to localhost:8000 in a browser to make sure you get successful install screen\n</code></pre>"},{"location":"django/Codemy_Django_Intro/01-Stuff_For_Every_Django_Project/#fix-the-migration-errors","title":"Fix the migration errors","text":"<pre><code># To fix the initial migrations errors you get\npython3 manage.py migrate\n# This also creates the admin section which can be accessed at localhost:8000/admin\n</code></pre>"},{"location":"django/Codemy_Django_Intro/01-Stuff_For_Every_Django_Project/#create-the-superuser","title":"Create the Superuser","text":"<pre><code>python manage.py createsuperuser\n# give a username, email, and password\n# Now can login at localhost:8000/admin/\n</code></pre>"},{"location":"django/Codemy_Django_Intro/01-Stuff_For_Every_Django_Project/#notes","title":"Notes","text":"<p>I think I did the last two steps on the pi 400 in the basement, but they didn't exist when I moved upstairs. So they either don't get put on gitlab or I forgot to do a git push at the end.</p>"},{"location":"django/Codemy_Django_Intro/02-Set_Up_App/","title":"02-These Are Steps to Add an App to a Django Project","text":""},{"location":"django/Codemy_Django_Intro/02-Set_Up_App/#create-the-app","title":"Create the App","text":"<p>An app is one section of a large website, but this project has only one app.</p> <pre><code>python manage.py startapp pages\n# Creates code/djangoproject/pages\n</code></pre>"},{"location":"django/Codemy_Django_Intro/02-Set_Up_App/#add-the-app-to-the-project","title":"Add the App to the Project","text":"<p>In code/djangoproject/mysite/settings.py add 'pages', to INSTALLED_APPS list.</p>"},{"location":"django/Codemy_Django_Intro/02-Set_Up_App/#add-urlspy-at-app-level","title":"Add urls.py at app level","text":"<p>It's cleaner to keep urls separated by app. So in code/djangoproject/pages create urls.py. Then set up a skeleton in the new urls.py</p> <pre><code>from django.urls import path\nurlpatterns = []\n</code></pre>"},{"location":"django/Codemy_Django_Intro/02-Set_Up_App/#create-the-views","title":"Create the Views","text":"<p>Every web page created in our app has to have a view so in pages/views.py:</p> <p><pre><code>from django.shortcuts import render\ndef home(request):\n    return render(request, \"home.html\", {})\ndef about(request):\n    return render(request, \"about.html\", {})\n</code></pre> In each function, request is required, the html files are the names of the templates we're going to use. {} is a dictionary that we can use to pass data to the template</p>"},{"location":"django/Codemy_Django_Intro/02-Set_Up_App/#add-templates","title":"Add Templates","text":"<p>Add a subdirectory in pages called templates. Create home.html and about.html and add a header in each page. HOME PAGE and ABOUT PAGE.</p>"},{"location":"django/Codemy_Django_Intro/02-Set_Up_App/#add-the-views-to-pagesurlspy","title":"Add the views to pages/urls.py","text":"<pre><code># import the views.py file so we can connect them to urls.\nfrom . import views\n# Then in usrpatterns list add a url for each view\npath ('', views.home, name='home'),\npath ('about/', views.about, name='about'),\n# First is the page name that follows localhost:8000,\n# Then the name of the function in views.py that we're attaching to that url,\n# Then a name we can use for linking to this page.\n</code></pre>"},{"location":"django/Codemy_Django_Intro/02-Set_Up_App/#link-app-urlspy-to-project-urlspy","title":"Link App urls.py to Project urls.py","text":"<p>So in project urls.py </p> <pre><code>from django.urls import path, include\n# then add to urlpatterns list\npath('', include('pages.urls)),\n</code></pre>"},{"location":"django/Codemy_Django_Intro/03-Django-Basics/","title":"03-Django Basics","text":""},{"location":"django/Codemy_Django_Intro/03-Django-Basics/#creating-links","title":"Creating Links","text":"<p>You could use regular old html links:</p> <pre><code>&lt;a href=\"/\"&gt;Home&lt;/a&gt; | &lt;a href=\"/about\"&gt;About&lt;/a&gt;\n</code></pre> <p>But it's more flexible and easier to change later if necessary if we use Django links:</p> <pre><code>&lt;a href=\"{% url 'home' %}\"&gt;Home&lt;/a&gt; | &lt;a href=\"{% url 'about' %}\"&gt;About&lt;/a&gt;\n</code></pre> <p>The 'home' and 'about' refer to the names in the urlpatterns list in urls.py.  Later if we want to change a path, we don't have to change it on every page, we just have to change the path in urls.py.</p>"},{"location":"django/Codemy_Django_Intro/03-Django-Basics/#extends-base-file","title":"Extends Base File","text":"<p>Sharing common things among web pages. </p> <ul> <li> <p>Create a template file called base.html in pages/templates and paste the bootstrap template.</p> </li> <li> <p>At beginning of body in base.html put a block where the code that's unique to the various web pages goes. </p> </li> </ul> <pre><code>{% block content %}\n{% endblock %}\n</code></pre> <ul> <li>Then in each web page put the content of that web page in:</li> </ul> <pre><code>{% extends 'base.html' %}\n\n{% block content %}\n&lt;h1&gt;\n    Home Page\n&lt;/h1&gt;\n{% endblock %}\n</code></pre>"},{"location":"django/Codemy_Django_Intro/03-Django-Basics/#block-title","title":"Block Title","text":"<p>This will allow unique titles on each page of the website (what goes on the tab in the browser)</p> <p>So in about.html he put:</p> <pre><code>{% block title %}About John Elder{% endblock %}\n</code></pre> <p>This is a separate block from block content and isn't nested.</p> <p>Then in base.html:</p> <pre><code>&lt;title&gt;{% block title %}Hello, world! {% endblock %}&lt;/title&gt;\n</code></pre> <p>What happens is if the page we're displaying has a block named title, that name will be used, so in the above example the about page will show About John Elder. However on a page that doesn't have a block named title we'll see Hello, world! (like on our home page since we haven't added a block title to it).</p>"},{"location":"django/Codemy_Django_Intro/03-Django-Basics/#add-a-navbar","title":"Add a Navbar","text":"<p>Grabs the navbar example at the top of the Bootstrap 4.1 Components navbar page and pastes it into base.html right below the opening body tag. </p> <p>At the opening nav tag, he changed navbar-light to navbar-dark and bg-light to bg-dark. </p> <p>Again in base.html, he wraps the block content and endblock statements in a div with the class of container, and adds a line break above the div that he just added.</p> <p>Then clean up the navbar. Delete the form that's a search box. Deletes the dropdown menu. Deletes the disabled link, and the home link. Change the label that says Navbar to John Elder.</p> <p>Then change the navbar links to Django style:</p> <pre><code>          &lt;li class=\"nav-item\"&gt;\n            &lt;a class=\"nav-link\" href=\"{% url 'home' %}\"&gt;Home&lt;/a&gt;\n          &lt;/li&gt;\n          &lt;li class=\"nav-item\"&gt;\n            &lt;a class=\"nav-link\" href=\"{% url 'about' %}\"&gt;About&lt;/a&gt;\n          &lt;/li&gt;\n</code></pre>"},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_01/","title":"Codemy Django Simple Blog Series 1","text":"","tags":["django","codemy","django_start"]},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_01/#youtube-37-video-course","title":"Youtube 37 Video Course","text":"","tags":["django","codemy","django_start"]},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_01/#length-1810","title":"Length 18:10","text":"","tags":["django","codemy","django_start"]},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_01/#summary","title":"Summary","text":"<ul> <li>Set up both the project and an app</li> <li>Create the post model and register it.</li> </ul>","tags":["django","codemy","django_start"]},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_01/#setup-initial-urls-views-and-templates","title":"Setup initial urls, views, and templates","text":"<ul> <li>Make directory called simpleblog</li> <li>Create a virtual environment called venv in simpleblog </li> <li>Activate virtual environment</li> <li>Install DJango using pip - he got django 3.0.5. I'm on 5.0 - this should be fun</li> <li>Create Django project called ablog  <pre><code>django-admin startproject ablog\n</code></pre></li> <li> <p>In the ablog directory to get rid of error messages and set up admin route. Then run the server to see the default site and make sure the install went OK. localhost:8000 is the default. <pre><code>python manage.py migrate\npython manage.py runserver\n</code></pre> To create the administrative user. Used admin for name, and put in an email and password. I used my hotmail email and password jacqui. <pre><code>python manage.py createsuperuser\n</code></pre></p> </li> <li> <p><code>python manage.py runserver</code> and go to localhost:8000/admin and login, then click on the admin user and put in actual first and last name.</p> </li> <li>to create the app under the project. <pre><code>python manage.py startapp theblog\n</code></pre></li> <li>open the top ablog folder in your text editor</li> <li>Then in ablog/ablog/settings.py add theblog to the INSTALLED_APPS list. <pre><code>INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'theblog',\n]\n</code></pre></li> <li>In ablog/ablog/urls.py add include to the second import statement, and import include and add theblog/urls.py to the urlpatterns list. This gives our app its own urls.py file. <pre><code>from django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('theblog.urls')),\n]\n</code></pre></li> <li>Now create ablog/theblog/urls.py and put a home page view in it. Also import the views.py file from ablog/theblog. <pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name=\"home\"),\n]\n</code></pre></li> <li>In theblog/views.py create a function to define the home page. <pre><code>from django.shortcuts import render\n\n# Create your views here.\ndef home(request):\n    return render(request, 'home.html', {})\n</code></pre></li> <li>in ablog/theblog create a templates folder and put home.html in it. <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li> <li><code>python manage.py runserver</code> to ensure that our new home page shows up at localhost:8000</li> </ul>","tags":["django","codemy","django_start"]},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_01/#now-start-working-on-database","title":"Now start working on database","text":"<ul> <li>In ablog/theblog/models.py import the User so we can use our admin user, and create our data model and its fields. This is a class based model. <pre><code>from django.db import models\nfrom django.contrib.auth.models import User \n\n# Create your models here.\nclass Post(models.Model):\n    title = models.CharField(max_length=255)\n    # the on_delete will delete all the users blog posts if the user gets deleted.\n    author = models.ForeignKey(User, on_delete=models.CASCADE)\n    body = models.TextField()\n\n    def __str__(self):\n        return self.title + ' | ' + str(self.author)\n</code></pre></li> <li>Fields are title, author (set up so if author is deleted, all the associated blog posts go away), and body.</li> <li>And create a function <code>__str__</code>  function to show the title and the author on the admin page.</li> <li>in ablog/theblog/admin.py import and register the Post class. <pre><code>from django.contrib import admin\nfrom .models import Post\n\n# Register your models here.\nadmin.site.register(Post)\n</code></pre></li> <li>makemigrations and migrate to get the new database to work. <pre><code>python manage.py makemigrations\npython manage.py migrate\npython manage.py runserver\n</code></pre></li> <li>Then added two blog posts using the admin page.</li> </ul>","tags":["django","codemy","django_start"]},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_02/","title":"Codemy Simple Blog Video 02","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_02/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_02/#length-1946","title":"Length 19:46","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_02/#summary","title":"Summary","text":"<ul> <li>Create a home page that loops through the posts in the model and shows the title as a link</li> <li>Create an article detail page that shows the post that was clicked on the home page.</li> </ul>"},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_02/#blog-post-links-on-home-page","title":"Blog post links on home page","text":"<ul> <li>In the app's views.py file (ablog/theblog/views.py) import ListView and DetailView - generic list and detail forms included with Django.</li> <li>In the app's views.py file (ablog/theblog/views.py) we have to import our  Post model.</li> <li>Change home view in ablog/theblog/views.py to a class based view.</li> <li>Pass the ListView to the HomeView class</li> <li>Then tell the class that the model we are using is Post (our only model)</li> <li>Then <code>template_name = 'home.html'</code> tells the class what template to use.</li> <li>Pretty much same process for the Article's Detail View class. <pre><code>from django.shortcuts import render\n# import some of Django's generic views. \nfrom django.views.generic import ListView, DetailView\nfrom .models import Post\n\n# Create your views here.\n# def home(request):\n#     return render(request, 'home.html', {})\n\n# Going to use class based views.\n# Inherit the built in Django form ListView to be able to create a list of posts\nclass HomeView(ListView):\n    # Tell Django what model we're using\n    model = Post\n    template_name = 'home.html'\n\n# Inherit the built in Django form DetailView to allow us to see a post's detail\nclass ArticleDetailView(DetailView):\n    model = Post\n    template_name = 'article_detail.html'\n</code></pre></li> <li>In template home.html a for loop to loop through the object_list which seems to get passed automatically.</li> <li>Show the items in an unordered list. <pre><code>{% extends 'base.html' %}\n\n{% block content %}\n\n&lt;h1&gt;Post&lt;/h1&gt;\n&lt;!-- Do a Django for loop to go through the posts --&gt;\n&lt;!-- object_list is the query set automatically created by Django --&gt;\n&lt;ul&gt;\n    {% for post in object_list %}\n        &lt;li&gt;&lt;a href=\"{% url 'article-detail' post.pk %}\"&gt;{{ post.title }}&lt;/a&gt; - {{ post.author.first_name }} {{ post.author.last_name }} &lt;br&gt;\n        {{ post.body }}&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n\n{% endblock %}\n</code></pre></li> <li>Anything in the model can be used in the template. e.g. email.</li> <li>The url patterns also changes to a class, have to import HomeView from .views <pre><code>from django.urls import path\nfrom .views import HomeView\npath('', HomeView.as_view(), name=\"home\"),\n</code></pre></li> </ul>"},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_02/#detail-views","title":"Detail Views","text":"<ul> <li>Create article_details.html in templates.</li> <li>New class in ablog/theblog/views.py ArticleDetailView - pass it DetailView - see earlier.</li> <li>In urls.py import the ArticleDetailView and locate the entry in article/primary_key, name article-detail.  <pre><code>from django.urls import path\nfrom .views import HomeView, ArticleDetailView\npath('', HomeView.as_view(), name=\"home\"),\npath('article/&lt;int:pk&gt;', ArticleDetailView.as_view(), name=\"article-detail\")\n</code></pre></li> <li>In home.html put a tags around the post title and use a django link to article-detail (name of the url ) followed by post.pk for primary key. See earlier.</li> <li>In article_details.html use post.title in h1 for page header, then name of author, then post.body and a button to go back to the home page. <pre><code>&lt;h1&gt;{{ post.title }}&lt;/h1&gt;\n&lt;small&gt;By: {{ post.author.first_name}}{{ post.author.last_name}}&lt;/small&gt;&lt;br&gt;\n&lt;hr&gt;\n&lt;br&gt;\n{{ post.body }}\n&lt;br&gt;&lt;br&gt;\n&lt;a href=\"{% url 'home' %}\"&gt;Back&lt;/a&gt;\n</code></pre></li> </ul>"},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_03/","title":"Codemy Simple Blog Video 03","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_03/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_03/#length-1950","title":"Length 19:50","text":"<p>So my plan is to watch the video and take notes - not code but flow, bash instructions, etc. Then go back through the same video and write the code.</p>"},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_03/#summary","title":"Summary","text":"<ul> <li>Work with django's version of jinja2 to create a base.html file and use that as the basis for both home.html and article_detail.html</li> <li>Redo article_detail.html and home.html so that they only contain stuff unique to their particular web pages and use base.html for the rest</li> </ul>"},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_03/#style-the-blog-using-bootstrap","title":"Style the blog using Bootstrap","text":"<ul> <li>Grabs version 4.4 starting template</li> <li>Create base.html in templates and paste the starting Bootstrap template into it</li> <li>In body of base.html before the javascript tags, add <code>{% block content %} and {% endblock %}</code>. This is where code for the individual web pages will go.</li> <li>In home.html first add <code>{% extends 'base.html' %}</code>, then add same tags as base.html - block content and endblock at top and bottom of the template.</li> <li>Check to see that bootstrap is working by making sure font, etc of home page is different.</li> <li>In base.html wrap block, endblock tags in a div with a class of container, and add a line break before the div.</li> <li>Make same changes as home.html in article_detail.html</li> <li>Uses button bootstrap classes to turn back link to a button.</li> <li>Grabs navbar from getbootstrap.com and pastes it after body tag in base.html. Changes navbar-light and bg-light to dark.</li> <li>Makes more changes to the navbar. Changes links, deletes search box, dropdown box. </li> <li>Uses block title tags to make title changeable in the template. So what's in base.html is the default title, but if we put block title tags with a different title in the webpage template, django will use that.</li> <li> <p>Then he adds a title_tag to the database so the blogger can specify the title. Gives the field a default so the blogger doesn't have to specify unless they  want to. Have to do makemigrations, migrate. Change templates to pick up title_tag.</p> </li> <li> <p>base.html at end of video <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;!-- Required meta tags --&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt;\n\n    &lt;!-- Bootstrap CSS --&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css\" integrity=\"sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N\" crossorigin=\"anonymous\"&gt;\n\n    &lt;title&gt;{% block title %}My Freakin' Awesome Blog{% endblock %}&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"&gt;\n        &lt;a class=\"navbar-brand\" href=\"{% url 'home' %}\" &gt;My Freakin' Awesome Blog&lt;/a&gt;\n        &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt;\n          &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt;\n        &lt;/button&gt;\n    &lt;/nav&gt;\n    &lt;br&gt;\n    &lt;div class=\"container\"&gt;\n        {% block content %}\n\n        {% endblock %}\n    &lt;/div&gt;\n    &lt;!-- Optional JavaScript; choose one of the two! --&gt;\n\n    &lt;!-- Option 1: jQuery and Bootstrap Bundle (includes Popper) --&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-Fy6S3B9q64WdZWQUiU+q4/2Lc9npb8tCaSX9FK7E8HnRr0Jz8D6OP9dO5Vg3Q9ct\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n\n    &lt;!-- Option 2: Separate Popper and Bootstrap JS --&gt;\n    &lt;!--\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\" integrity=\"sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.min.js\" integrity=\"sha384-+sLIOodYLS7CIrQpBjl+C7nPvqq+FbNUBDunl/OZv93DB7Ln/533i8e/mZXLi/P+\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n    --&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> </li> <li>home.html at the end of the video <pre><code>{% extends 'base.html' %}\n\n{% block content %}\n\n&lt;h1&gt;Post&lt;/h1&gt;\n&lt;!-- Do a Django for loop to go through the posts --&gt;\n&lt;!-- object_list is the query set automatically created by Django --&gt;\n&lt;ul&gt;\n    {% for post in object_list %}\n        &lt;li&gt;&lt;a href=\"{% url 'article-detail' post.pk %}\"&gt;{{ post.title }}&lt;/a&gt; - {{ post.author.first_name }} {{ post.author.last_name }} &lt;br&gt;\n        {{ post.body }}&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n\n{% endblock %}\n</code></pre></li> <li>article_detail.html at the end of the video <pre><code>{% extends 'base.html' %}\n{% block title %} {{post.title_tag}} {% endblock %}\n\n{% block content %}\n\n&lt;h1&gt;{{ post.title }}&lt;/h1&gt;\n&lt;small&gt;By: {{ post.author.first_name }} {{ post.author.last_name }}&lt;/small&gt;\n&lt;hr&gt;\n&lt;br&gt;\n{{ post.body }}\n\n&lt;br&gt;&lt;br&gt;\n&lt;a href=\"{% url 'home' %}\" class=\"btn btn-secondary\"&gt;Back&lt;/a&gt;\n\n{% endblock %}\n</code></pre></li> </ul>"},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_04/","title":"Codemy Simple Blog Video 04","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_04/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_04/#add-a-post-page","title":"Add a Post Page","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_04/#length-1913","title":"Length 19:13","text":"<p>So my plan is to watch the video and take notes - not code but flow, bash instructions, etc. Then go back through the same video and write the code.</p>"},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_04/#summary","title":"Summary","text":"<ul> <li> <p>Create a page to add a post without using the Admin page. 3 step process     1 Create a view - AddPostView     2 Create a URL - AddPostView at end of from .views import and a path     3 Create a template - add_post.html</p> </li> <li> <p>Add Add Post link to the navbar in base.html</p> </li> <li> <p>Have to add to models.py so that Django knows what to do with the post button on the new form. <pre><code>    def get_absolute_url(self):\n    return reverse('home')\n</code></pre></p> </li> <li> <p>Whenever create a webpage in Django it's a three step process</p> <ul> <li>Create a template</li> <li>Create a view</li> <li>Create a URL</li> </ul> </li> <li>Create add_post.html in templates and use same format as article_details.html</li> <li>In ablog/theblog/views.py import CreateView  <pre><code>class AddPostView(CreateView):\n    model = Post\n    template_name = 'add_post.html'\n    # This will put all the fields from the model on the page.\n    fields = '__all__'\n    # Or to just include certain fields:\n    fields = ('title', 'body')\n</code></pre></li> <li>In ablog/theblog/urls.py:<ul> <li><code>from .views import ....., AddPostView</code></li> <li>in urlpatterns - <code>path('add_post/', AddPostView.as_view(), name='add_post'),</code></li> </ul> </li> <li>In base.html set the second link (called Link which I think I deleted) to <code>href=\"{% url 'add_post'%}\"&gt;Add Post&lt;/a&gt;</code></li> <li>Then in add_post.html: <pre><code>&lt;form method=\"POST\"&gt;\n    # csrf_token is a security thing that all frameworks use.\n    {% csrf_token %}\n    {{ form.as_p }}\n    &lt;button class=\"btn btn-secondary\"&gt;Post&lt;/button&gt;\n</code></pre></li> <li>In ablog/theblog/models.py create another method under class Post that tells django what to do when you click the post button from above: <pre><code>from django.urls import reverse\n...\ndef get_absolute_url(self):\n    return reverse('article-detail', args=(str(self.id)))\n    # Or if you want to return to the home page:\n    return reverse('home')\n</code></pre></li> <li>Change the title_tag on the add_post.html template to Create a New Blog Post</li> <li>He deleted the default from the title_tag field in models.py because it's not needed anymore.</li> </ul>"},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_05/","title":"Codemy Simple Blog Video 05","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_05/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_05/#style-django-forms-with-bootstrap","title":"Style Django Forms With Bootstrap","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_05/#length-1545","title":"Length 15:45","text":"<p>So my plan is to watch the video and take notes - not code but flow, bash instructions, etc. Then go back through the same video and write the code.</p> <ul> <li>In add_post.html we've got {{ form.as_p }}. That means that every field in our form is surrounded by p tags.</li> <li>You can also do {{ form.as_ul }} which puts in an unordered list and every field has a dot in front of it</li> <li>And {{ form.as_table }}</li> </ul> <p>So we have to create a Django form to do this.  - Create new file ablog/theblog/forms.py</p> <pre><code>from django import forms\n# Need to import our model.\nfrom .models import Post\n# ModelForm lets us use fields from our model.\nclass PostForm(forms.ModelForm):\n    class Meta:\n        model = Post\n        fields = ('title', 'title_tag', 'author', 'body')\n        # Create widgets dictionary\n        widgets = {\n            # Change the attributes of the TextInput fields. form-control is a bootstrap class\n            'title': forms.TextInput(attrs={'class': 'form-control'}),\n            'title_tag': forms.TextInput(attrs={'class': 'form-control'}),\n            'author': forms.Select(attrs={'class': 'form-control'}),\n            'body': forms.Textarea(attrs={'class': 'form-control'}),\n        }\n</code></pre> <ul> <li>Have to surround the django form in add_post.html in a div with the class='form-group' </li> <li>In views.py we now have to import the form we just created. <code>from .forms import PostForm</code></li> <li>In views.py in class AddPostView, after model=Post, add <code>form_class = PostForm</code> and comment out or delete <code>fields = __all__</code> because we designated which fields we wanted in PostForm</li> <li>Could add other stuff in our PostForm - e.g. to add a placeholder to the title field just add more stuff to the appropriate dictionary: <pre><code>            'title': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Blog Post Title Goes Here'}), \n</code></pre></li> </ul>"},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_06/","title":"Codemy Simple Blog Video 06","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_06/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_06/#update-and-edit-blog-posts","title":"Update and Edit Blog Posts","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_06/#length-1452","title":"Length 14:52","text":"<p>So my plan is to watch the video and take notes - not code but flow, bash instructions, etc. Then go back through the same video and write the code.</p> <ul> <li>Create update_post.html in templates</li> <li>Paste in add_post.html, change title to Edit Blog Post and h1 Update Post, change button to say update</li> <li>Import UpdateView in views.py</li> <li>Add new class to views.py <pre><code>class UpdatePostView(UpdateView):\n    model = Post\n    template_name = 'update_post.html'\n    fields = ['title', 'title_tag', 'body']\n</code></pre></li> <li>import UpdatePostView in urls.py</li> <li>add to urlpatterns in urls.py: <pre><code>path('article/edit/&lt;int:pk&gt;', UpdatePostView.as_view(), name='update_post'),\n</code></pre></li> <li>In home.html add a link to edit each entry <pre><code>post.author.last_name }} - &lt;small&gt;&lt;a href=\"{% url 'update_post' post.pk %}\"&gt;(Edit)&lt;/a&gt;&lt;/small&gt;&lt;br&gt;\n</code></pre></li> <li>In article_detail add the same edit link inside the small tags where the authors name is: <pre><code>post.authorl.last_name }} - &lt;a href=\"{% url 'update_post' post.pk %}\"&gt;(Edit)&lt;/a&gt;\n</code></pre></li> <li>In forms.py copy PostForm class and rename it to EditForm, remove field author from fields and comment out author in widgets. </li> <li>In views.py import EditForm after PostForm, then in class UpdatePostView add <code>form_class = EditForm</code>, and comment out the fields line. </li> </ul>"},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_07/","title":"Codemy Simple Blog Video 07","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_07/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_07/#delete-blog-posts","title":"Delete Blog Posts","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_07/#length-1156","title":"Length 11:56","text":"<p>So my plan is to watch the video and take notes - not code but flow, bash instructions, etc. Then go back through the same video and write the code.</p> <ul> <li>In views.py add DeleteView to the built in views we're importing</li> <li>We also need to: <code>from django.urls import reverse_lazy</code></li> <li>Then another class in views.py <pre><code>class DeletePostView(DeleteView):\n    model = Post\n    template_name = 'delete_post.html'\n    success_url = reverse_lazy('home')\n</code></pre></li> <li>Create delete_post.html in templates</li> <li>Copy update_post.html into delete_post.html</li> <li>Change title to Delete Blog Post and h1 to Delete Post</li> <li>Change the rest of the body: <pre><code>&lt;h3&gt;Delete: {{ post.title }}&lt;/h3&gt;\n\n&lt;br&gt;\n&lt;div class=\"form-group\"&gt;\n    &lt;form method=\"POST\"&gt;\n        {% csrf token %}\n        &lt;strong&gt;Are you sure?!&lt;/strong&gt;&lt;br&gt;&lt;br&gt;\n        &lt;button class=\"bth btn-secondary\"&gt;Delete Post!&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt; \n</code></pre></li> <li>In urls.py<ul> <li>add to import DeletePostView</li> <li><code>path('article/&lt;int:pk&gt;/remove', DeletePostview.as_view(), name='delete_post'),</code></li> </ul> </li> <li>In home.html after the edit link add a delete link: <code>&lt;a href=\"{% url 'delete_post' post.pk %}\"&gt;(Delete)&lt;/a&gt;</code></li> <li>Copy that same link tag to article_detail.html again right after the edit tag.</li> <li>To change the order of the home page list of blog entries so that the most recent one appears first, in views.py add to the HomeView class <code>ordering = ['-id']</code></li> <li>At this point we've got all the main features of the blog. </li> </ul>"},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_08/","title":"Codemy Simple Blog Video 08","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_08/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_08/#order-blog-posts-by-date","title":"Order Blog Posts by Date","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_08/#length-1334","title":"Length 13:34","text":"<p>So my plan is to watch the video and take notes - not code but flow, bash instructions, etc. Then go back through the same video and write the code.</p> <ul> <li>Primary key is automatically created by django when you create a database</li> <li>Add a date field to our model after body in the Post class. </li> <li>Import standard python date classes.</li> <li>auto_now_add=True adds the current date when we create a post <pre><code>from datetime import datetime, date\npost_date = models.DateField(auto_now_add=True)\n</code></pre></li> <li>Now <code>python manage.py makemigrations</code> but you'll get an error that something is needed for existing items that don't have a date. He picked the one-off default option and the default date of timezone.now.</li> <li>Then <code>python manage.py migrate</code></li> <li>In article_details.html after post.author.last_name <code>- {{ post.post_date }} -</code></li> <li>He did the same on the home.html template to show the date after the first name.</li> <li>In views.py class HomeView(Listview) add <code>ordering = ['-post_date']</code> which sorts by post_date in reverse date - latest first.</li> <li></li> </ul>"},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_09_%26_10/","title":"Codemy Simple Blog Video 09 & 10","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_09_%26_10/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_09_%26_10/#user-authentication","title":"User Authentication","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_09_%26_10/#length-1913","title":"Length 19:13","text":"<p>So my plan is to watch the video and take notes - not code but flow, bash instructions, etc. Then go back through the same video and write the code.</p> <ul> <li>Using the Django Authentication System</li> <li>Create a separate app for this. Make sure virt is active and you're in the directory that contains manage.py<ul> <li><code>python manage.py startapp members</code></li> </ul> </li> <li>Add the new app to ablog/settings.py after theblog. <code>'members',</code></li> <li>create ablog/members/urls.py  <pre><code>from django.urls import path\n\nurlpatterns = [\n\n]\n</code></pre></li> <li>Add it to ablog/urls.py after theblog. Point it to the django auth urls as well as to members.url. <pre><code>path('members/', include('django.contrib.auth.urls')),\npath('members/', include('members.urls')),\n</code></pre></li> <li>Add a templates directory to the members app - <code>ablog/members/templates</code></li> <li>Then add a subfolder to templates called registration <code>ablog/members/templates/registration</code></li> <li>inside registration create login.html and register.html</li> <li>He copied theblog/addpost.html contents to login.html</li> <li>Change title to Login, header 1 to Login..., and button text to Login</li> <li>He copied members/login.html contents to register.html</li> <li>Change title to Register, h1 to Register... and button text to Register.</li> <li>Now add to members/views.py: <pre><code>from django.views import generic\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.urls import reverse_lazy\n\nclass UserRegisterView(generic.CreateView):\n    form_class = UserCreationForm\n    template_name = 'registration/register.html'\n    success_url = reverse_lazy('login')\n</code></pre></li> <li>Back to members/urls.py <pre><code>from .views import UserRegisterView\n\n# In UrlPatterns:\npath('register/', UserRegisterView.as_view(), name='register'),\n</code></pre></li> <li>In theblog/templates/base.html copy the list item for Add Post and  change the text to Register and the url to  'register'. Do the same for login and change text to Login and the url to 'login'. Note login is a built in django form so we don't need to create a template. </li> <li>Then at the bottom of ablog/settings.py  <pre><code>LOGIN_REDIRECT_URL = 'home'\nLOGOUT_REDIRECT_URL = 'home'\n</code></pre></li> <li>You can see new users that get added in the Admin area.</li> </ul>"},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_09_%26_10/#video-10-user-authentication-part-2-1340","title":"Video 10 User Authentication Part 2  13:40","text":"<ul> <li>In base.html copy login li block and change url to 'logout' and text to Logout</li> <li>Logout is another built in function. So we don't have to do anything else. (We did set up  redirect for logout in settings.py in the previous video)</li> <li>There's a built in function called is_authenticated to check if a user is logged in or not. So make a block where the navbar Add Post, etc is in base.html <pre><code>{% if user.is_authenticated %}\n    # Add Post li block\n    # Logout li block\n{% else %}\n    # Register li block\n    # Login li block\n{% endif %}\n</code></pre></li> <li>in home.html same kind of thing: <pre><code>{% if user.is_authenticated %}\n    # move the dash after the date inside this if block\n    # update / edit post link\n    # delete post link\n{% endif %}\n</code></pre></li> <li>And have to do something similar in update_post.html <pre><code>{% if user.is_authenticated %}\n# Stuff from the h1 to the closing div tag\n{% else %}\nYou are not allowed here! Please login to edit posts\n{% endif %}\n</code></pre></li> <li>Need to do also for add_post.html <pre><code>{% if user.is_authenticated %}\n# Stuff from the h1 to the closing div tag\n{% else %}\nYou are not allowed here! Please login to add posts\n{% endif %}\n</code></pre></li> <li>And for delete_post.html <pre><code>{% if user.is_authenticated %}\n# Stuff from the h1 to the closing div tag\n{% else %}\nYou are not allowed here! Please login to delete posts\n{% endif %}\n</code></pre></li> <li>Same thing in article_detail page <pre><code>{% if user.is_authenticated %}\n# Move the dash after the date here\n# Link for update_post\n# Link for delete_post\n{% endif %}\n</code></pre></li> <li>Separate issue - just show a snippet of a long blog post on the home page.</li> <li>Add a slice at 200 characters to the body django variable line: <pre><code>{{ post.body|slice:\":200\" }}\n</code></pre></li> </ul>"},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_11/","title":"Codemy Simple Blog Video 11","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_11/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_11/#escape-html-for-blog-posts","title":"Escape HTML for Blog Posts","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_11/#length-0739","title":"Length 07:39","text":"<p>So my plan is to watch the video and take notes - not code but flow, bash instructions, etc. Then go back through the same video and write the code. I'm capturing more code in these notes and I think it's working well.</p> <ul> <li>By default Django gets rid of html formatting, so no matter how you format your input, it just all gets smushed together.</li> <li>So at the bottom of article_detail.html in the body variable <code>{{ post.body|safe }}</code></li> <li>Then you can include html in your blog post bodies. Like Headers, paragraphs, lists, etc. </li> <li>Add <code>|safe</code> after the slice on the snippet we're showing on the home page. Not a great way to do snippets, so he said we'll probably add a separate snippet field at some point. </li> </ul>"},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_12/","title":"Codemy Simple Blog Video 12","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_12/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_12/#add-blog-categories","title":"Add Blog Categories","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_12/#length-2010","title":"Length 20:10","text":"<p>So my plan is to watch the video and take notes - not code but flow, bash instructions, etc. Then go back through the same video and write the code. I'm capturing more code in these notes and I think it's working well.</p> <ul> <li>Put a new class in models.py - he placed it before class Post <pre><code>class Category(models.Model):\n    name = models.CharField(max_length=255)\n    def __str__(self):\n        return self.name\n    def get_absolute_url(self):\n        return reverse('home')\n</code></pre></li> <li>Add to end of class Post in models.py: <pre><code>category = models.CharField(max_length=255, default='coding')\n</code></pre></li> <li>Do makemigrations and migrate</li> <li>In theblog/admin.py import Category after Post, and register Category just like Post is registered.</li> <li>Using admin page he added coding, sports and entertainment to categorys</li> <li>In theblog/forms.py, put 'category' between author and body on fields line</li> <li>Then in widgets after author, copy author line and change author to category</li> <li>Could hard code your categories in forms.py by creating a list <code>choices = [('coding', 'coding'), ('sports', 'sports'), ('entertainment', entertainment')</code></li> <li>Then in widgets first thing in 'category': forms.Select(choices = choices)</li> <li>Not doing that in this case - so still in forms.py add Category to the from .models import</li> <li>Then after the import statements do a query of the Category class <pre><code>choices = Category.objects.all().values_list('name','name')\nchoice_list = []\nfor item in choices:\n    choice_list.append(item)\n\n# then in widgets:\n'category': forms.Select(choices=choice_list, attrs......)\n</code></pre></li> <li>Now create a page to manage categories rather than having to use the admin page.</li> <li>In views.py <code>from .models import Post, Category</code> and add a class: <pre><code>class AddCategoryView(CreateView):\n    model = Category\n    template_name = 'add_category.html'\n    fields = '__all__'\n</code></pre></li> <li>Create new template add_category.html</li> <li>Copy contents of add_post.html and change title to Create a New Category, h1 to Add Category and button text to Add Category.</li> <li>In urls.py import AddCategoryView and new path after add_category <code>path('add_category/', AddCategoryView.as_view(), name='add_category'</code></li> <li>In base.html copy add_post li block, changing url to 'add_category' and text to Add Category</li> <li>In home.html in the for loop after post.title add a line <code>- {{ post.category }}</code> </li> <li>Need to add an edit category page and a way to just list posts with a certain category.</li> </ul>"},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_13/","title":"Codemy Simple Blog Video 13","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_13/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_13/#blog-category-pages","title":"Blog Category Pages","text":""},{"location":"django/Codemy_Simple_Blog/Codemy_Simple_Blog_Video_13/#length-1612","title":"Length 16:12","text":"<ul> <li>Wants to be able to click on a category next to the post title on the home page and go to a page that shows all the posts that share that category.</li> <li>Going to use function based views for this instead of class based views. Points out that you can have both kinds of views in views.py</li> <li>In theblog/urls.py add to pattens: <code>path('category/&lt;str:cats&gt;/', CategoryView, name='category'</code></li> <li>Also in theblog/urls.py add CategoryView to the from .views import statement</li> <li>Add a function to views.py - he put it after HomeView <pre><code>def CategoryView(request, cats):\n    # Create a query\n    category_posts = Post.objects.filter(category=cats)\n    return render(request, 'categories.html', {'cats':cats.title(), 'category_posts':category_posts})\n</code></pre></li> <li>Create categories.html in theblog/templates</li> <li>Paste contents of home.html into categories.html </li> <li>Change the h1 to {{ cats }}</li> <li>Change to for loop to <code>{% for post in category_posts %}</code></li> <li>Remove post.category line because it's redundant</li> <li>Ahead of the h1 <code>{% if category_posts %}</code>, then after closing ul <code>{% else %} &lt;h2&gt;Sorry This Page Does Not Exist&lt;/h2&gt; {% endif %}</code> (all on separate lines.)</li> <li>In home.html change the post.category line to <code>- &lt;a href=\"{% url 'category' post.category %}\"&gt;{{ post.category }}&lt;/a&gt;</code></li> </ul>"},{"location":"django/Corey_Schaefer/Video%201%20Getting%20Started/","title":"Corey Schaefer Django Video Series 1","text":"","tags":["django","coreyschaefer","django_start"]},{"location":"django/Corey_Schaefer/Video%201%20Getting%20Started/#length-1532","title":"Length 15:32","text":"","tags":["django","coreyschaefer","django_start"]},{"location":"django/Corey_Schaefer/Video%201%20Getting%20Started/#summary","title":"Summary","text":"<ul> <li>Overview of the application that's being built</li> <li>Installation of Django</li> <li>Creation of new project, and overview of the folders and files created by Django</li> <li>Running the default server</li> </ul>","tags":["django","coreyschaefer","django_start"]},{"location":"django/Corey_Schaefer/Video%201%20Getting%20Started/#notes","title":"Notes","text":"<ul> <li>Building a blog style application<ul> <li>Authentication System</li> <li>Multiple Users</li> <li>Profile including a profile picture</li> <li>Can update and delete owned posts</li> <li>Can view posts by others</li> <li>Source code available</li> </ul> </li> <li>Install Packages Needed<ul> <li>Use a virtual environment</li> <li>Install django  - Installed version 2.1 <pre><code>pip install django\n</code></pre></li> <li>Use at least python 3.7</li> </ul> </li> <li>Create a new project <pre><code>django-admin startproject django_project\n</code></pre>         - django_project folder now contains folder django_project (yup - 2 folders with the same name), and program manage.py         - in sub folder django_project:              - <code>__init__.py</code> empty file that tells python this is a python package             - settings.py -                  - SECRET_KEY - Adds security to Django                 - DEBUG = True                 - INSTALLED_APPS             - urls.py -                 - path admin already setup              - wsgi.py - used to communicate with web server</li> <li>See the default site  <pre><code>python manage.py runserver\n# To run on a different port\npython manage.py runserver 7000\n</code></pre><ul> <li>Warnings about migrations</li> <li>Site at localhost:8000 or 127.0.0.1:8000</li> <li>Can got to localhost:8000/admin for admin screen. No way to login yet.</li> </ul> </li> </ul>","tags":["django","coreyschaefer","django_start"]},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/","title":"Chapter 1 Initial Setup","text":""},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#build-websites-with-python-django","title":"Build websites with Python &amp; Django","text":""},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#william-s-vincent","title":"William S. Vincent","text":""},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#create-a-folder-where-were-going-to-build-our-first-project","title":"Create a folder where we're going to build our first project.","text":"<pre><code>mkdir code          # Create a directory for our projects\ncd code             # Change to that directory\nmkdir ch1-setup     # Make a subdirectory for Chapter 1\ncd ch1-setup        # Change to that subdirectory\n</code></pre>"},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#to-create-a-virtual-environment-within-this-new-directory-use-the-format","title":"To create a virtual environment within this new directory use the format:","text":"<pre><code>python3 -m venv &lt;name_of_env&gt; # This creates a venv\n</code></pre> <p>It is up to the developer to choose a proper environment name but a common choice is to call it .venv. That hides the venv and is therefore one less piece of clutter on screens.</p>"},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#activate-the-virtual-environment","title":"Activate the virtual environment","text":"<pre><code> source .venv/bin/activate\n</code></pre> <p>The shell prompt now has the environment name (.venv) prefixed which indicates that the virtual environment is active. Any Python packages installed or updated within this location will be confined to the active virtual environment. To deactivate and leave a virtual environment type <code>deactivate</code>.</p>"},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#install-django","title":"Install Django","text":"<p><pre><code>python -m pip install django~=4.0.0\n</code></pre> The comparison operator \u223c= ensures that subsequent security updates for Django, such as 4.0.1, 4.0.2, and so on are automatically installed. Note that while it is possible to use the shorter version of pip install , it is a best practice to use the longer but more explicit form of python -m pip install  to ensure that the correct version of Python is used. This can be an issue if you have multiple versions of Python installed on your computer."},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#first-django-project","title":"First Django Project","text":"<p>A Django project can have almost any name but we will use django_project in this book.  <pre><code>(.venv) &gt; django-admin startproject django_project .\n</code></pre></p> <p>It\u2019s worth pausing here to explain why you should add a period (.) to the end of the previous command. If you don't include the period, Django creates another django_project directory. This feels redundant to me which is why I prefer adding a period to the end which installs Django in the current directory.</p>"},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#runserver-to-test-installation","title":"Runserver to test installation","text":"<p>Now let\u2019s confirm everything is working by running Django\u2019s internal web server via the runserver command. This is suitable for local development purposes, but when it comes time to deploy our project\u2019s online we will switch to a more robust WSGI server like Gunicorn.</p> <pre><code>python manage.py runserver\n</code></pre>"},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#code-editor-and-git","title":"Code Editor and Git","text":"<p>Make sure you have a code editor and git installed. He recommends both the microsoft python extension for vscode and an extension called black which formats python code. </p>"},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/","title":"Django for Beginners","text":""},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/#build-websites-with-python-django","title":"Build websites with Python &amp; Django","text":""},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/#william-s-vincent","title":"William S. Vincent","text":""},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/#chapter-2-hello-world-app","title":"Chapter 2: Hello World App","text":"<p>In this chapter we will build a Django project that simply says \u201cHello, World\u201d on the homepage. This is the traditional way to start a new programming language or framework. We\u2019ll also work with Git for the first time and deploy our code to GitHub.</p>"},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/#initial-setup","title":"Initial Setup","text":"<pre><code>% cd ~/code\n% mkdir helloworld\n% cd helloworld\n</code></pre> <p>Create a new virtual environment called .venv, activate it, and install Django with Pip as we did in the previous chapter.</p> <p>Now we\u2019ll use the Django startproject command to make a new project called django_project. Don\u2019t forget to include the period (.) at the end of the command so that it is installed in our current directory.</p> <pre><code>(.venv) &gt; django-admin startproject django_project .\n</code></pre> <p>Django has added a django_project directory and a manage.py file. Within directory django_project are five new files: * <code>__init__.py</code> indicates that the files in the folder are part of a Python package. Without this file, we cannot import files from another directory which we will be doing a lot of in Django! * asgi.py allows for an optional Asynchronous Server Gateway Interface to be run * settings.py controls our Django project\u2019s overall settings * urls.py tells Django which pages to build in response to a browser or URL request * wsgi.py stands for Web Server Gateway Interface which helps Django serve our eventual web pages.</p> <p>The manage.py file is not part of django_project but is used to execute various Django commands such as running the local web server or creating a new app.</p> <p>Let\u2019s try out our new project by using Django\u2019s lightweight built-in web server for local development purposes. The command we\u2019ll use is runserver which is located in manage.py.</p> <p>Note that the full command line output will contain additional information including a warning about 18 unapplied migrations. Technically, this warning doesn\u2019t matter at this point. Django is complaining that we have not yet \u201cmigrated\u201d our initial database. Since we won\u2019t actually use a database in this chapter the warning won\u2019t affect the end result. However, since warnings are still annoying to see, we can remove it by first stopping the local server with the command Control+c and then running <code>python manage.py migrate</code>.</p> <p>What Django has done here is create a SQLite database and migrated its built-in apps provided for us. This is represented by the new file db.sqlite3 in our directory.</p> <p>The Django MVT pattern is as follows: * Model: Manages data and core business logic * View: Describes which data is sent to the user but not its presentation * Template: Presents the data as HTML with optional CSS, JavaScript, and Static Assets * URL Configuration: Regular-expression components configured to a View</p> <p>When you type in a URL, such as https://djangoproject.com, the first thing that happens within our Django project is a URL pattern (contained in urls.py) is found that matches it. The URL pattern is linked to a single view (contained in views.py) which combines the data from the model (stored in models.py) and the styling from a template (any file ending in .html). The view then returns a HTTP response to the user.</p>"},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/#create-an-app","title":"Create an App","text":"<p>Django uses the concept of projects and apps to keep code clean and readable. A single top-level Django project can contain multiple apps. Each app controls an isolated piece of functionality. For example, an e-commerce site might have one app for user authentication, another app for payments, and a third app to power item listing details. That\u2019s three distinct apps that all live within one top-level project. How and when you split functionality into apps is somewhat subjective, but in general, each app should have a clear function.</p> <pre><code>(.venv) % python3 manage.py startapp pages\n</code></pre> <p>If you look visually at the helloworld directory Django has created within it a new pages directory.</p> <p>Let\u2019s review what each new pages app file does:</p> <ul> <li>admin.py is a configuration file for the built-in Django Admin app</li> <li>apps.py is a configuration file for the app itself</li> <li>migrations/ keeps track of any changes to our models.py file so it stays in sync with our database</li> <li>models.py is where we define our database models which Django automatically translates into database tables</li> <li>tests.py is for app-specific tests</li> <li>views.py is where we handle the request/response logic for our web app</li> </ul> <p>Notice that the model, view, and url from the MVT pattern are present from the beginning. The only thing missing is a template which we\u2019ll add shortly. Even though our new app exists within the Django project, Django doesn\u2019t \u201cknow\u201d about it until we explicitly add it to the django_project/settings.py file. Add pages.apps.PagesConfig at the bottom.</p> <pre><code># django_project/settings.py\nINSTALLED_APPS = [\n\"django.contrib.admin\",\n\"django.contrib.auth\",\n\"django.contrib.contenttypes\",\n\"django.contrib.sessions\",\n\"django.contrib.messages\",\n\"django.contrib.staticfiles\",\n\"pages.apps.PagesConfig\", # new\n]\n</code></pre> <p>What is PagesConfig you might ask? Well, it is the name of the solitary function within the pages/apps.py file at this point.</p>"},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/#create-first-view","title":"Create First View","text":"<p>The next step is therefore to create our first view. Start by updating the views.py file in our pages app to look as follows:</p> <pre><code># pages/views.py\nfrom django.http import HttpResponse\n\ndef homePageView(request):\n    return HttpResponse(\"Hello, World!\")\n</code></pre> <p>There are two types of views in Django: function-based views (FBVs) and class-based views (CBVs). Our code in this example is a function-based view: it is relatively simple to implement and explicit. Django originally started with only FBVs but over time added CBVs which allow for much greater code reusability, keeps things DRY (Don\u2019t-Repeat-Yourself), and can be extended via mixins. The additional abstraction of CBVs makes them quite powerful and concise, however it also makes them harder to read for Django newcomers.</p> <p>Because web development quickly becomes repetitive Django also comes with a number of built- in generic class-based views (GCBVs) to handle common use cases such as creating a new object, forms, list views, pagination, and so on. We will be using GCBVs heavily in this book in later chapters.</p> <p>There are therefore technically three ways to write a view in Django: function-based views (FBVs), class-based views (CBVs), and generic class-based views (GCBVs). This customization is helpful for advanced developers but confusing for newcomers. Many Django developers\u2013including your author\u2013prefer to use GCBVs when possible and revert to CBVs or FBVs when required. </p> <p>We need to configure our URLs. In your text editor, create a new file called urls.py within the pages app. Then update it with the following code:</p> <pre><code># pages/urls.py\nfrom django.urls import path\nfrom .views import homePageView\n\nurlpatterns = [\n    path(\"\", homePageView, name=\"home\"),\n]\n</code></pre> <p>On the top line we import path from Django to power our URL pattern and on the next line we import our views. By referring to the views.py file as .views we are telling Django to look within the current directory for a views.py file and import the view homePageView from there. Our URL pattern has three parts: * a Python regular expression for the empty string \"\" * a reference to the view called homePageView * an optional named URL pattern22 called \"home\"</p> <p>In other words, if the user requests the homepage represented by the empty string \"\", Django should use the view called homePageView.</p> <p>The last step is to update our django_project/urls.py file. It\u2019s common to have multiple apps within a single Django project, like pages here, and they each need their own dedicated URL path.</p> <pre><code># django_project/urls.py\nfrom django.contrib import admin\nfrom django.urls import path, include\n # new\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"\", include(\"pages.urls\")), # new\n]\n</code></pre> <p>This need for two separate urls.py files is often confusing to beginners. Think of the top-level django_project/urls.py as the gateway to various url patterns distinct to each app.</p>"},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/#git","title":"Git","text":"<p>initialize (or add) Git to our repository. Make sure you\u2019ve stopped the local server with Control+c, then run the command git init.</p> <p>If you then type git status you\u2019ll see a list of changes since the last Git commit. Since this is our first commit, this list is all of our changes so far.</p> <p>Note that our virtual environment .venv is included which is not a best practice. It should be kept out of Git source control since secret information such as API keys and the like are often included in it. The solution is to create a new file called .gitignore which tells Git what to ignore. In this new file, add a single line for .venv.</p> <p>We do want a record of packages installed in our virtual environment. The current best practice is to create a requirements.txt file with this information. The command <code>pip freeze</code> will output the contents of your current virtual environment and by using the &gt; operator we can do all this in one step: output the contents into a new file called requirements.txt.</p> <pre><code>(.venv) &gt; pip freeze &gt; requirements.txt\n</code></pre> <p>We next want to add all recent changes by using the command add -A and then commit the changes along with a message (-m) describing what has changed.</p> <pre><code>(.venv) &gt; git add -A\n(.venv) &gt; git commit -m \"initial commit\"\n</code></pre> <pre><code>cd existing_repo\ngit remote add origin https://gitlab.com/terryinfcco/hello-world.git\ngit branch -M main\ngit push -uf origin main\n</code></pre> <p>Note I added an ssh key to gitlab from the beelink i5 kubuntu 21.10 upgraded to 22.04 build. I couldn't make the ssh work, so I finally did the git push with username and password, deleted all the local stuff and then cloned the hello-world repo using ssh. Now it works.</p>"},{"location":"django/Udemy_Django_Academind/section1/","title":"Django Practical Guide Section 1","text":""},{"location":"django/Udemy_Django_Academind/section1/#getting-started","title":"Getting Started","text":""},{"location":"django/Udemy_Django_Academind/section1/#notes","title":"Notes","text":""},{"location":"django/Udemy_Django_Academind/section1/#what-is-django","title":"What is Django","text":"<p>HTML, CSS and Javascript still used for the front end. Django is just a python back end / web development framework. Tools for sessions, databases, request / response. And a clear set of rules for projects. Django is \"opinionated\". Still customizable and flexible. </p>"},{"location":"django/Udemy_Django_Academind/section1/#course-prequisites","title":"Course Prequisites","text":"<p>Basic Python knowledge. Basic Web Development knowledge. Request / response, HTML, CSS, Javascript. </p>"},{"location":"django/Udemy_Django_Academind/section1/#whats-inside-the-course","title":"What's Inside the Course","text":"<p>Three main pillars: Foundation - URL's, Routes, Views, Templates, Static Files, Data, Models</p> <p>Beyond the Basics - Forms, Class based views, File Uploads, Sessions</p> <p>Preparing for Reality - Many Small Examples, A Real Project Blog, Front End + Admin Area, Implementation. </p>"},{"location":"django/Udemy_Django_Academind/section1/#getting-the-most-out-of-the-course","title":"Getting the most out of the course.","text":"<p>Watch the videos. Don't hesitate to repeat as necessary. Use playback speed if too slow or fast. Code along and code ahead. Compare your approach to his. Use code attachments - github repo's for each section. </p>"},{"location":"django/Udemy_Django_Academind/section1/#course-path","title":"Course Path","text":"<p>Standard approach - start with video 1 and go in order. At end is a Django summary module. Great recap and refresh.</p> <p>Summary Approach - just take the summary. Not recommended. </p>"},{"location":"django/Udemy_Django_Academind/section1/#summary","title":"Summary","text":""},{"location":"django/Udemy_Django_Academind/section1/#category","title":"Category","text":""},{"location":"django/Very_Academy/Course_Introduction/","title":"Course Introduction","text":"<ul> <li>Building an application with Django, HTMX, Bootstrap. Blog with search and tags. Use HTMX for infinite scroll on pages.</li> <li>The Code Base for the course is linked to in module 2</li> </ul>"},{"location":"django/Very_Academy/Course_Introduction/#windows-instructions","title":"Windows instructions:","text":""},{"location":"django/Very_Academy/Course_Introduction/#virtual-environment","title":"Virtual Environment","text":"<ul> <li><code>py -m venv venv</code></li> <li><code>.\\venv\\Scripts\\activate</code> (ve tab sc tab ac tab)</li> <li>If it doesn't work run PowerShell as administrator and <code>Set-ExecutionPolicy Unrestricted -Scope Process</code> <code>A</code> for all at prompt</li> <li>Or <code>Set-ExecutionPolicy Unrestricted -Force</code> if the above doesn't work.</li> <li>Then have to close and reopen Visual Studio Code</li> </ul>"},{"location":"django/Very_Academy/Course_Introduction/#git","title":"Git","text":"<ul> <li><code>https://docs.github.com/en/desktop/installing-and-configuring-github-desktop/installing-and-authenticating-to-github-desktop/setting-up-github-desktop</code></li> </ul>"},{"location":"django/Very_Academy/Course_Introduction/#vs-code","title":"VS Code","text":"<ul> <li>Using Dark Color Scheme. </li> <li>Open folder to your project folder / directory</li> <li>Can split screen to work on two files at a time. Icon looks like open book.</li> <li>White dot by file name shows not saved.</li> <li>Turned on autosave on file menu.</li> <li>Preferences Editor: Mouse Wheel Zoom checked. Font bigger Ctrl-MouseWheel</li> <li>Ctrl Plus or Minus also resizes font</li> <li>Shortcut for showing / hiding terminal (check under view) Ctrl+backquote (character under tilde). Can drag from bottom to show.</li> </ul>"},{"location":"django/Very_Academy/Course_Introduction/#linux-virtual-environment","title":"Linux Virtual Environment","text":"<pre><code>python3 -m venv virt\nsource virt/bin/activate\n</code></pre>"},{"location":"django/Very_Academy/Django_Initiation/","title":"Django Initiation","text":"<ul> <li>Create a folder called: First-Django-Project</li> <li>Create Virtual Environment called: venv:  <code>python3 -m venv venv</code></li> <li>Activate venv: <code>source venv/bin/activate</code></li> <li>Install Django - pip install django<ul> <li>other pip commands: pip uninstall, pip list, pip freeze (save to file - pip freeze &gt; requirements.txt)</li> </ul> </li> <li>Create requirements.txt: <code>pip freeze &gt; requirements.txt</code></li> <li>Start the project <pre><code># The . at the end is to keep the directory structure simpler\ndjango-admin startproject core .\n</code></pre></li> <li>Run the server to make sure things worked OK <pre><code>python manage.py runserver\n</code></pre></li> </ul>"},{"location":"django/Very_Academy/Django_Initiation/#veryacademy","title":"veryacademy","text":"<p>Django Initiation part of the Very Academy Udemy Course</p>"},{"location":"django/Very_Academy/Django_Initiation/#set-up-a-virtual-environment-installed-django-created-a-project-and-ran-the-server-to-see-that-it-all-worked","title":"Set up a virtual environment, installed django, created a project and ran the server to see that it all worked","text":"<pre><code>python -m venv venv\nsource venv/bin/activate\npip install django\ndjango-admin startproject core .\npython manage.py runserver\n</code></pre>"},{"location":"django/Very_Academy/Django_Initiation/#now-create-an-app-for-our-project-called-newapp","title":"Now create an app for our project called newapp","text":"<p><pre><code>./manage.py startapp newapp\n</code></pre> - Some tutorials will put the apps inside the project directory /core/newapp, but that's not his preference <pre><code>mkdir ./core/newapp\n./manage.py startapp newapp ./core/newapp\n</code></pre> - Generally apps used to make project easier to manage by creating components</p>"},{"location":"django/Very_Academy/Django_Initiation/#registering-a-django-app","title":"Registering a Django App","text":"<ul> <li>Need to add our app to the INSTALLED_APPS list in core/settings.py <pre><code>\"newapp\",\n</code></pre></li> </ul>"},{"location":"django/Very_Academy/Django_Initiation/#more-about-the-django-development-server","title":"More About the Django Development Server","text":"<ul> <li><code>./manage.py runserver 8080</code> is how you change to a different port</li> </ul>"},{"location":"django/Very_Academy/Django_Initiation/#django-request-response-cycle","title":"Django Request-Response Cycle","text":"<ul> <li>browser sends request to server, then server grabs url (/about, /help, etc.)</li> <li>url then points at a view which grabs a template, static files and stuff from the database to build web page</li> <li>web page then gets sent back to the user</li> <li>admin page is pre built by Django, but have to <code>./manage.py migrate</code> to get it to work</li> <li>admin page is at <code>localhost:8000/admin</code></li> </ul>"},{"location":"django/Very_Academy/Django_Initiation/#url-pattern-create-a-urls-file-in-the-app-and-connect-it-to-the-project","title":"URL Pattern - Create a urls file in the app and connect it to the project","text":"<ul> <li>Notice on the urls the / goes at the end not the beginning</li> <li>Create urls.py in newapp directory</li> <li>In project urls.py add <code>,include</code> to <code>from django.urls import path</code></li> <li>In project urls.py add the app urls file to urlpatterns list <pre><code>path(\"\", include('newapp.urls'))\n</code></pre></li> <li>Edit the app urls.py file and create a url for the index page of the website <pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path(\"\", views.home)\n]\n</code></pre></li> </ul>"},{"location":"django/Very_Academy/Django_Initiation/#create-a-view","title":"Create a view","text":"<ul> <li>Now in the views.py file in the app directory  <pre><code>from django.shortcuts import render\nfrom django.http import HttpResponse\n# Create your views here.\n# Using function based views here\n\ndef home(request):\n    return HttpResponse(\"Hello World\")\n</code></pre></li> </ul>"},{"location":"django/Very_Academy/Django_Initiation/#create-an-html-template","title":"Create an HTML Template","text":"<ul> <li>Use template instead of typing html directly into the home view</li> <li>Create a folder called templates in the app folder.</li> <li>Create index.html inside the templates folder</li> <li>I just used emmet for an html template and added an h1 saying Hello World</li> </ul>"},{"location":"django/Very_Academy/Django_Initiation/#connect-the-template-to-a-view","title":"Connect the template to a view","text":"<ul> <li>In views.py in the app folder return a template rather than html</li> <li><code>return render(request, 'index.html')</code></li> </ul>"},{"location":"django/Very_Academy/Django_Initiation/#django-application-from-a-requirementstxt-file","title":"Django Application from a requirements.txt file","text":"<ul> <li><code>requirements.txt</code> contains what the project needs</li> <li>To install from a requirements.txt file <pre><code>python -m venv venv\nsource venv/bin/activate\npip -r requirements.txt\n./manage.py migrate\n</code></pre></li> <li>To create <code>pip freeze &gt; requirements.txt</code></li> </ul>"},{"location":"flask/Corey%20Schaefer%20Flask%20Video%201/","title":"Corey Schaefer Flask Video Series 1","text":"","tags":["flask","coreyschaefer","flask_start"]},{"location":"flask/Corey%20Schaefer%20Flask%20Video%201/#corey-schaefer-flask-video-1-from-2019","title":"Corey Schaefer Flask Video 1 From 2019","text":"<p>The series will create  a blog with multiple users, profile pictures, and the ability to create, update and delete posts. The same site built in Django is also available. I\u2019m pretty sure that Flask is easier, but there are a lot more examples and videos for Django.</p>","tags":["flask","coreyschaefer","flask_start"]},{"location":"flask/Corey%20Schaefer%20Flask%20Video%201/#setup-folders-and-environment","title":"Setup Folders, and Environment","text":"<ul> <li>Created online and cloned github/csflask</li> <li>Create virtual environment \u201cflaskblog\u2019</li> <li>Activate venv flaskblog</li> <li>pip install Flask</li> <li>add flaskblog/ to .gitignore</li> <li>mkdir Flask_Blog</li> </ul>","tags":["flask","coreyschaefer","flask_start"]},{"location":"flask/Corey%20Schaefer%20Flask%20Video%201/#first-program-demonstrating-routes","title":"First Program demonstrating routes","text":"<p>Create flaskblog.py in Flask_Blog</p> <pre><code>from flask import Flask #  import Flask class\n\napp = Flask(__name__) # helps Flask find templates static files\n\n@app.route(\"/\") #  oreate home page route\ndef hello():\n    return 'Hello World!'\n</code></pre> <pre><code>cd Flask_Blog\nexport FLASK_APP=flaskblog.py\nFlask run # 1270.0.0.1:5000\n</code></pre> <p>To show use of html change return to <code>\u201c&lt;h1&gt;Hello World&lt;/h1&gt;\"</code>and had to stop and start server. To fix that <code>export FLASK_DEBUG = 1</code></p> <p>To avoid export of environment variables at bottom of flaskblog.py add:</p> <pre><code>if __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>Then just run python3 flaskblog.py.</p> <p>There are debug advantages to the environment variable process.</p> <p>Add an about page by adding another decorator and another function.</p> <pre><code>@app.route(\"/about\")\ndef about():\n    return \"&lt;h1&gt;About Page&lt;/h1&gt;\"\n</code></pre> <p>You can have multiple decorators for one function. So here both terryinfcco.com/ and terryinfcco.com/home would both go to the home page.</p> <pre><code>@app.route(\"/\")\n@app.route(\"/home\")\ndef home():\n    return \"&lt;h1&gt;Home Page&lt;/h1&gt;\"\n</code></pre>","tags":["flask","coreyschaefer","flask_start"]},{"location":"flask/Corey%20Schaefer%20Flask%20Video%202/","title":"Corey Schaefer Flask Video Series 2","text":"","tags":["flask","coreyschaefer","flasktemplates"]},{"location":"flask/Corey%20Schaefer%20Flask%20Video%202/#corey-schaefer-flask-video-2-from-2019","title":"Corey Schaefer Flask Video 2 From 2019","text":"","tags":["flask","coreyschaefer","flasktemplates"]},{"location":"flask/Corey%20Schaefer%20Flask%20Video%202/#learn-to-use-templates-and-pass-variables-to-web-pages","title":"Learn to use templates and pass variables to web pages","text":"","tags":["flask","coreyschaefer","flasktemplates"]},{"location":"flask/Corey%20Schaefer%20Flask%20Video%202/#using-templates","title":"Using templates","text":"<p>Flask expects the html templates in a specific place so create a folder called templates in Flask_Blog</p> <p>Then create about.html and home.html - just using the emmet ! in vscode and then adding header 1 to the body.</p> <pre><code>&lt;body&gt;\n    &lt;h1&gt;Home Page&lt;/h1&gt;\n&lt;/body&gt;\n</code></pre> <p><pre><code>&lt;body&gt;\n    &lt;h1&gt;About Page&lt;/h1&gt;\n&lt;/body&gt;\n</code></pre> Then you have to import render_template and change the return statements in the home and about functions to <code>return render_template('home.html')</code> and the same for the about function.</p> <pre><code>from flask import Flask, render_template # import Flask class\n\napp = Flask(__name__) # helps Flask find templates static files\n\n# You can have multiple decorators for one function so both / and /home go to the same page\n@app.route(\"/home\")\n@app.route(\"/\") # oreate home page route\ndef hello():\n    return render_template('home.html')\n\n@app.route(\"/about\")\ndef about():\n    return render_template('about.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>If all you wanted to use Flask for was serving static pages you'd be done. More detailed HTML pages and some CSS and you're done.</p>","tags":["flask","coreyschaefer","flasktemplates"]},{"location":"flask/Corey%20Schaefer%20Flask%20Video%202/#passing-data-to-html-template","title":"Passing Data to HTML template","text":"<p>He created a list of dictionaries at the top of the flaskblog.py file. In each dictionary were author, title, content, and date_posted fields. He called the list posts and then added <code>, posts = posts)</code> to the return statement in the home function. The first posts is the variable that's being passed to the html template and the second posts is the list of dictionaries that he created.</p> <pre><code>from flask import Flask, render_template # import Flask class\n\napp = Flask(__name__) # helps Flask find templates static files\n\n# List of dictionaries - dummy data\nposts = [\n    {\n        'author': 'Terry Dutcher',\n        'title': 'Blog Post 1',\n        'content': 'First Post content',\n        'date_posted': 'April 20, 2018'\n    },\n    {\n        'author': 'Jacqui Ward',\n        'title': 'Blog Post 2',\n        'content': 'Second Post content',\n        'date_posted': 'April 21, 2018'\n    }\n]\n\n# You can have multiple decorators for one function so both / and /home go to the same page\n@app.route(\"/home\")\n@app.route(\"/\") # oreate home page route\ndef hello():\n    return render_template('home.html', posts=posts)\n\n@app.route(\"/about\")\ndef about():\n    return render_template('about.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>Now to change home.html so it can use the data we're passing, we add code blocks. Code blocks in Jinja2 (the templating engine that Flask uses) are surrounded by opening curly brace, percent sign, percent sign, closing curly brace. In this example he does a for loop. Code blocks have to be closed, using in this case the endfor statement. </p> <p>Printing a variable you need to use double curly braces <code>{{ variable }}</code>. And dot notation works so to print the title he uses post.title.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Home Page&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h1&gt;Home Page&lt;/h1&gt;\n    &lt;!-- Jinja2 loop to go through posts passed from flaskblog.py --&gt;\n    {% for post in posts %}\n    &lt;h1&gt;{{ post.title }}&lt;/h1&gt;\n    &lt;p&gt;By {{ post.author }} on {{ post.date_posted }}&lt;/p&gt;\n    &lt;p&gt; {{ post.content }} &lt;/p&gt;\n    {% endfor %}\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>Jinja2 also supports if else logic. So in the head section he adds logic to look for a page title and use that instead of the default if we pass in a title. He did that in both the home and about templates. Then he passed a title to the about template but not to the home template.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    {% if title %}\n    &lt;title&gt;Flask Blog - {{ title }}&lt;/title&gt;\n    {% else %}\n    &lt;title&gt;Flask Blog&lt;/title&gt;\n    {% endif %}\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h1&gt;About Page&lt;/h1&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>","tags":["flask","coreyschaefer","flasktemplates"]},{"location":"flask/Corey%20Schaefer%20Flask%20Video%202/#including-blocks-in-our-templates-template-inheritance","title":"Including Blocks in our Templates - Template Inheritance","text":"<p>He creates a layout.html template and puts all of the common sections (like the head section with the if else title code) into layout.html and then includes that in home.html and about.html. Then there are block sections in layout.html for the unique parts of each page. In about.html and home.html he now surrounds the unique part of the html (all in the body in this case) with block tags. Then at the top of each template is an extends tag to refer to the layout.html template.</p> <p>To show the power of this he adds bootstrap links to the layout.html file and is now able to use bootstrap specific classes in the templates. At this point he grabs some html from a snippets folder to add a navbar to the layout.html template. Then he creates a static folder in the Flask_Blog project and adds a main.css file to the static folder. Finally he adds a link to the stylesheet using the url_for function. He recommends using url_for for as many links as possible. </p> <p>This was all done really fast and was hard to follow, but it's just html, css and bootstrap and has nothing to do with flask, so if you want more you'd have to study those three in more detail.  </p>","tags":["flask","coreyschaefer","flasktemplates"]},{"location":"flask/Flask_Tutorial_for_Beginners-Clever_%20Programmer_%20Youtube/","title":"Flask Tutorial for Beginners - Clever Programmer Youtube","text":""},{"location":"flask/Flask_Tutorial_for_Beginners-Clever_%20Programmer_%20Youtube/#section-1-very-basic-flask-app","title":"Section 1 Very Basic Flask App","text":"<ul> <li>Micro Framework - lightweight and bare bones</li> <li>Created directory called Flask App</li> <li>After creating a virtual environment called venv: <code>pip install flask</code> to install Flask</li> <li><code>flask --version</code> to make sure Flask is installed. He was on 1.1.1  and Python 2.7. So fairly old. We'll see if that messes me up.</li> <li>Create new file <code>app.py</code></li> </ul> <pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')   # Set up the root page of the website\n# Could put multiple routes for one function so:\n@app.rount('/home')\ndef hello():\n    return \"Hello World\"\n\nif __name__ == \"__main__\":  # only true if running from command line on localhost\n    app.run(debug=True)\n</code></pre> <ul> <li>To run <code>python app.py</code> and should run at localhost:5000</li> </ul>"},{"location":"flask/Flask_Tutorial_for_Beginners-Clever_%20Programmer_%20Youtube/#section-2","title":"Section 2","text":""},{"location":"flask/bootcamp_section_7/","title":"Flask Bootcamp Jose Section 7","text":""},{"location":"flask/bootcamp_section_7/#flask-basics","title":"Flask Basics","text":""},{"location":"flask/bootcamp_section_7/#virtual-environments","title":"Virtual Environments.","text":"<p>He uses Anaconda, so I'll just do it my way. Each project can have it's own development environment. He created an enviroment called myflaskenv, activated it, and installed flask. </p>"},{"location":"flask/bootcamp_section_7/#flask-hello-world-site","title":"Flask Hello World Site","text":"<p>He created the following program and called it basic.py</p> <pre><code>from flask import Flask # import the Flask Class\napp = Flask(__name__)   # creates Flask application object. \n\n@app.route('/') # decorator links page to root route. \ndef index(): # defines page named index \n    return '&lt;h1&gt;Hello Puppy!'&lt;/h1&gt;\n\nif __name__ == '__main__': # Only run if we are running program directly\n    app.run()\n</code></pre>"},{"location":"flask/bootcamp_section_7/#basic-routes","title":"Basic Routes","text":"<p>String passed in the decorator determines the URL extension that will link to the function that directly follows the decorator. Also known as a view.</p> <pre><code># points to http://localhost:5000/some_page\n@app.route(\"/some_page\")\n</code></pre> <p>Add an info page to our application</p> <pre><code>from flask import Flask # import the Flask Class\napp = Flask(__name__)   # creates Flask application object. \n\n@app.route('/') # decorator links page to root route. \ndef index(): # defines page named index \n    return '&lt;h1&gt;Hello Puppy!'&lt;/h1&gt;\n\n@app.route('/information') #127.0.0.1:5000/information\ndef info():\n    return \"&lt;h1&gt;Puppies are cute!&lt;/h1&gt;\"\n\nif __name__ == '__main__': # Only run if we are running program directly\n    app.run()\n</code></pre>"},{"location":"flask/bootcamp_section_7/#dynamic-routing","title":"Dynamic Routing","text":"<p>Example would be when we want a landing page for each user, so after the user logs in, the page could be www.site.com/user/unique_user_name. </p> <pre><code>@app.route('/some_page/&lt;name&gt;')\ndef other_page(name):\n    return 'User: {}'.format(name)\n</code></pre> <p>Adding to our program</p> <pre><code>from flask import Flask # import the Flask Class\napp = Flask(__name__)   # creates Flask application object. \n\n@app.route('/') # decorator links page to root route. \ndef index(): # defines page named index \n    return '&lt;h1&gt;Hello Puppy!'&lt;/h1&gt;\n\n@app.route('/information') #127.0.0.1:5000/information\ndef info():\n    return \"&lt;h1&gt;Puppies are cute!&lt;/h1&gt;\"\n\n# Example of dynamic routing    \n@app.route('/puppy/&lt;name&gt;')\ndef puppy(name):\n    return \"&lt;h1&gt;This is a page for {}&lt;/h1&gt;\".format(name)\n\n# Example of dynamic routing    and return upper case\n@app.route('/puppy/&lt;name&gt;')\ndef puppy(name):\n    return \"&lt;h1&gt;Upper Case: {}&lt;/h1&gt;\".format(name.upper())\n\nif __name__ == '__main__': # Only run if we are running program directly\n    app.run()\n</code></pre>"},{"location":"flask/bootcamp_section_7/#debug-mode","title":"Debug Mode","text":"<pre><code># to get better error messages in the browser. You get a debugger PIN when you\nlaunch the application and can use that to start a python console. \napp.run(debug=True)\n</code></pre>"},{"location":"flask/bootcamp_section_7/#summary","title":"Summary","text":""},{"location":"flask/bootcamp_section_7/#category","title":"Category","text":""},{"location":"tkinter/vid1_window_basics/","title":"Bro Code Youtube Channel Tkinter","text":""},{"location":"tkinter/vid1_window_basics/#video-1-windows","title":"Video 1 - Windows","text":"<pre><code>from tkinter import *\n\nwindow = Tk() # instantiate an instance of a tkinter window\n# Change the size of the window\nwindow.geometry(\"420x420\")\n\n# Change the title of the window\nwindow.title(\"Bro Code First GUI Program\")\n\n# Give it a favicon - I tried both True and False in the iconphoto stmt and \n# couldn't tell any difference.\n\nicon = PhotoImage(file=\"linux.png\")\nwindow.iconphoto(True, icon)\n\n# change background color of window\nwindow.config(background=\"#5cfcff\")\n\nwindow.mainloop() # place window on computer screen and listen for events.\n</code></pre>"},{"location":"tkinter/vid2_labels/","title":"Bro Code Youtube Channel Video 2","text":""},{"location":"tkinter/vid2_labels/#labels","title":"Labels","text":"<pre><code>from tkinter import *\n\nwindow = Tk()\n\n# label is an area widget that holds text or an image\n# window is the container where the label goes.\n# text puts text in the label\n# font changes the font color\n# fg is the foreground color - color name or hex value works for all these colors\n# bg is the background color\n# relief is the border style\n# bd is the width of the border in pixels\n# padx is horizontal spacing between text and border\n# pady is vertical spacing between text and border\nlabel = Label(window,\n     text=\"Hello World\", \n     font=(\"Arial\",40,'bold','underline'), \n     fg='green',\n     bg='black',\n     relief=RAISED,\n     bd=10, \n     padx=20,\n     pady=20)\n# label.place(relx = 0.35 , rely = 0.0)\nlabel.pack()\n\n# 2nd label to show SUNKEN relief\nlabel2 = Label(window,\n     text=\"Label 2\", \n     font=(\"Arial\",40,'bold','underline'), \n     fg='green',\n     bg='black',\n     relief=SUNKEN,\n     bd=10)\n# label.place(relx = 0.35 , rely = 0.0)\nlabel2.pack()\n\n# Put an image in a label\n# make it a photoimage, compound shows where the image goes relative to the text. \n# so in this case the image is above the text. \nphoto = PhotoImage(file=\"linux.png\")\nlabel3 = Label(text=\"Linux Penguin\",\n    font=(\"Arial\", 20), \n    image=photo, compound=\"top\")\nlabel3.pack()\nwindow.mainloop()\n</code></pre>"},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#caleb","title":"caleb","text":"<ul> <li>Setup</li> <li>New Project</li> <li>Model View Template</li> <li>First View</li> <li>Using Templates</li> <li>More Complicated Data</li> <li>Models and Databases</li> <li>Working With Real Data</li> <li>Create Detailed View</li> </ul>"},{"location":"tags/#codemy","title":"codemy","text":"<ul> <li>Codemy Django Simple Blog Series 1</li> </ul>"},{"location":"tags/#coreyschaefer","title":"coreyschaefer","text":"<ul> <li>Corey Schaefer Django Video Series 1</li> <li>Corey Schaefer Flask Video Series 1</li> <li>Corey Schaefer Flask Video Series 2</li> </ul>"},{"location":"tags/#dj_data","title":"dj_data","text":"<ul> <li>Working With Real Data</li> </ul>"},{"location":"tags/#dj_forms","title":"dj_forms","text":"<ul> <li>Create Detailed View</li> </ul>"},{"location":"tags/#dj_models","title":"dj_models","text":"<ul> <li>Models and Databases</li> </ul>"},{"location":"tags/#dj_mvt","title":"dj_mvt","text":"<ul> <li>Model View Template</li> </ul>"},{"location":"tags/#dj_setup","title":"dj_setup","text":"<ul> <li>Setup</li> </ul>"},{"location":"tags/#dj_startproject","title":"dj_startproject","text":"<ul> <li>New Project</li> </ul>"},{"location":"tags/#dj_templates","title":"dj_templates","text":"<ul> <li>Using Templates</li> <li>More Complicated Data</li> </ul>"},{"location":"tags/#dj_views","title":"dj_views","text":"<ul> <li>First View</li> </ul>"},{"location":"tags/#django","title":"django","text":"<ul> <li>Setup</li> <li>New Project</li> <li>Model View Template</li> <li>First View</li> <li>Using Templates</li> <li>More Complicated Data</li> <li>Models and Databases</li> <li>Working With Real Data</li> <li>Create Detailed View</li> <li>Codemy Django Simple Blog Series 1</li> <li>Corey Schaefer Django Video Series 1</li> </ul>"},{"location":"tags/#django_start","title":"django_start","text":"<ul> <li>Codemy Django Simple Blog Series 1</li> <li>Corey Schaefer Django Video Series 1</li> </ul>"},{"location":"tags/#flask","title":"flask","text":"<ul> <li>Corey Schaefer Flask Video Series 1</li> <li>Corey Schaefer Flask Video Series 2</li> </ul>"},{"location":"tags/#flask_start","title":"flask_start","text":"<ul> <li>Corey Schaefer Flask Video Series 1</li> </ul>"},{"location":"tags/#flasktemplates","title":"flasktemplates","text":"<ul> <li>Corey Schaefer Flask Video Series 2</li> </ul>"}]}