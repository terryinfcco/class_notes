{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Another Terry Attempt at Notes","text":"<p>Right now this is stored at github in the new_mkdocs repository</p> <p>Be sure to do a git pull before using since I'm playing with it from both the Raspberry Pi 400 in the basement and the Beelink i5 in the 2nd floor office. </p>"},{"location":"#welcome-to-mkdocs","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"2022-12-16-notes-about-silver-bullet/","title":"Notes About Silver Bullet","text":"<ul> <li>The core of Silver Bullet is markdown editor with links. </li> <li><code>silverbullet .</code> will start silver bullet in the current folder.</li> <li>Chrome browser will let you install silver bullet as a PWA - Progressive Web App</li> <li>shortcuts - ctrl-i will italicize highlighted word/phrase...</li> <li>paste a link from browser on top of a word and it becomes a link to that browser page</li> <li>create link <code>[[this is another page]]</code></li> <li>saving files is done automatically</li> <li>ctrl-k brings up page switcher - then start typing name of the page</li> <li>renaming a page updates all the links to that page automatically</li> <li>can just drag and drop an image to a page and it will be there.</li> <li>: and start typing to look up emojis that are related. He typed :book and got book emoji.</li> <li>He typed a sentence and then /task at the end to create a checkbox.</li> <li>Query example: He was able to show only pages / files that had book emoji in the name.</li> <li>Used a template to show the books he entered as links.</li> <li>Can use yaml style front matter e.g. author: J.K. Rowling, year: 2007, etc.</li> </ul>"},{"location":"Cornell_Notes/","title":"Cornell (kind of) Notes Template","text":""},{"location":"Cornell_Notes/#title","title":"Title","text":""},{"location":"Cornell_Notes/#notes","title":"Notes","text":""},{"location":"Cornell_Notes/#summary","title":"Summary","text":""},{"location":"Cornell_Notes/#category","title":"Category","text":""},{"location":"Photo_Gallery_ideas.md/","title":"Photo Gallery ideas.md","text":"<p>Photo gallery website on grandpaterry.xyz</p> <p>What are the options for a photo gallery at grandpaterry.xyz? I know I could do wordpress, but not sure if there's something better/easier.</p> <p>Think about either a side menu or something different across the top main menu so I can have categories like on the gallery on the main page.</p>"},{"location":"Setting%20Up%20A%20For%20Real%20Website%21/","title":"Setting Up A For Real Website!","text":"<p>OK, I've set up another Jekyll Website. I'm hoping to use this one for real. It's in folder real-thing on Nextcloud</p> <p>and I'm not going to bother with Github or Gitlab or anything.</p> <p>The focus is going to be pages, but there is a posts section where this post is located.</p> <p>I had to change permissions on 192.168.86.20 so that the owner of /var/www/html is terry and the group is www-data. And I had to change the permissions to 750. The commands I used are:</p> <pre><code>cd /var/www\nsudo chown -R www-data:www-data html\nsudo chmod -R 770 html\n</code></pre> <p>I also fooled around with changing themes and it's a pain in the butt. Layouts that aren't there, plugins required for things that I don't care about like SEO.</p>"},{"location":"Using%20Minima%20Dark%20Theme/","title":"Using Minima Dark Theme","text":"<p>Found an article at https://blog.slowb.ro/dark-theme-for-minima-jekyll about how to use the git version of the minima theme which includes 2 dark skins - one called dark and solarized dark. So that's what this is right now.</p>"},{"location":"diary/","title":"Objects needed by the Digital Diary program","text":"<ol> <li> <p>Main Window</p> <ul> <li>fillin window method, reads entry files and creates the labels and buttons</li> <li>empty window method - deletes all the stuff in the main window. Used after adding a      new record. Followed by the fillin method to reread files and rebuild</li> </ul> </li> <li> <p>Create new entry</p> <ul> <li>fillin window method. Creates labels, entry boxes and buttons. </li> <li>accept user input and save file. Then empty and refill main window. Destroy this window.</li> </ul> </li> </ol>"},{"location":"thoughts/","title":"Where My Head Is.","text":""},{"location":"thoughts/#this-is-a-document-to-be-updated","title":"This is a document to be updated.","text":"<p>There shouldn't be more than one of these. And I'll keep it up to date with the current state of my ideas about studying technology and learning for the sake of learning. </p> <p>I think I should put my stuff on the Beelink i3, 192.168.86.20. The raspberry pi 4 can be better used elsewhere since buying one is darn near impossible or ridiculously expensive. </p> <p>And I think that I should consider Hugo if I really want a blog since Jekyll with only a few posts runs very slowly on the pi 4. I'm sure the Beelink i3 would be faster but still.... The other possibility would be build elsewhere and just upload to the Beelink i3.</p> <p>I'm building an mkdocs instance on 192.168.86.26, the Pi4 running Ubuntu server. Whatever I study should go here. I've put the instructions for updating and building this instance in Google Keep.</p> <p>One of the next things I should is figure out how to do backups and automate the process that I've documented in  Google Keep. </p>"},{"location":"DigitalDiary/Diary_Flow/","title":"Flow of Digital Diary","text":"<p>When it starts create a page that has a title, a list of the five most recent entries, an edit button to the right of each entry and buttons across the bottom. The buttons I'm thinking about are:</p> <ul> <li>Create a new entry</li> <li>right left arrows - show next or previous 5 entries.</li> <li>S - search page</li> <li>Q - quit application</li> </ul> <p>So I need functions:</p> <ul> <li>to show the entries</li> <li>to create a new entry</li> <li>to edit an existing entry</li> <li>to handle the right/left arrows and page through all the diary entries</li> <li>to search through the diary entries and create a list of entries which contain the search term(s)</li> </ul> <p>Thinking about the file and fields.</p> <ul> <li>File Name</li> <li>Date time</li> <li>Title - one line only</li> <li>Snippet - show on list pages under Title - one line only</li> <li>Content</li> </ul> <p>I still like the idea of one file per entry, And I can store them in subdirectories and the glob function will find them. Nothing wrong with the current format,</p> <p>Once I sort the list that's created by glob, I think I can create 5 lists (one for each of the above fields). Then as I build and work with the displayed data, it'll all be there to manage.</p> <p>I want to use objects. So there should be an object for the entries and when I read the glob create instances containing the 5 fields above. Use the all stuff I learned in the FreeCodeCamp YouTube object video.</p> <p>And take another look at the thread (was it Reddit or Stack Overflow?) that describes how to set up a tkinter application using objects. </p>"},{"location":"DigitalDiary/NewCTDiaryLayout/","title":"Terry Tech Diary","text":"<pre><code>|=================================================================|  |=======|\n| Latest Diary Entry Title + DateTime                             |  | EDIT  |\n| Single line snippet, summary of the diary entry                 |  | Entry |\n|=================================================================|  |=======|\n\n|=================================================================|  |=======|\n| Second Latest Diary Entry Title + DateTime                      |  | EDIT  |\n| Single line snippet, summary of the diary entry                 |  | Entry |\n|=================================================================|  |=======|\n\n|=================================================================|  |=======|\n| Third Latest Diary Entry Title + DateTime                       |  | EDIT  |\n| Single line snippet, summary of the diary entry                 |  | Entry |\n|=================================================================|  |=======|\n\n|=================================================================|  |=======|\n| Fourth Latest Diary Entry Title + DateTime                      |  | EDIT  |\n| Single line snippet, summary of the diary entry                 |  | Entry |\n|=================================================================|  |=======|\n\n|=================================================================|  |=======|\n| Fifth Latest Diary Entry Title + DateTime                       |  | EDIT  |\n| Single line snippet, summary of the diary entry                 |  | Entry |\n|=================================================================|  |=======|\n\n|============|   |============|  |============|  |============|  |============|\n| Create New |   |  Previous  |  |   Next     |  |   Search   |  |    Quit    |\n|   Entry    |   |  Entries   |  |  Entries   |  |   Entries  |  |    Diary   |\n|============|   |============|  |============|  |============|  |============|\n</code></pre>"},{"location":"Journal/2021-11-21-Setting-Up-Jekyll-Site/","title":"2021 11 21 Setting Up Jekyll Site","text":"<p>OK, I've set up another Jekyll Website. I'm hoping to use this one for real. It's in folder real-thing on Nextcloud and I'm not going to bother with Github or Gitlab or anything.</p> <p>The focus is going to be pages, but there is a posts section where this post is located.</p> <p>I had to change permissions on 192.168.86.20 so that the owner of /var/www/html is terry and the group is www-data. And I had to change the permissions to 750. The commands I used are:</p> <p>{% highlight bash %} cd /var/www sudo chown -R www-data:www-data html sudo chmod -R 770 html {% endhighlight %}</p> <p>I also fooled around with changing themes and it's a pain in the butt. Layouts that aren't there, plugins required for things that I don't care about like SEO.</p>"},{"location":"Journal/2021-11-21-welcome-to-jekyll/","title":"Welcome to Jekyll!","text":"<p>You\u2019ll find this post in your <code>_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code>jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p> <p>Jekyll requires blog post files to be named according to the following format:</p> <p><code>YEAR-MONTH-DAY-title.MARKUP</code></p> <p>Where <code>YEAR</code> is a four-digit number, <code>MONTH</code> and <code>DAY</code> are both two-digit numbers, and <code>MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p> <p>Jekyll also offers powerful support for code snippets:</p> <p>{% highlight ruby %} def print_hi(name)   puts \"Hi, #{name}\" end print_hi('Tom')</p>"},{"location":"Journal/2021-11-21-welcome-to-jekyll/#prints-hi-tom-to-stdout","title":"=&gt; prints 'Hi, Tom' to STDOUT.","text":"<p>{% endhighlight %}</p> <p>Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll\u2019s GitHub repo. If you have questions, you can ask them on Jekyll Talk.</p>"},{"location":"Journal/2021-11-24-Minima-Dark/","title":"2021 11 24 Minima Dark","text":"<p>Found an article at https://blog.slowb.ro/dark-theme-for-minima-jekyll about how to use the git version of the minima theme which includes 2 dark skins - one called dark and solarized dark. So that's what this is right now.</p>"},{"location":"Journal/2021-11-25-Arch-Aargh/","title":"2021 11 25 Arch Aargh","text":"<p>I restored a version of Arch using clonezilla and tried to set up Jekyll. It didn't work and I don't know why I insist on trying to use Arch. I would like to use the i3 window manager, but I think tomorrow I'm going to install Xubuntu and install and run i3 from there.</p> <p>Then again there's always the possibility that no amount of screwing around with window managers or desktop environments will make much difference. So maybe I should just focus on studying whatever it is that I'm going to study.</p>"},{"location":"Journal/2021-11-26-Xubuntu-I3/","title":"Install Xubuntu and I3wm","text":"<p>OK, I installed Xubuntu 21.10 and it was OK once I stopped trying to resize the old Arch partition and just deleted and recreated it. Then I grabbed an old pi4 i3wm config file and i3blocks file. Installed i3, i3blocks, and rofi. After a bunch of editing of the config file, installing lxappearance, codium, atom, nextcloud, dropbox, and syncthing, I've got a working system.</p> <p>Then I followed the jekyll instructions for installing jekyll on Ubuntu and now I've got the whole thing working. Now I'm working on transferring the files to my local server (192.168.86.20) using rsync. Right now I need to check if using the rsync chown option will work.</p> <p>I messed up Nextcloud when moving the DocumentRoot of Apache2 on 192.168.86.20. I'm not even sure I care - I wasn't using any of the nextcloud apps and syncthing seems to do what I want.</p> <p>Got simple-scan working on my xubuntu / i3 desktop. Yay.</p>","tags":[]},{"location":"Journal/2021-11-27-Rsync-Jekyll/","title":"Rsync and Jekyll","text":"<p>I have a working shell script to upload this jekyll site to 192.168.86.20. Here's the code</p> <p>{% highlight bash %}     #!/bin/bash     cd /home/terry/Sync/real_thing     bundle exec jekyll build --baseurl \"\"     rsync -vrzc --chown=www-data:www-data /home/terry/Nextcloud/real_thing/_site/* terry@192.168.86.20:/home/terry/webroot</p> <p>{% endhighlight %}</p>","tags":[]},{"location":"Journal/2021-12-03-Simplest-Web-Developer-Path/","title":"Simplest Web Developer Path 2021 - James Q. Quick","text":"<p>OK, here's his list. His favorite course is Colt Steele Web Developement.</p> <ul> <li>HTML</li> <li>CSS</li> <li>Javascript</li> <li>Either React or Vue (Front End Framework)</li> <li>Node JS</li> <li>Express (Node JS Framework)</li> <li>Database like MongoDB</li> <li>MERN Stack - Mongo, Express, React, NodeJS</li> </ul> <p>At the end you should be able to build a CRUD application. Create, Read, Update, and Delete. Proves knowledge of how to put these things together.</p> <p>Extras: TypeScript, GraphQL</p>","tags":[]},{"location":"Journal/2021-12-05-Learning-Plans/","title":"Learning Plans","text":"<p>So I'm suddenly pretty happy with Jekyll and what I've got set up in this real thing directory. So I'm going to work on both the Udemy Django course and I think Net Ninja's stuff. But I've got both the Academind and the Colt Steele web courses on Udemy also.</p> <p>I want to set up my categories page so that it's got all the preset categories pages that I might need.</p> <p>I looked at and tried to follow a video about running Django on a Ubuntu server and I'm a little disappointed in that. So I think it's Academind 100 Days Web Developement course for me right now.</p>","tags":[]},{"location":"Journal/2021-12-07-Learning-Plans-Update/","title":"Learning Plans Updated","text":"<p>Several thoughts while I couldn't sleep last night.</p> <ul> <li>I could run Django projects on my servers here at home using the development server pretty easily.</li> <li>I'm not sure whatever I developed in Django would be any better or as good as what I can accomplish with Jekyll, Dokuwiki, Tiddlywiki, MkDocs etc.</li> <li>I do think I could get back to things like the Freecell solver and have some fun with desktop development.</li> </ul>","tags":[]},{"location":"Journal/2021-12-09-1st/","title":"Today's Plan","text":"<p>I'm going to try to restart the Codemy.com Django classes. I think I know how to create it on a server (probably the pi that houses the Tiddlywiki stuff). Couple of things I want to do first:</p> <ul> <li>Backup Tiddlywiki's</li> <li>Figure out how to remote into a server with VSCode</li> <li>Work on the first really simple Codemy.com Django course.</li> </ul>","tags":[]},{"location":"Journal/2021-12-10-1st/","title":"Still Confused","text":"<p>I did get Django to work remotely on the pi4 in the basement. So yay for that.</p> <p>I'm still struggling with where to focus my time - Python via Flask and Django, or web development with HTML/CSS and Javascript.</p>","tags":[]},{"location":"Journal/2021-12-17-1st/","title":"Thinking about Log4J","text":"<p>So I'm thinking that the 2 forward facing internet sites should probably be just things like Jekyll and MkDocs where I've got the original stored on Nextcloud or Syncthing so that if I get hacked I can just nuke and pave the site. That means that tools like Django, Flask, Tiddlywiki, and Dokuwiki are better left on my Raspberry Pi's that I'm using as home servers.</p> <p>I played around a bunch trying to work out a blog on MkDocs and really didn't like anything I saw. I think I need to get back to work on the Jekyll site - just have posts there and for documentation get a really nice MkDocs site going.</p>","tags":[]},{"location":"Journal/2022-01-03-1st/","title":"What to do about Blogging","text":"<p>January 3, 2022 - Grav, Wordpress</p> <p>So I felt like I didn't like Grav because a normal user couldn't edit posts - but I'm not nuts about Wordpress either, so I'm going to take a shot at Grav for a few days and see what I think.</p> <p>Couldn't even get Grav to add a post. No idea why. Gave up. Back to Jekyll for blogging. Aargh!!!</p> <p>I've said this before but I think I just need to pick something and power through it.</p>","tags":[]},{"location":"Journal/2022-01-04-1st/","title":"Plowing Ahead","text":"<p>January 4, 2022 - Web Development</p> <p>I want to put a picture on a page of a web site and I have no idea how to do it easily. I either have to get back to CSS or Bootstrap. My first inclination is Bootstrap. And I suppose there are other front end frameworks that would also work. Maybe I'll investigate.</p> <p>They're not quite up to date, but I could use John Elder's HTML, Bootstrap, and Javascript courses to do this. OK never mind, I started the Incredible HTML/CSS course on Udemy over again. Part of it is just so I can actually finish a course, but another part is to learn enough HTML and CSS to make sense of either Django or Flask. I might throw in some Bootstrap too, but so far this is where my head is.</p>","tags":[]},{"location":"Journal/2022-01-06-1st/","title":"Log","text":"<p>January 6, 2022 - Jekyll on Arch</p> <p>Installed Jekyll on Arch and got it working. Some updates needed to my instructions that I have stored in Dokuwiki, so I updated those. Good for me.</p> <p>Installed mate-polkit and autotiling and copied the respective lines from the Arch i3 config file that came from the cyberpower pc.</p> <p>Worked on the openbox install on Arch on the Beelink and think it's pretty good so I have the choice of doing either i3 or openbox. Now to make sure the rsync dotfiles script works. </p>","tags":[]},{"location":"Journal/2022-01-24-1st/","title":"Jekyll Again","text":"<p>I found a new theme for Jekyll that both has 6 skins, 2 of them dark, and built in search. It's called jekyll-theme-basically-basic. </p>","tags":[]},{"location":"Journal/2022-05-26-1st/","title":"And Jekyll Again","text":"<p>I want to be more organized. I want to use this Learning Log to plan what I want to accomplish on a regular basis. It's not difficult to keep up,  even though I won't be able to do updates on my tablet or phone. But it would be pretty easy if I really want to capture something to put it in Google Keep and just copy over and format the next day.</p> <p>If I really want to accomplish things, I think the best way is to write python tkinter apps. Again I won't be able to update them on my tablet or phone, but again I can put stuff in Google Keep and update the next time I'm at a computer.   </p>","tags":[]},{"location":"Journal/2022-05-31-Organizing-My-Thoughts/","title":"Organizing My Thoughts","text":"<p>I'm thinking that I want 3 different sites on probably github. </p> <ul> <li>One is just a blog for keeping track of my  thoughts on a dated basis. Right now it's this repo: \"https://github.com/terryinfcco/GT_blog\". This might also be suitable for my learning log. Just have to  make sure to do categories correctly so I can go back and find stuff.</li> <li>One is for documentation and taking notes as I work through courses. Right now it's an mkdocs instance that I'm using: \"https://github.com/terryinfcco/mkdocs\". Probably need to rename.</li> <li>The third is for planning - maybe an mkdocs instance. It would have 2 sections. One would be perhaps kinds of stuff. Probably an index page with the titles each referring to a detail page. The other would be a todo list. Again with an index page that has entries to detail pages. This doesn't exist yet. Created - in \"https://github.com/terryinfcco/new_mkdocs\". Probably need to rename.</li> </ul>","tags":[]},{"location":"Journal/2022-06-04-Django-Better-Programming/","title":"Django Journal at Better Programming","text":"<p>I finished organizing my notes from the article about Creating a Journal App in Django. It was written by Esther Vaati and was posted at https://betterprogramming.pub/build-a-personal-journal-with-django-and-python-f4835d27368c. I really liked the article. I thought it was well written and appropriate for a person who had learned some Django theory and wanted to see it applied. </p> <p>The notes are stored as Markdown files in Dropbox/LinuxDropbox/Django_Journal_Better_Programming. I also had them in a github repository as an mkdocs instance, but since most of the notes I'm taking are of copyright material, I think it's probably not good to post them in public. The local version of the github repo still exists but I think I should be careful where I post it. I can still run mkdocs locally to see the notes nicely formatted.</p> <p>I'm going to attempt to follow the instructions and install it on my raspberry pi 4 server downstairs. Then I think I can adapt the Journal to also be a ToDo list. And maybe a learning log. </p>","tags":["edited"]},{"location":"Journal/2022-08-09-Ncurses_and_Tkinter/","title":"Plan for Ncurses and Tkinter","text":"<p>I'm thinking that I should write a todo app in ncurses and then if I want convert it to tkinter. That way I can get some of the stuff I'm uncomfortable with like file I/O and how to store the data out of the way in a simpler environment.</p> <p>I think I'll fool around with a csv file, maybe item number, title, and notes (for stuff like progress, hurdles I run into, etc.).</p>","tags":["1"]},{"location":"Journal/2022-08-10-tkinter-and-django-for-todo-list/","title":"Tkinter, Django, ToDo List, and Study Plans","text":"<p>I'm pretty happy with what I accomplished yesterday when I took the Digital Diary app from github and converted it for my own use and then also modified it to be a todo / task list.</p> <p>But I really like the ability to do this stuff from the web even if it's only a local server on a raspberry pi. So I'm going back to studying Django. I'm going to use John Elder's courses first on codemy.com and later the youtube ones, especially the one about building a blog that ends up in django 4 by the end.</p> <p>As far as studying goes, I still like the use of my GT_notes jekyll site that's both local and on github for creating notes about stuff that doesn't end up in a program and for just commenting the bejesus out of the code as I write it. So a flow in GT_notes that doesn't include code. Or if it does, code that's just copied from the source and pasted in the markdown documents. </p>","tags":[]},{"location":"Journal/2022-08-16-jekyll-bluetooth/","title":"Jekyll and Bluetooth Arch Linux","text":"<p>Got bluetooth working on Arch on the Beelink I5. Just missed installing one thing from the instructions in the Arch Wiki. Had some trouble with wifi when I first started Arch, so I went through the iwctl process and it seems to be working fine now.</p> <p>Installed Jekyll on Arch and have it working. Followed the instructions for the gem install on the Arch Wiki.</p> <p>Didn't do any studying but not unhappy with what I accomplished. I'm working toward a more mouseless approach with Arch and  i3wm. I think I can be happier with that. </p> <p>Pretty sure I don't want to keep uploading this technology \"diary\" to Github. The notes Jekyll site, maybe. </p> <p>And I think sitting here every evening after dinner and whatever TV we watch, and updating this technology diary would be a great habit to continue.  </p>","tags":[]},{"location":"Journal/2022-08-17-jekyll-beelinki3/","title":"Jekyll Kubuntu Terrystudent Arch","text":"<p>Went to use my Arch Linux stuff from yesterday and it failed to connect to my headphones. I quit....</p> <p>Back to the terrystudent installation on Kubuntu on the Beelink i5. I worked on the jekyll_upload.sh script and got it working to backup this installation to Dropbox/jekyll/GT_blog and to build the site and upload it to the beelink i3 webserver.</p> <p>Thinking as always that I need to pick something and stick to it. I keep trying to find something that I want to build and I've looked at Django todo lists, Django diaries, etc. Nothing seems better that what I've already got: Jekyll for a tech diary, and probably tiddlywiki for a todo list. So one thought is to pick something and really stick to it, not worrying about what I might do with it. Or figure out something that I really want to do (freecell most efficient solver?) and just do it. One thought is to go back to the youaccel web development course and stick through it. By then I'd have gone through HTML, CSS, Javascript, and PHP. Maybe that would give me some ideas of something to do. </p>","tags":[]},{"location":"Journal/2022-09-26-script-to-create-jekyll-post/","title":"Script to Create Jekyll Post","text":"<p>Stole a script from shinytreecko.com that creates a Jekyll template after you give it a title. </p> <p>Next step is scripts to update the jekyll site and the mkdocs site. </p>","tags":[]},{"location":"Journal/2022-09-29-backups-of-beelink-i3/","title":"Backups Of Beelink I3","text":"<p>Set up backups of the source side of Jekyll GT_blog and Mkdocs simple. Should be able to copy other backup scripts that use rsync from previous stuff I've done.</p> <p>Thursday finished and seems to work. Should be able to use as a model for rest of the days of the week.</p>","tags":["todo edited"]},{"location":"Journal/2022-10-07-freenove-pi-and-python-objects/","title":"Freenove Pi and Python Objects","text":"<p>I think I have the pi 400 and the pi 3 hooked up to be able to work through the freenove ultimate starter kit. I need to redo my understanding of addressing GPIO pins, although part of my problem today was a bad male to male jumper.</p> <p>I watched more of the FreeCodeCamp Python OOP video and more of the objects course that I got free on Udemy. I sometimes wonder why I just don't fight my way through the Angela Yu 100 days course. But I do think I'm getting a handle on using objects and how I might use them in the digital diary program that I'm going to create but never use. </p>","tags":["python freenove raspberrypi"]},{"location":"Journal/2022-10-25-kanboard-on-pi4-server/","title":"Kanboard on Pi4 Server","text":"<p>Installed Kanboard on the pi4 server address 26.</p>","tags":["kanban"]},{"location":"Journal/2022-10-25-working-on-alias-for-new-jekyll-post-script/","title":"Working on alias for New Jekyll Post script","text":"<p>I think I've successfully created an alias for the new jekyll post script. I had to make sure that the target directory variable was fully qualified. Now I want to add a list of aliases to my login message on the Beelink i3 server.</p>","tags":["edited"]},{"location":"Journal/2022-10-26-made-a-jekyll-post-manager/","title":"Made a Jekyll Post Manager","text":"<p>I've got a working Jekyll post manager. It's not pretty, but it pages through the existing, launches the njp.sh script to create a new entry, lets the user pick an existing entry to edit and exits. Yay!!!!</p>","tags":["edited"]},{"location":"Journal/2022-10-26-testing-subprocess/","title":"Testing Subprocess","text":"<p>Trying to make sure the subprocess command works and returns to continue the jekyll manager script. </p>","tags":[]},{"location":"Journal/2022-10-26-try-%232-at-adding-a-new-entry-in-jekyll-manager/","title":"Try #2 at adding a new entry in jekyll manager","text":"<p>Rereading the file list after creating a new post and returning from vim.</p>","tags":["1"]},{"location":"Journal/2022-10-27-current-thoughts/","title":"Current Thoughts","text":"<p>I'm currently thinking of having 3 online note taking places: </p> <ul> <li>The first is this Jekyll site for keeping a log of activities and thoughts. </li> <li>Second is a Todo Tiddlywiki site with three index pages - Active, Perhaps, and Completed Tasks.</li> <li>Third is MkDocs - it's still the best product for documentation. Although I have to admit to being pretty happy with the paper notes I took from the Tech With Tim curses playlist on Youtube. Maybe I don't need a documentation site at all.</li> </ul> <p>And I think it would be nice to have these all on a fairly low powered Raspberry Pi. Maybe the Pi 4 I've got or maybe even trying it on an old Pi 2. I think I'll look up the power consumption difference. Although thinking about it, not having USB3 on the Pi 2 is a strike against the Pi 2.</p>","tags":[]},{"location":"Journal/2022-10-27-jekyll-manager-curses-version/","title":"Jekyll Manager Curses Version","text":"<p>The Jekyll Manager Curses Version on the Beelink i3 (/home/terry/GT_blog/jmc.py) is working well. I need to add an alias to it and put it in the opening message. Did that, the alias is jm and the script it runs is jm.sh.</p> <p>I tried to do things differently this time. All I did was create a python program that just used print, input, and various subprocess statements to print out the entry information and use the number of the one that I wanted to edit. Once I got that python program working, I then went ahead and slowly used that as a template to create a curses based version of the same basic logic. And it works great. I'd still like to add colors to it, but it's pretty darn good. I think I have to recall wrapper everytime I go away to vim because the bottom menu can be messed up. Or maybe I can start vim in a new window and not mess with the curses app at all. </p> <p>I think I should be able to do the same sort of thing using jekyll and the same setup to do a todo list. Just use the tags completed, progressing, perhaps, and maybe 1 or 2 more then use the tag menu on the jekyll site to view the stuff. </p>","tags":[]},{"location":"Journal/2022-10-27-more-jekyll-manager-curses-notes/","title":"More Jekyll Manager Curses Notes","text":"<p>One of the stack overflow articles recommends using curses.endwin() before exiting to a subprocess like vim, and stdscr.refresh() upon returning. </p> <p>I also need to fix the system so that the number of entries shown on the main screen is variable and calculated based on the number of rows (which curses calls lines) available in the terminal. Pretty much working, but when there's less than a full page at the end, the highlight doesn't work well. Got that.  </p> <p>I should also create a menu entry which lets the user run the update jekyll script from the manager, so they don't have to do it separately. Got that. Nice.</p>","tags":["curses manager"]},{"location":"Journal/journal_2021_05_31.md/","title":"Journal 2021 05 31.md","text":"<p>2021-05-31 Daily Notes</p> <p>Did some more grok tiddlywiki. I think it's more than I need. But I plan to continue for another chapter or two. Watched a couple of videos about Joplin and decided to give it another shot. I really like that it's available for mobile and very easy to set up. </p>"},{"location":"Journal/journal_2022_01_17.md/","title":"Journal 2022 01 17.md","text":"<p>2022-01-17 Daily Notes</p> <p>Back to a serious struggle with journals and note taking.  * Where is the Joplin stuff stored and can I access it?  * It's on Dropbox and I can export and import.</p> <p>id: d7a83ba3c6514f428eedb0fa9e9f7dec parent_id: 2cbe47afc1374a8fb88a7c8fe9bbf91d created_time: 2022-01-17T17:25:22.034Z updated_time: 2022-01-27T15:27:11.137Z is_conflict: 0 latitude: 40.58059400 longitude: -105.11393084 altitude: 1668.9950 author:  source_url:  is_todo: 0 todo_due: 0 todo_completed: 0 source: joplin source_application: net.cozic.joplin-mobile application_data:  order: 1642440322027 user_created_time: 2022-01-17T17:25:22.034Z user_updated_time: 2022-01-27T15:27:11.137Z encryption_cipher_text:  encryption_applied: 0 markup_language: 1 is_shared: 0 share_id:  conflict_original_id:  master_key_id:  type_: 1</p>"},{"location":"Journal/journal_2022_01_26.md/","title":"Journal 2022 01 26.md","text":"<p>2022-01-26 Daily Notes</p> <p>Decent day technology wise.  * Figured out enough guizero to make the clock timer for the Raspberry Pi with the 4 inch screen.  * Made a journal that works in Jekyll * started fooling around with Joplin again. </p>"},{"location":"Journal/journal_2022_01_27.md/","title":"Journal 2022 01 27.md","text":"<p>2022-01-27 Daily Notes </p> <ul> <li>Thinking about a photo website using grandpaterry.xyz and WordPress. <ul> <li>Lots of themes and plug ins to use. </li> <li>Space might be an issue.</li> </ul> </li> <li>I really need to focus on something. Maybe back to the Codemy YouTube tkinter course. </li> </ul> <p>id: 186974eede4243cca6404619fc8e8ab2 parent_id: 2cbe47afc1374a8fb88a7c8fe9bbf91d created_time: 2022-01-27T15:37:32.577Z updated_time: 2022-01-27T20:33:26.719Z is_conflict: 0 latitude: 40.58059651 longitude: -105.11392971 altitude: 1594.3126 author:  source_url:  is_todo: 0 todo_due: 0 todo_completed: 0 source: joplin source_application: net.cozic.joplin-mobile application_data:  order: 1643297852572 user_created_time: 2022-01-27T15:37:32.577Z user_updated_time: 2022-01-27T20:33:26.719Z encryption_cipher_text:  encryption_applied: 0 markup_language: 1 is_shared: 0 share_id:  conflict_original_id:  master_key_id:  type_: 1</p>"},{"location":"Journal/journal_2022_01_28.md/","title":"Journal 2022 01 28.md","text":"<p>2022-01-28 Daily </p> <ul> <li>Liked the todo list flask thing I saw on YouTube yesterday. Actually looks a lot like Joplin in layout.</li> <li>So far I'm still feeling that I like the mobile Joplin apps better than the desktop. </li> <li>Very happy with the photo WordPress website on grandpaterry.xyz.</li> </ul> <p>id: eb7f31f2d1dd47c7992743746de442fd parent_id: 2cbe47afc1374a8fb88a7c8fe9bbf91d created_time: 2022-01-28T14:52:45.492Z updated_time: 2022-01-28T23:51:31.266Z is_conflict: 0 latitude: 40.58059651 longitude: -105.11392971 altitude: 1601.0512 author:  source_url:  is_todo: 0 todo_due: 0 todo_completed: 0 source: joplin source_application: net.cozic.joplin-mobile application_data:  order: 1643381565486 user_created_time: 2022-01-28T14:52:45.492Z user_updated_time: 2022-01-28T23:51:31.266Z encryption_cipher_text:  encryption_applied: 0 markup_language: 1 is_shared: 0 share_id:  conflict_original_id:  master_key_id:  type_: 1</p>"},{"location":"Journal/journal_2022_01_30.md/","title":"Journal 2022 01 30.md","text":"<p>2022-01-30 Daily </p> <p>I'm really pleased with the photo WordPress website I've built over the last two days. Just have a zillion photos (both Dad's and mine) to go through. I probably will get started and try to upload some small number every day. </p>"},{"location":"Journal/journal_2022_02_02.md/","title":"Journal 2022 02 02.md","text":"<p>2022-02-02 Daily</p>"},{"location":"Journal/journal_2022_02_02.md/#grandpaterryxyz","title":"grandpaterry.xyz","text":"<p>I've been pretty focused on grandpaterry.xyz and my photo uploading. It's in pretty good shape. I have a lot more pictures to go through and uploading and tagging is a pain. </p> <p>Today: * I started going through a folder * Picked out a dozen pictures to upload * Deleted all the pictures that I had sifted through * Uploaded and tagged them. </p>"},{"location":"Journal/journal_2022_02_02a.md/","title":"Journal 2022 02 02a.md","text":"<p>Day 1 Feb 2, 2022</p> <p>Installed on Xubuntu 21.10.  * sudo apt install gambas3 * sudo apt install gambas3-gb-gtk3-x11</p>"},{"location":"Python/2022-10-30-python-oop-book-chapter-2/","title":"Object oriented Python Chapter 2","text":"<p>To model a real world object in python, we need to decide what attributes the object has and what operations it will perform.</p> <p>Think of a class as a template from which an object is created.</p> <p>Code of a light switch written as a class. This class contains a single attribute and three methods.</p> <pre><code># OO_LightSwitch\nclass LightSwitch():\n    def __init__(self):\n            # initialization code goes in the __init__ method. A method always has at least one parameter which by convention is named self.\n            # Most other OOP languages call this initialization method a constructor.\n            self.switchIsOn = False\n    def turnOn(self):\n            # turn the switch on\n            self.switchIsOn = True\n    def turnOff(self):\n            # turn the switch off\n            self.switchIsOn = False\n\n# Create an instance of the LightSwitch class\n# using o to start the variable name of an object or instance is a way to remember that this variable is an object.\noLightSwitch = LightSwitch()\n</code></pre> <p>In a method any variable that does not start with self is a local variable and goes away when the method exits.</p>"},{"location":"Python/2022-10-30-python-oop-book-chapter-2/#oop","title":"oop","text":""},{"location":"Python/2022-10-30-python-oop-book-chapter-2/#python","title":"python","text":""},{"location":"Python/2023-02-15-atlas---tkinter-video-1-introduction/","title":"Atlas - Tkinter Video 1 Introduction","text":"<p>Simple app - miles to kilometers</p> <p>3 main components of tkinter app   Widgets - buttons, labels, entry boxes etc.   Layout - how are the widgets arranged   Style - fonts, colors, etc.</p> <p>The final program from video 1</p> <pre><code>import tkinter as tk\n# from tkinter import ttk\nimport ttkbootstrap as ttk\n\ndef convert():\n    mile_input = entry_int.get()\n    km_output = mile_input * 1.61\n    output_string.set(km_output)\n\n# Create main window\n# window = tk.Tk()\nwindow=ttk.Window(themename='darkly')\n\n# Give the window a title\nwindow.title('Demo')\n\n# Set the size of the window 'widthxheight'\nwindow.geometry('350x150')\n\n# Put a label for the title\ntitle_label = ttk.Label(master = window, text = 'Miles to kilometers', font = 'Calibri 24 bold')\ntitle_label.pack()\n\n# input field - entry field and button inside frame\ninput_frame = ttk.Frame(master = window)\n# Create an IntVar for the value of the entry widget\nentry_int = tk.IntVar()\nentry = ttk.Entry(master = input_frame, textvariable=entry_int)\nbutton = ttk.Button(master=input_frame, text = 'Convert', command=convert )\nentry.pack(side='left', padx=10)\nbutton.pack(side='left')\ninput_frame.pack(pady=10)\n\n# output\noutput_string = tk.StringVar()\noutput_label = ttk.Label(master=window, text='Output', font = 'Calibri 24', textvariable=output_string)\noutput_label.pack(pady=5)\n\n# run the mainloop\nwindow.mainloop()\n</code></pre>"},{"location":"Python/2023-02-15-atlas-tkinter-video-2-how-to-use-widgets/","title":"Atlas Tkinter Video 2 How to Use Widgets","text":"<p>Widgets are the building blocks of tkinter. Anything you see is a widget.</p> <p>Will use ttk widgets where possible.</p> <p>The mainloop updates the gui, and checks for events.</p> <p>Final Program from this video:</p> <pre><code>import tkinter as tk\nfrom tkinter import ttk\n\ndef button_func():\n    print ('a button was pressed')\n\ndef hello_func():\n    print('hello')\n\n# create the window, give it a title and set its size\nwindow = tk.Tk()\nwindow.title('Window and Widgets')\nwindow.geometry('800x600')\n\n# ttk widgets\nlabel = ttk.Label(master=window, text='This is a test')\nlabel.pack()\n\n# Create a multiple line text input box\ntext = tk.Text(master = window)\n# pack default is to stack widgets in the window\ntext.pack()\n\n# Single line entry widget\nentry = ttk.Entry(master=window)\nentry.pack()\n\nlabel2 = ttk.Label(master=window, text='my label')\nlabel2.pack()\n\n# ttk Button\nbutton = ttk.Button(master=window, text='A button', command=button_func)\nbutton.pack()\n\nbutton2 = ttk.Button(master=window, text='Hello', command=hello_func)\nbutton2.pack()\n\n# the event loop\nwindow.mainloop()\n</code></pre>"},{"location":"Python/Chapter2/","title":"Object oriented Python Chapter 2","text":"<p>To model a real world object in python, we need to decide what attributes the object has and what operations it will perform.</p> <p>Think of a class as a template from which an object is created.</p> <p>Code of a light switch written as a class. This class contains a single attribute and three methods.</p> <pre><code># OO_LightSwitch\nclass LightSwitch():\n    def __init__(self):\n            # initialization code goes in the __init__ method. A method always has at least one parameter which by convention is named self.\n            # Most other OOP languages call this initialization method a constructor.\n            self.switchIsOn = False\n    def turnOn(self):\n            # turn the switch on\n            self.switchIsOn = True\n    def turnOff(self):\n            # turn the switch off\n            self.switchIsOn = False\n\n# Create an instance of the LightSwitch class\n# using o to start the variable name of an object or instance is a way to remember that this variable is an object.\noLightSwitch = LightSwitch()\n</code></pre> <p>In a method any variable that does not start with self is a local variable and goes away when the method exits. Variables that begin with self are instance variables. These are usually initialized in the init method. All instances of an object get their own copy of the instance variables (self.switchIsOn) in the LightSwitch class. Code of a class can be in the same program as the main program or you can put it in a separate file and import it into the main program.</p> <pre><code># File: OO_LightSwitch_with_Test_Code.py\n# OO_LightSwitch\nclass LightSwitch():\n    def __init__(self):\n        self.switchIsOn = False\n    def turnOn(self):\n        # turn the switch on\n        self.switchIsOn = True\n    def turnOff(self):\n        # turn the switch off\n        self.switchIsOn = False\n    def show(self):\n      # added for testing\n      print(self.switchIsOn)\n\n# Main code\noLightSwitch = LightSwitch()\n# create a LightSwitch object\n# Calls to methods\noLightSwitch.show()\noLightSwitch.turnOn()\noLightSwitch.show()\noLightSwitch.turnOff()\noLightSwitch.show()\noLightSwitch.turnOn()\noLightSwitch.show()\n</code></pre> <p>You can instantiate as many objects as you want from a single class. <code>oLightSwitch2 = LightSwitch()</code></p>"},{"location":"Python/Chapter2/#building-a-slightly-more-complicated-class","title":"Building a Slightly More Complicated Class.","text":""},{"location":"Python/Codemy_tkinter_Video4.md/","title":"Codemy tkinter Video4.md","text":"<p>Python Virtual Environment</p>"},{"location":"Python/Codemy_tkinter_Video4.md/#video-4","title":"Video 4","text":""},{"location":"Python/Codemy_tkinter_Video4.md/#create-a-directory-for-tkinter-projects","title":"Create a Directory For Tkinter Projects","text":"<p>/home/terry/Sync/codemy.com/tkinter</p>"},{"location":"Python/Codemy_tkinter_Video4.md/#create-a-virtual-environment","title":"Create a Virtual Environment","text":"<p>A virtual environment is like a walled garden. Stuff that gets installed here doesn't affect the rest of the computer. He always creates a virtual environment.</p> <p>Initialize it</p> <pre><code>python -m venv name_of_virtual_environment`\n\n# Activate it:\n\nsource name_of_virtual_environment/bin/activate\n\n# Should then show the name of the virtual environment inside parentheses above the command prompt. \n\n# Deactivate it:\n\ndeactivate\n</code></pre>"},{"location":"Python/Codemy_tkinter_Video5.md/","title":"Codemy tkinter Video5.md","text":"<p>TkinterBasic Template</p>"},{"location":"Python/Codemy_tkinter_Video5.md/#video-5-hello-world","title":"Video 5 Hello World!","text":""},{"location":"Python/Codemy_tkinter_Video5.md/#create-a-python-file","title":"Create a Python File","text":"<p>From the command line he put the file at the same level as the virt directory. Make sure you save it with the .py extension. In this case hello.py.</p> <pre><code># first import the tkinter module\nfrom tkinter import *\n\n# Create instance of tkinter. Doesn't have to be root, any valid python\n# variable name. But it's the root window so that's the convention\nroot = Tk()\n\n# Window title\nroot.title(\"Hello World!\")\n\n# Set the size of our window\nroot.geometry(\"400x400\")\n\n\n# This goes at the bottom of the program and creates the event loop.\nroot.mainloop()\n</code></pre>"},{"location":"Python/Invent_Your_Own_Computer_Games_with_Python/","title":"Invent Your Own Computer Games with Python","text":""},{"location":"Python/Object_Oriented_Python/","title":"Object Oriented Python","text":""},{"location":"Python/Object_Oriented_Python/#introduction","title":"Introduction","text":"<ul> <li> <p>The OOP paradigm gives programmers an efficient way to combine code and data into cohesive units that are often highly reusable.</p> </li> <li> <p>Even though PEP 8 Style Guide for Python Code recommends snake_case, he uses camelCase.</p> </li> <li> <p>He created a package of pygame widgets called pygwidgets which will be used later.</p> </li> <li> <p>Downloaded all code from book in /home/terry/github/Object-Oriented-Python</p> </li> <li> <p>He uses and suggests Pycharm Community Edition</p> </li> <li> <p>please see my YouTube video \u201cDebugging Python 3 with PyCharm\u201d at   https://www.youtube.com/watch?v=cxAOSQQwDJ4&amp;t=43s/.</p> </li> </ul>"},{"location":"Python/Object_Oriented_Python/#chapter-1-5626","title":"Chapter 1 - 56:26","text":""},{"location":"Python/guizero_images.md/","title":"Guizero images.md","text":"<p>Images</p> <pre><code>cat = Picture(app, image=\"tabitha.png\")\n</code></pre>"},{"location":"Python/guizero_text_widget.md/","title":"Guizero text widget.md","text":"<p>Text Widget</p> <pre><code>from guizero import App, Text\napp = App(title=\"Hello World\")\nmessage = Text(app, text=\"Welcome to the app\")\napp.display()\n</code></pre>"},{"location":"Python/guizero_text_widget.md/#change-font-and-size","title":"Change Font and Size","text":"<pre><code>message.font = \"Times New Roman\"\nmessage.text_size = 50\n</code></pre>"},{"location":"Python/guizero_window_background.md/","title":"Guizero window background.md","text":"<p>Window Background Color</p> <pre><code>from guizero import App\n\napp = App(\"title\")\napp.bg = \"yellow\"\n# or app.bg = \"#FBFBD0\"\n# or app.bg = (251, 251, 208)\n\napp.display()\n</code></pre>"},{"location":"Python/guizero_window_title.md/","title":"Guizero window title.md","text":"<p>Window Title</p> <pre><code>from guizero import App\n# title= isn't necessary\n# app = App(\"Hello World\") also works\napp = App(title=\"Hello World\")\napp.display()\n</code></pre>"},{"location":"Python/pygame_kcc_vid1.md/","title":"Pygame kcc vid1.md","text":"<p>KCCVid1</p>"},{"location":"Python/pygame_kcc_vid1.md/#kids-can-code-video-1","title":"Kids Can Code Video 1","text":"<p>All games have a basic game loop: * process input or events (like mouse moves, button clicks) * update the game * draw the game on the screen (render) * timer - control how fast this happens - fps (frames per second)</p>"},{"location":"Python/pygame_kcc_vid1.md/#first-program","title":"First Program","text":"<ul> <li>Template in Dropbox/Python/pygame/kccvid1.py</li> </ul> <pre><code># Pygame template - skeleton for a new pygame project\nimport pygame\nimport random\n\n# Set constants for window size, FPS, colors\nWIDTH = 360\nHEIGHT = 480\nFPS = 30\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\n\n# Initialize pygame and mixer for sound\npygame.init()\npygame.mixer.init()\n\n# Now create the screen\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"My Game\")\n\n# Create clock variable to use later for FPS\nclock = pygame.time.Clock()\n\n# Game Loop\nrunning = True\nwhile running:\n    # keep loop running at the right speed\n    clock.tick(FPS)\n    # Process input (events)\n    # Check for player closing window\n    # pygame queues events and we access them\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    # Update\n\n    # Draw / Render\n    screen.fill(BLACK)\n    # *after* drawing everything, flip the display\n    pygame.display.flip()\n\n# Once loop ends.\npygame.quit()\n</code></pre> <ul> <li>Drawing on the screen slowest part of pygame program</li> <li>Use double buffering i.e. while one frame is displaying, draw the next one. You don't draw live. After drawing everything:</li> <li><code>pygame.display.flip()</code></li> </ul>"},{"location":"Python/pygame_kcc_vid2.md/","title":"Pygame kcc vid2.md","text":"<p>KCCVid2</p>"},{"location":"Python/pygame_kcc_vid2.md/#working-with-sprites","title":"Working with Sprites","text":""},{"location":"Python/pygame_kcc_vid2.md/#sprites-are-the-things-you-move-around-the-screen","title":"Sprites are the things you move around the screen.","text":"<ul> <li>Moving sprites goes in the update section of the game loop</li> <li>pygame has sprite groups to simplify managing sprites.  <pre><code># Before the game loop create the sprite group\nall_sprites = pygame.sprite.Group()\n#  in the update section of the game loop\nall_sprites.update()\n# in the draw section of the game loop\nall_sprites.draw(screen)\n</code></pre></li> </ul>"},{"location":"Python/tkinter_grid.md/","title":"Tkinter grid.md","text":"<p>Tkinter Grid</p>"},{"location":"Python/tkinter_grid.md/#tkinter-grid-system","title":"Tkinter Grid System","text":"<p>Typical grid - rows and columns. Both are numbered from zero.  <pre><code>    # Create two label widgets\n    myLabel1 = tk.Label(root, text=\"Line 1\")\n    myLabel2 = tk.Label(root, text=\"Line 2\")\n\n    myLabel1.grid(row=0, column=0)\n    myLabel2.grid(row=1, column=0)\n</code></pre> The rows and columns are relative to each other if you put myLabel2 into column 1 or column 5 it's in the column that is actually used.</p>"},{"location":"Python/tkinter_images.md/","title":"Tkinter images.md","text":"<p>Tkinter Images </p>"},{"location":"Python/tkinter_images.md/#tkinter-images","title":"Tkinter Images","text":"<p>Working sample, image is in same folder as program <pre><code>    # import tkinter module\n    import tkinter as tk\n    from PIL import ImageTk, Image\n    # Create a tkinter instance root is customary but can name it anything.\n    root = tk.Tk()\n\n    # Put a caption or title on our window\n    root.title(\"Hello World!\")\n\n    # Set the size of the window\n    root.geometry(\"400x400\")\n\n    my_img = ImageTk.PhotoImage(Image.open(\"OldGrandpa.png\"))\n    my_label = tk.Label(image = my_img)\n    my_label.pack(pady = 30)\n\n    button_quit = tk.Button(root, text=\"Quit Program\", command = root.quit)\n    button_quit.pack()\n    # And the main event loop\n    root.mainloop()\n</code></pre></p> <p>id: 559f048b59864b7e99ade3fad365ba62 parent_id: 45dcd20a1e85419cb203675f33b008a1 created_time: 2021-02-14T03:26:09.657Z updated_time: 2022-01-27T05:10:52.556Z is_conflict: 0 latitude: 0.00000000 longitude: 0.00000000 altitude: 0.0000 author:  source_url:  is_todo: 0 todo_due: 0 todo_completed: 0 source: joplin-desktop source_application: net.cozic.joplin-desktop application_data:  order: 0 user_created_time: 2021-02-14T03:26:09.657Z user_updated_time: 2022-01-27T05:10:52.556Z encryption_cipher_text:  encryption_applied: 0 markup_language: 1 is_shared: 0 share_id:  conflict_original_id:  master_key_id:  type_: 1</p>"},{"location":"Python/tkinter_labels.md/","title":"Tkinter labels.md","text":"<p>Tkinter Labels</p>"},{"location":"Python/tkinter_labels.md/#codemy-video-6-labels","title":"Codemy Video 6 Labels","text":"<p>Labels put text on the tkinter screen.</p> <p>Pretty much everything in tkinter is a widget. Putting a widget on the screen is a 2 step process. You create the widget and then you put it on the screen with pack, grid, etc. Pack is the easiest, but doesn't give you much control. He uses the grid system mostly. </p> <pre><code># first import the tkinter module\nfrom tkinter import *\n\n# Create instance of tkinter. Doesn't have to be root, any valid python\n# variable name. But it's the root window.\nroot = Tk()\n\n# Window title\nroot.title(\"Hello World!\")\n\n# Set the size of our window\nroot.geometry(\"400x400\")\n\n# Create a basic label\nmy_label = Label(root, text=\"Hello World!\")\nmy_label.pack()\nmy_label2 = Label(root, text=\"Second Label!\")\nmy_label2.pack()\n\n# This goes at the bottom of the program and creates the event loop.\nroot.mainloop()\n</code></pre>"},{"location":"Python/Codemy_SQLite3/Create_connection/","title":"Using SQLite3 Databases with Python","text":""},{"location":"Python/Codemy_SQLite3/Create_connection/#create-sqlite-connection-codemycom-video-4","title":"Create SQLite Connection Codemy.com Video 4","text":"<p>SQLite comes with Python. </p>"},{"location":"Python/Codemy_SQLite3/Create_connection/#this-code-creates-the-database","title":"This code creates the Database:","text":"<pre><code># import sqlite3 object\nimport sqlite3\n\n# Create a connection called conn and create a database called customer.db\n# if db already exists this will just connect to it. \nconn = sqlite3.connect('customer.db')\n\n# You can create an in memory database that only lasts the duration of your\n# program and isn't saved. Use ':memory:' as the argument.\n\n# conn = sqlite3.connect(':memory:')\n</code></pre>"},{"location":"Python/Codemy_SQLite3/Create_connection/#this-creates-a-database-table","title":"This Creates a Database Table","text":"<p>Tables contain all the data in a database. Pretty much like a spreadsheet, tables and columns. </p> <pre><code># import sqlite3 object\nimport sqlite3\n\n# Create a connection called conn and create a database called customer.db\n# if db already exists this will just connect to it. \nconn = sqlite3.connect('customer.db')\n\n# Most activities require a cursor. Build it once, call it anything\nc = conn.cursor()\n\n# Now create the table using a docstring\n# sqlite3 only has 5 datatypes. NULL, INTEGER, REAL, TEXT, BLOB\n# NULL is does it exist, BLOB for things like videos, images, mp3, etc. \nc.execute(\"\"\"CREATE TABLE customers (\n    first_name text,\n    last_name text,\n    email text\n)\n\n    \"\"\")\n\n# To actually create the table have to commit our connection\nconn.commit()\n\n# Close the connection\nconn.close()\n</code></pre>"},{"location":"Python/Codemy_SQLite3/ManageTables/","title":"Adding Data in SQLite3","text":""},{"location":"Python/Codemy_SQLite3/ManageTables/#add-one-record-to-a-table-video-6","title":"Add One Record to a table - Video 6","text":"<pre><code>import sqlite3\n\n# Connect to the database\nconn = sqlite3.connect('customer.db')\n\n# Create a Cursor\nc = conn.cursor\n\n# These correspond to the fields we added to our table, first_name,\n# last_name, email\n\nc.execute(\"INSERT INTO customers VALUES ('John', 'Elder', 'john@codemy.com')\")\nc.execute(\"INSERT INTO customers VALUES ('Tim', 'Smith', 'tim@codemy.com')\")\nc.execute(\"INSERT INTO customers VALUES ('Mary', 'Brown', 'mary@codemy.com')\")\n\n\n# Commit our command\nconn.commit()\n\n# Close our connection\nconn.close()\n</code></pre>"},{"location":"Python/Codemy_SQLite3/ManageTables/#insert-many-records-into-the-database-video-7","title":"Insert many records into the database - Video 7","text":"<pre><code>import sqlite3\n\n# Connect to the database\nconn = sqlite3.connect('customer.db')\n\n# Create a Cursor\nc = conn.cursor\n\n# These correspond to the fields we added to our table, first_name,\n# last_name, email\n\nmany_customers = [('Wes', 'Brown', 'wes@brown.com'), \n    ('Steph', 'Kuewa', 'steph@kuewa.com'), \n    ('Dan', 'Pas', 'dan@pas.com'),\n]\n\nc.executemany(\"INSERT INTO customers VALUES (?,?,?)\", many_customers)\n\n# Commit our command\nconn.commit()\n\n# Close our connection\nconn.close()\n</code></pre>"},{"location":"WebDevelopment/HeadFirst_HTML_and_CSS_Notes/","title":"How to Use a Head First Book to study","text":"<ul> <li>Slow down. The more you understand, the less you have to memorize</li> <li>Do the exercises. Write your own notes. Use a pencil. Physical activity while learning can increase learning.</li> <li>Read the \"There Are No Dumb Questions\". They're part of the core content.</li> <li>Drink water. Lots of it. Dehydration decreases cognitive function</li> <li>Listen to your brain. If you're starting to skim or forget what you just read, it's time for a break. </li> <li>Create something. Go beyond the book.</li> </ul>"},{"location":"WebDevelopment/HeadFirst_HTML_and_CSS_Notes/#chapter-1-getting-to-know-html","title":"Chapter 1 - Getting to know HTML","text":""},{"location":"WebDevelopment/HeadFirst_HTML_and_CSS_Notes/#the-language-of-the-web","title":"The Language of the Web","text":"<ul> <li>6 Levels of headings <code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code> with h1 being the largest</li> <li>Typically headings beyond h3</li> <li>Comments <code>&lt;!-- Here's the beginning of the lounge content --&gt;</code></li> <li></li> </ul>"},{"location":"WebDevelopment/html_css/","title":"HTML/CSS John Smilga Udemy","text":"<p>This is simply a place to write notes and show examples of information learned from this course. The projects that are built during the course will be in separate          files / directories. </p>"},{"location":"WebDevelopment/html_css/#video-4","title":"Video 4","text":"<ul> <li>HTML - Hyper Text Markup Language</li> <li>Responsible for Webpage Structure</li> <li>example of html: <code>&lt;element&gt;content&lt;/element&gt;</code></li> <li>header example: <code>&lt;h1&gt;Header Content&lt;/h1&gt;</code>     *Header Content </li> <li>paragraph example: <code>&lt;p&gt;paragraph content&lt;/p&gt;</code></li> </ul> <p>paragraph content</p>"},{"location":"WebDevelopment/wa4e_notes/","title":"Web Applications for Everyone","text":""},{"location":"WebDevelopment/wa4e_notes/#dr-chuck","title":"Dr. Chuck","text":""},{"location":"WebDevelopment/wa4e_notes/#video-1","title":"Video 1","text":"<ul> <li> <p>Request response cycles are foundation of all web applications.</p> </li> <li> <p>This course is the most basic way to develop web applications. </p> </li> <li> <p>End User &lt;--&gt; Browser (HTML, CSS, DOM, JavaScript, Jquery)  &lt;--&gt; Web Server (Application Software e.g. php) &lt;--&gt; Database / Database Model &lt;--&gt; Database Tools (i.e. phpMyAdmin)</p> </li> <li> <p>HTTP - Hypertext Transfer Protocol - very simple, can even be done by hand. Connect to a server, navigate to a document, send the document back. Not practical to do manually HTTP 2.0 and later. Doesn't work for all webservers.</p> </li> <li> <p>URL Uniform Resource Locator 3 components </p> </li> <li>http:// is the protocol - how will the document be transferred</li> <li>www.dr-chuck.com is the name of the webhost - where is the document located</li> <li> <p>page1.htm - which document do we send back</p> </li> <li> <p>By default web servers communicate on port 80</p> </li> </ul>"},{"location":"WebDevelopment/wa4e_notes/#video-2","title":"Video 2","text":"<ul> <li>Browser Developer Mod</li> <li>Network Tab shows requests and responses</li> </ul>"},{"location":"WebDevelopment/wa4e_notes/#video-3-html-part-1","title":"Video 3 - HTML Part 1","text":"<ul> <li>Built with tags</li> <li>Browsers tolerate a lot of broken HTML</li> <li>Standards set by World Wide Web Consortium W3C</li> </ul>"},{"location":"WebDevelopment/wa4e_notes/#video-4-html-part-2","title":"Video 4 - HTML Part 2","text":"<ul> <li> <p><code>&lt;html&gt; &lt;/html&gt;</code> outer tags</p> </li> <li> <p><code>&lt;head&gt; &lt;/head&gt;</code> non printing info nested in html tags</p> </li> <li>title of page</li> <li> <p>links to css and javascript</p> </li> <li> <p><code>&lt;body&gt; &lt;/body&gt;</code> page content, nested in html tags after head tags</p> </li> <li> <p>index.html, index.htm, index.php, etc are usual starting web pages</p> </li> <li> <p>use anchor tags to point between web pages <code>&lt;a&gt; &lt;/a&gt;</code></p> </li> <li> <p>Absolute references <code>&lt;a href=\"http://www.dr-chuck.com/page2.htm\"&gt;Second Page&lt;/a&gt;</code></p> </li> <li> <p>Relative references <code>&lt;a href=\"page1.htm\"&gt;First Page&lt;/a&gt;</code></p> </li> <li> <p>white space and carriage returns usually ignored by browser (pre tag can override)</p> </li> <li> <p>most tags have both beginning and ending tags</p> </li> <li> <p>some like image are self closing</p> </li> <li> <p>opening tags can have attributes <code>&lt;img src='somepicture.png'&gt;</code></p> </li> <li> <p>special characters for show characters used by html - </p> </li> <li>&amp;lt - less than</li> <li>&amp;gt - greater than</li> <li>&amp;amp - ampersand</li> <li> <p>Those are main 3, but there are miscellaneous - card suits, money characters, etc.</p> </li> <li> <p>comments: <code>&lt;!-- comment syntax --&gt;</code></p> </li> <li> <p>lists and unordered lists:</p> </li> <li> <p><code>&lt;ul&gt;&lt;li&gt;item 1&lt;/li&gt;&lt;li&gt;item2&lt;/li&gt;&lt;/ul&gt;</code></p> </li> <li> <p><code>&lt;ol&gt;&lt;li&gt;item 1&lt;/li&gt;&lt;li&gt;item2&lt;/li&gt;&lt;/ol&gt;</code></p> </li> <li> <p>tables - Laid out logically - table, tr (table row), th(table header), td(table data), </p> </li> </ul>"},{"location":"django/dennis_ivy_todo/","title":"Dennis ivy todo","text":""},{"location":"django/dennis_ivy_todo/#dennis-ivy-django-todo-list","title":"Dennis Ivy Django ToDo List","text":""},{"location":"django/dennis_ivy_todo/#march-12-2021-youtube","title":"March 12, 2021 - YouTube","text":"<p>My intention is that this be a list of the steps and that the detail will be in the program files (hopefully well commented) in this Django project. </p>"},{"location":"django/dennis_ivy_todo/#setup-process","title":"Setup Process","text":"<ul> <li>Created dennisivy/todo directory</li> <li>Go to that directory</li> </ul> <pre><code>    cd /home/terrystudent/todo\n</code></pre> <ul> <li>Created virtual environment called .venv (so it's hidden)</li> <li>Activated virtual environment .venv</li> <li>Install django:</li> </ul> <pre><code>    python -m pip install django\n</code></pre> <ul> <li>He's on 3.0.2 and I just installed 4.0.6</li> <li>Create the project:</li> </ul> <pre><code>    django-admin startproject todo_list\n</code></pre> <ul> <li>Create the app</li> </ul> <pre><code>    python manage.py startapp base\n</code></pre>"},{"location":"django/dennis_ivy_todo/#first-steps","title":"First Steps","text":"<ul> <li>Connect the app and project together - see comment and code in dennisivy/todo/todo_list/settings.py</li> <li>Create a urls.py file in the app dennisivy/todo/base/urls.py</li> <li></li> </ul>"},{"location":"django/Codemy%20CRUD%20App/Codemy%20Django%20CRM%20Course%20February%202023/","title":"Codemy Django CRM Course February 2023","text":"<p>He's using mysql so some of this stuff is unnecessary</p> <ul> <li>Create project directory</li> <li>Create and activate virtual environment</li> <li>Install Django, mysql, mysql-connector-python</li> <li>Download and install mysql community for windows. </li> <li>Create project dcrm</li> <li>Create app website and add to settings.py</li> <li>Changes in settings.py because he's using mysql</li> <li></li> </ul>"},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%201/","title":"Codemy Simple Blog Video 1","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%201/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%201/#length-1810","title":"Length 18:10","text":"<p>So my plan is to watch the video and take notes - not code but flow, bash instructions, etc. Then go back through the same video and write the code.</p>"},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%201/#setup-initial-urls-views-and-templates","title":"Setup initial urls, views, and templates","text":"<ul> <li>Make directory called simpleblog</li> <li>Create a virtual environment called virt in simpleblog</li> <li>Activate virtual environment</li> <li>Install DJango using pip - he got django 3.0.5. I'm on 4.2.1.</li> <li>Create Django project called ablog <code>django-admin startproject ablog</code></li> <li>In the ablog directory <code>python manage.py migrate</code>  to get rid of error messages and set up admin route.</li> <li><code>python manage.py runserver</code> to make sure the install went OK. localhost:8000 is the default.</li> <li><code>python manage.py createsuperuser</code> to create the administrative user. Used admin for name, and put in an email and password. I used my hotmail email and password jacqui.</li> <li><code>python manage.py runserver</code> and go to localhost:8000/admin and login, then click on the admin user and put in actual first and last name.</li> <li><code>python manage.py startapp theblog</code> to create the app under the project.</li> <li>open the top ablog folder in your text editor</li> <li>Then in ablog/ablog/settings.py add theblog to the INSTALLED_APPS list.</li> <li>In ablog/ablog/urls.py add include to the second import statement, and import include and add theblog/urls.py to the urlpatterns list. This gives our app its own urls.py file.</li> <li>Now create ablog/theblog/urls.py and put a home page view in it. Also import the views.py file from ablog/theblog.</li> <li>In theblog/views.py create a function to define the home page.</li> <li>in ablog/theblog create a templates folder and put home.html in it.</li> <li><code>python manage.py runserver</code> to ensure that our new home page shows up at localhost:8000</li> </ul>"},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%201/#now-start-working-on-database","title":"Now start working on database","text":"<ul> <li>In ablog/theblog/models.py import the User so we can use our admin user, and create our data model and its fields. This is a class based model.</li> <li>Fields are title, author (set up so if author is deleted, all the associated blog posts go away), and body.</li> <li>And create a function <code>__str__</code>  function to show the title and the author on the admin page.</li> <li>in ablog/theblog/admin.py import and register the Post class.</li> <li>makemigrations and migrate to get the new database to work.</li> <li>Then added two blog posts using the admin page.</li> </ul>"},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%2011/","title":"Codemy Simple Blog Video 11","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%2011/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%2011/#escape-html-for-blog-posts","title":"Escape HTML for Blog Posts","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%2011/#length-0739","title":"Length 07:39","text":"<p>So my plan is to watch the video and take notes - not code but flow, bash instructions, etc. Then go back through the same video and write the code. I'm capturing more code in these notes and I think it's working well.</p> <ul> <li>By default Django gets rid of html formatting, so no matter how you format your input, it just all gets smushed together.</li> <li>So at the bottom of article_detail.html in the body variable <code>{{ post.body|safe }}</code></li> <li>Then you can include html in your blog post bodies. Like Headers, paragraphs, lists, etc. </li> <li>Add <code>|safe</code> after the slice on the snippet we're showing on the home page. Not a great way to do snippets, so he said we'll probably add a separate snippet field at some point. </li> </ul>"},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%2012/","title":"Codemy Simple Blog Video 12","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%2012/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%2012/#add-blog-categories","title":"Add Blog Categories","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%2012/#length-2010","title":"Length 20:10","text":"<p>So my plan is to watch the video and take notes - not code but flow, bash instructions, etc. Then go back through the same video and write the code. I'm capturing more code in these notes and I think it's working well.</p> <ul> <li>Put a new class in models.py - he placed it before class Post <pre><code>class Category(models.Model):\n    name = models.CharField(max_length=255)\n    def __str__(self):\n        return self.name\n    def get_absolute_url(self):\n        return reverse('home')\n</code></pre></li> <li>Add to end of class Post in models.py: <pre><code>category = models.CharField(max_length=255, default='coding')\n</code></pre></li> <li>Do makemigrations and migrate</li> <li>In theblog/admin.py import Category after Post, and register Category just like Post is registered.</li> <li>Using admin page he added coding, sports and entertainment to categorys</li> <li>In theblog/forms.py, put 'category' between author and body on fields line</li> <li>Then in widgets after author, copy author line and change author to category</li> <li>Could hard code your categories in forms.py by creating a list <code>choices = [('coding', 'coding'), ('sports', 'sports'), ('entertainment', entertainment')</code></li> <li>Then in widgets first thing in 'category': forms.Select(choices = choices)</li> <li>Not doing that in this case - so still in forms.py add Category to the from .models import</li> <li>Then after the import statements do a query of the Category class <pre><code>choices = Category.objects.all().values_list('name','name')\nchoice_list = []\nfor item in choices:\n    choice_list.append(item)\n\n# then in widgets:\n'category': forms.Select(choices=choice_list, attrs......)\n</code></pre></li> <li>Now create a page to manage categories rather than having to use the admin page.</li> <li>In views.py <code>from .models import Post, Category</code> and add a class: <pre><code>class AddCategoryView(CreateView):\n    model = Category\n    template_name = 'add_category.html'\n    fields = '__all__'\n</code></pre></li> <li>Create new template add_category.html</li> <li>Copy contents of add_post.html and change title to Create a New Category, h1 to Add Category and button text to Add Category.</li> <li>In urls.py import AddCategoryView and new path after add_category <code>path('add_category/', AddCategoryView.as_view(), name='add_category'</code></li> <li>In base.html copy add_post li block, changing url to 'add_category' and text to Add Category</li> <li>In home.html in the for loop after post.title add a line <code>- {{ post.category }}</code> </li> <li>Need to add an edit category page and a way to just list posts with a certain category.</li> </ul>"},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%202/","title":"Codemy Simple Blog Video 2","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%202/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%202/#length-1946","title":"Length 19:46","text":"<p>So my plan is to watch the video and take notes - not code but flow, bash instructions, etc. Then go back through the same video and write the code.</p>"},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%202/#blog-post-links-on-home-page","title":"Blog post links on home page","text":"<ul> <li>Import ListView and DetailView - generic list and detail forms included with Django.</li> <li>Change home view in ablog/theblog/views.py to a class based view.</li> <li>Pass the ListView to the HomeView class</li> <li>Then tell the class that the model we are using is Post (our only model)</li> <li>Then <code>template_name = 'home.html'</code> tells the class what template to use.</li> <li>In template home.html a for loop to loop through the object_list which seems to get passed automatically.</li> <li>Show the items in an unordered list.</li> <li>In ablog/theblog/views.py we have to import our  Post model.</li> <li>The url patterns also changes to a class, have to import HomeView from .views</li> <li>Anything in the model can be used in the template. e.g. email.</li> </ul>"},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%202/#detail-views","title":"Detail Views","text":"<ul> <li>Create article_details.html in templates.</li> <li>New class in ablog/theblog/views.py ArticleDetailView - pass it DetailView</li> <li>In urls.py import the ArticleDetailView and locate the entry in article/primary_key, name article-detail. </li> <li>In home.html put a tags around the post title and use a django link to article-detail (name of the url ) followed by post.pk for primary key.</li> <li>In article_details.html use post.title in h1 for page header, then name of author, then post.body</li> </ul>"},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%203/","title":"Codemy Simple Blog Video 3","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%203/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%203/#length-1950","title":"Length 19:50","text":"<p>So my plan is to watch the video and take notes - not code but flow, bash instructions, etc. Then go back through the same video and write the code.</p>"},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%203/#style-the-blog-using-bootstrap","title":"Style the blog using Bootstrap","text":"<ul> <li>Grabs version 4.4 starting template</li> <li>Create base.html in templates and paste the starting Bootstrap template into it</li> <li>In body of base.html before the javascript tags, add <code>{% block content %} and {% endblock %}</code>. This is where code for the individual web pages will go.</li> <li>In home.html first add <code>{% extends 'base.html' %}</code>, then add same tags as base.html - block content and endblock at top and bottom of the template.</li> <li>Check to see that bootstrap is working by making sure font, etc of home page is different.</li> <li>In base.html wrap block, endblock tags in a div with a class of container, and add a line break before the div.</li> <li>Make same changes as home.html in article_detail.html</li> <li>Uses button bootstrap classes to turn back link to a button.</li> <li>Grabs navbar from getbootstrap.com and pastes it after body tag in base.html. Changes navbar-light and bg-light to dark.</li> <li>Makes more changes to the navbar. Changes links, deletes search box, dropdown box. </li> <li>Uses block title tags to make title changeable in the template. So what's in base.html is the default title, but if we put block title tags with a different title in the webpage template, django will use that.</li> <li>Then he adds a title_tag to the database so the blogger can specify the title. Gives the field a default so the blogger doesn't have to specify unless they  want to. Have to do makemigrations, migrate. Change templates to pick up title_tag.</li> </ul>"},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%204/","title":"Codemy Simple Blog Video 4","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%204/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%204/#add-a-post-page","title":"Add a Post Page","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%204/#length-1913","title":"Length 19:13","text":"<p>So my plan is to watch the video and take notes - not code but flow, bash instructions, etc. Then go back through the same video and write the code.</p> <ul> <li>Whenever create a webpage in Django it's a three step process<ul> <li>Create a template</li> <li>Create a view</li> <li>Create a URL</li> </ul> </li> <li>Create add_post.html in templates and use same format as article_details.html</li> <li>In ablog/theblog/views.py import CreateView  <pre><code>class AddPostView(CreateView):\n    model = Post\n    template_name = 'add_post.html'\n    # This will put all the fields from the model on the page.\n    fields = '__all__'\n    # Or to just include certain fields:\n    fields = ('title', 'body')\n</code></pre></li> <li>In ablog/theblog/urls.py:<ul> <li><code>from .views import ....., AddPostView</code></li> <li>in urlpatterns - <code>path('add_post/', AddPostView.as_view(), name='add_post'),</code></li> </ul> </li> <li>In base.html set the second link (called Link which I think I deleted) to <code>href=\"{% url 'add_post'%}\"&gt;Add Post&lt;/a&gt;</code></li> <li>Then in add_post.html: <pre><code>&lt;form method=\"POST\"&gt;\n    # csrf_token is a security thing that all frameworks use.\n    {% csrf_token %}\n    {{ form.as_p }}\n    &lt;button class=\"btn btn-secondary\"&gt;Post&lt;/button&gt;\n</code></pre></li> <li>In ablog/theblog/models.py create another method under class Post that tells django what to do when you click the post button from above: <pre><code>from django.urls import reverse\n...\ndef get_absolute_url(self):\n    return reverse('article-detail', args=(str(self.id)))\n    # Or if you want to return to the home page:\n    return reverse('home')\n</code></pre></li> <li>Change the title_tag on the add_post.html template to Create a New Blog Post</li> <li>He deleted the default from the title_tag field in models.py because it's not needed anymore.</li> <li></li> </ul>"},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%205/","title":"Codemy Simple Blog Video 5","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%205/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%205/#style-django-forms-with-bootstrap","title":"Style Django Forms With Bootstrap","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%205/#length-1545","title":"Length 15:45","text":"<p>So my plan is to watch the video and take notes - not code but flow, bash instructions, etc. Then go back through the same video and write the code.</p> <ul> <li>In add_post.html we've got {{ form.as_p }}. That means that every field in our form is surrounded by p tags.</li> <li>You can also do {{ form.as_ul }} which puts in an unordered list and every field has a dot in front of it</li> <li>And {{ form.as_table }}</li> </ul> <p>So we have to create a Django form to do this.  - Create new file ablog/theblog/forms.py</p> <pre><code>from django import forms\n# Need to import our model.\nfrom .models import Post\n# ModelForm lets us use fields from our model.\nclass PostForm(forms.ModelForm):\n    class Meta:\n        model = Post\n        fields = ('title', 'title_tag', 'author', 'body')\n        # Create widgets dictionary\n        widgets = {\n            # Change the attributes of the TextInput fields. form-control is a bootstrap class\n            'title': forms.TextInput(attrs={'class': 'form-control'}),\n            'title_tag': forms.TextInput(attrs={'class': 'form-control'}),\n            'author': forms.Select(attrs={'class': 'form-control'}),\n            'body': forms.Textarea(attrs={'class': 'form-control'}),\n        }\n</code></pre> <ul> <li>Have to surround the django form in add_post.html in a div with the class='form-group' </li> <li>In views.py we now have to import the form we just created. <code>from .forms import PostForm</code></li> <li>In views.py in class AddPostView, after model=Post, add <code>form_class = PostForm</code> and comment out or delete <code>fields = __all__</code> because we designated which fields we wanted in PostForm</li> <li>Could add other stuff in our PostForm - e.g. to add a placeholder to the title field just add more stuff to the appropriate dictionary: <pre><code>            'title': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Blog Post Title Goes Here'}), \n</code></pre></li> </ul>"},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%206/","title":"Codemy Simple Blog Video 6","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%206/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%206/#update-and-edit-blog-posts","title":"Update and Edit Blog Posts","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%206/#length-1452","title":"Length 14:52","text":"<p>So my plan is to watch the video and take notes - not code but flow, bash instructions, etc. Then go back through the same video and write the code.</p> <ul> <li>Create update_post.html in templates</li> <li>Paste in add_post.html, change title to Edit Blog Post and h1 Update Post, change button to say update</li> <li>Import UpdateView in views.py</li> <li>Add new class to views.py <pre><code>class UpdatePostView(UpdateView):\n    model = Post\n    template_name = 'update_post.html'\n    fields = ['title', 'title_tag', 'body']\n</code></pre></li> <li>import UpdatePostView in urls.py</li> <li>add to urlpatterns in urls.py: <pre><code>path('article/edit/&lt;int:pk&gt;', UpdatePostView.as_view(), name='update_post'),\n</code></pre></li> <li>In home.html add a link to edit each entry <pre><code>post.author.last_name }} - &lt;small&gt;&lt;a href=\"{% url 'update_post' post.pk %}\"&gt;(Edit)&lt;/a&gt;&lt;/small&gt;&lt;br&gt;\n</code></pre></li> <li>In article_detail add the same edit link inside the small tags where the authors name is: <pre><code>post.authorl.last_name }} - &lt;a href=\"{% url 'update_post' post.pk %}\"&gt;(Edit)&lt;/a&gt;\n</code></pre></li> <li>In forms.py copy PostForm class and rename it to EditForm, remove field author from fields and comment out author in widgets. </li> <li>In views.py import EditForm after PostForm, then in class UpdatePostView add <code>form_class = EditForm</code>, and comment out the fields line. </li> </ul>"},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%207/","title":"Codemy Simple Blog Video 7","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%207/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%207/#delete-blog-posts","title":"Delete Blog Posts","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%207/#length-1156","title":"Length 11:56","text":"<p>So my plan is to watch the video and take notes - not code but flow, bash instructions, etc. Then go back through the same video and write the code.</p> <ul> <li>In views.py add DeleteView to the built in views we're importing</li> <li>We also need to: <code>from django.urls import reverse_lazy</code></li> <li>Then another class in views.py <pre><code>class DeletePostView(DeleteView):\n    model = Post\n    template_name = 'delete_post.html'\n    success_url = reverse_lazy('home')\n</code></pre></li> <li>Create delete_post.html in templates</li> <li>Copy update_post.html into delete_post.html</li> <li>Change title to Delete Blog Post and h1 to Delete Post</li> <li>Change the rest of the body: <pre><code>&lt;h3&gt;Delete: {{ post.title }}&lt;/h3&gt;\n\n&lt;br&gt;\n&lt;div class=\"form-group\"&gt;\n    &lt;form method=\"POST\"&gt;\n        {% csrf token %}\n        &lt;strong&gt;Are you sure?!&lt;/strong&gt;&lt;br&gt;&lt;br&gt;\n        &lt;button class=\"bth btn-secondary\"&gt;Delete Post!&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt; \n</code></pre></li> <li>In urls.py<ul> <li>add to import DeletePostView</li> <li><code>path('article/&lt;int:pk&gt;/remove', DeletePostview.as_view(), name='delete_post'),</code></li> </ul> </li> <li>In home.html after the edit link add a delete link: <code>&lt;a href=\"{% url 'delete_post' post.pk %}\"&gt;(Delete)&lt;/a&gt;</code></li> <li>Copy that same link tag to article_detail.html again right after the edit tag.</li> <li>To change the order of the home page list of blog entries so that the most recent one appears first, in views.py add to the HomeView class <code>ordering = ['-id']</code></li> <li>At this point we've got all the main features of the blog. </li> </ul>"},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%208/","title":"Codemy Simple Blog Video 8","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%208/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%208/#order-blog-posts-by-date","title":"Order Blog Posts by Date","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%208/#length-1334","title":"Length 13:34","text":"<p>So my plan is to watch the video and take notes - not code but flow, bash instructions, etc. Then go back through the same video and write the code.</p> <ul> <li>Primary key is automatically created by django when you create a database</li> <li>Add a date field to our model after body in the Post class. </li> <li>Import standard python date classes.</li> <li>auto_now_add=True adds the current date when we create a post <pre><code>from datetime import datetime, date\npost_date = models.DateField(auto_now_add=True)\n</code></pre></li> <li>Now <code>python manage.py makemigrations</code> but you'll get an error that something is needed for existing items that don't have a date. He picked the one-off default option and the default date of timezone.now.</li> <li>Then <code>python manage.py migrate</code></li> <li>In article_details.html after post.author.last_name <code>- {{ post.post_date }} -</code></li> <li>He did the same on the home.html template to show the date after the first name.</li> <li>In views.py class HomeView(Listview) add <code>ordering = ['-post_date']</code> which sorts by post_date in reverse date - latest first.</li> <li></li> </ul>"},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%209%20%26%2010/","title":"Codemy Simple Blog Video 9 & 10","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%209%20%26%2010/#youtube-37-video-course","title":"Youtube 37 Video Course","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%209%20%26%2010/#user-authentication","title":"User Authentication","text":""},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%209%20%26%2010/#length-1913","title":"Length 19:13","text":"<p>So my plan is to watch the video and take notes - not code but flow, bash instructions, etc. Then go back through the same video and write the code.</p> <ul> <li>Using the Django Authentication System</li> <li>Create a separate app for this. Make sure virt is active and you're in the directory that contains manage.py<ul> <li><code>python manage.py startapp members</code></li> </ul> </li> <li>Add the new app to ablog/settings.py after theblog. <code>'members',</code></li> <li>create ablog/members/urls.py  <pre><code>from django.urls import path\n\nurlpatterns = [\n\n]\n</code></pre></li> <li>Add it to ablog/urls.py after theblog. Point it to the django auth urls as well as to members.url. <pre><code>path('members/', include('django.contrib.auth.urls')),\npath('members/', include('members.urls')),\n</code></pre></li> <li>Add a templates directory to the members app - <code>ablog/members/templates</code></li> <li>Then add a subfolder to templates called registration <code>ablog/members/templates/registration</code></li> <li>inside registration create login.html and register.html</li> <li>He copied theblog/addpost.html contents to login.html</li> <li>Change title to Login, header 1 to Login..., and button text to Login</li> <li>He copied members/login.html contents to register.html</li> <li>Change title to Register, h1 to Register... and button text to Register.</li> <li>Now add to members/views.py: <pre><code>from django.views import generic\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.urls import reverse_lazy\n\nclass UserRegisterView(generic.CreateView):\n    form_class = UserCreationForm\n    template_name = 'registration/register.html'\n    success_url = reverse_lazy('login')\n</code></pre></li> <li>Back to members/urls.py <pre><code>from .views import UserRegisterView\n\n# In UrlPatterns:\npath('register/', UserRegisterView.as_view(), name='register'),\n</code></pre></li> <li>In theblog/templates/base.html copy the list item for Add Post and  change the text to Register and the url to  'register'. Do the same for login and change text to Login and the url to 'login'. Note login is a built in django form so we don't need to create a template. </li> <li>Then at the bottom of ablog/settings.py  <pre><code>LOGIN_REDIRECT_URL = 'home'\nLOGOUT_REDIRECT_URL = 'home'\n</code></pre></li> <li>You can see new users that get added in the Admin area.</li> </ul>"},{"location":"django/CodemySimpleBlog/Codemy%20Simple%20Blog%20Video%209%20%26%2010/#video-10-user-authentication-part-2-1340","title":"Video 10 User Authentication Part 2  13:40","text":"<ul> <li>In base.html copy login li block and change url to 'logout' and text to Logout</li> <li>Logout is another built in function. So we don't have to do anything else. (We did set up  redirect for logout in settings.py in the previous video)</li> <li>There's a built in function called is_authenticated to check if a user is logged in or not. So make a block where the navbar Add Post, etc is in base.html <pre><code>{% if user.is_authenticated %}\n    # Add Post li block\n    # Logout li block\n{% else %}\n    # Register li block\n    # Login li block\n{% endif %}\n</code></pre></li> <li>in home.html same kind of thing: <pre><code>{% if user.is_authenticated %}\n    # move the dash after the date inside this if block\n    # update / edit post link\n    # delete post link\n{% endif %}\n</code></pre></li> <li>And have to do something similar in update_post.html <pre><code>{% if user.is_authenticated %}\n# Stuff from the h1 to the closing div tag\n{% else %}\nYou are not allowed here! Please login to edit posts\n{% endif %}\n</code></pre></li> <li>Need to do also for add_post.html <pre><code>{% if user.is_authenticated %}\n# Stuff from the h1 to the closing div tag\n{% else %}\nYou are not allowed here! Please login to add posts\n{% endif %}\n</code></pre></li> <li>And for delete_post.html <pre><code>{% if user.is_authenticated %}\n# Stuff from the h1 to the closing div tag\n{% else %}\nYou are not allowed here! Please login to delete posts\n{% endif %}\n</code></pre></li> <li>Same thing in article_detail page <pre><code>{% if user.is_authenticated %}\n# Move the dash after the date here\n# Link for update_post\n# Link for delete_post\n{% endif %}\n</code></pre></li> <li>Separate issue - just show a snippet of a long blog post on the home page.</li> <li>Add a slice at 200 characters to the body django variable line: <pre><code>{{ post.body|slice:\":200\" }}\n</code></pre></li> </ul>"},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%201/","title":"Codemy Todo List","text":""},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%201/#video-5-setup","title":"Video 5 Setup","text":"<ul> <li>Using Django 2.0.5</li> <li>Create Virtual Environment (DjangoStuff) </li> <li>pip install django == 2.0.5<ul> <li>March 7, 2023 trying with Django 4.1.7</li> </ul> </li> <li>mkdir my_app &amp; cd to it. </li> <li>django-admin.py startproject todo_app . <ul> <li>Don't need .py after django-admin</li> <li>Inside my_app, I have manage.py and todo_app subdirectory</li> </ul> </li> </ul>"},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%201/#video-6-runserver-admin","title":"Video 6 Runserver &amp; Admin","text":"<ul> <li>python manage.py runserver  ==&gt; local host:8000 </li> <li>python manage.py migrate ==&gt; sets up admin area and db.sqlite3</li> <li>Python manage.py createsuperuser<ul> <li>admin + password, email can be blank</li> <li>using terry jacqui</li> </ul> </li> </ul>"},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%201/#video-7-startapp","title":"Video 7 Startapp","text":"<ul> <li>apps are different parts of website <ul> <li>forum, blog, photo gallery</li> </ul> </li> <li>python manage.py startapp todo_list<ul> <li>Now have todo_list alongside todo_app</li> </ul> </li> <li>Need to register app with project <ul> <li>So in todo_app/settings.py add to end of INSTALLED_APPS list <code>'todo_list',</code> </li> </ul> </li> </ul>"},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%201/#video-8-urlspy","title":"Video 8  Urls.py","text":"<ul> <li>Want a separate urls.py in todo_list </li> <li>So copy todo_app/urls.py to todo_list/urls.py</li> <li>delete admin import stat and admin line/path in url  patterns list (in todo_list/urls.py)</li> <li>in original todo_app/urls.py in order to attach new urls.py <ul> <li>add <code>, include</code> to from django.urls import </li> <li>add from todo_list import views </li> <li>add path('', include ('todo_list.urls')), </li> </ul> </li> <li>Now mostly done with todo_app subdirectory, and will mostly work in todo_list</li> </ul>"},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%202/","title":"Codemy Django ToDo Page 2","text":""},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%202/#video-9-views-and-templates","title":"Video 9 Views and Templates","text":"<ul> <li>Urls.py tells django where the pages are</li> <li>views.py tells django what the pages are</li> <li>in urls.py<ul> <li>from . import views</li> </ul> </li> <li>In views.py add a function for the home page <pre><code>def home(request):\n    return render(request, 'home.html', {})\n</code></pre></li> <li>Django expects templates in a specific place</li> <li>Create todo_list/templates subdirectory</li> <li>Create home.html in templates</li> <li>Use Emmet to create home.html and then add an h1 saying Home Page</li> <li>In urls.py add to url patterns <code>path('', views.home, name = 'home')</code></li> <li>Now urls.py, views,py and templates are all tied together and runserver gives home.html rather than the django default page.</li> <li>Now create an about page;</li> <li>in views.py: <pre><code>def about(request):\n    return render(request, 'about.html', {})\n</code></pre></li> <li>in urls.py add to urlpatterns: <pre><code>path('about/', views.about, name = 'about')\n</code></pre></li> <li>Add about.html file in templates subdirectory</li> </ul>"},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%203/","title":"Codemy Django ToDo Page 3","text":""},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%203/#video-10-base-extends","title":"Video 10 Base Extends","text":"<ul> <li>This will let us put common page elements (header, navbar, footer, etc. ) in 1 common file</li> <li>Create base.html in templates <pre><code>{% block content %}\n{% endblock %}\n</code></pre></li> <li>This will match up to blocks in the individual web pages</li> <li>At the top of base.html put  <pre><code>&lt;h1&gt;This goes on all pages &lt;/h1&gt;\n</code></pre></li> <li>Now in home.html and about.html wrap the h1 in  <pre><code>{% block content %}\n{% endblock %}\n</code></pre></li> <li>And at the top of home.html and about.html: <pre><code>{% extends 'base.html' %}\n</code></pre></li> </ul>"},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%203/#video-11-bootstrap-css","title":"Video 11 Bootstrap CSS","text":"<ul> <li>He's using version 4.1.1 of Bootstrap</li> <li>Copy bootstrap template to the top of base.html</li> <li>Move block content and end block to body above the Javascript bootstrap link</li> <li>In base.html wrap block content/endblock in a div with a class of container and add a br before the div</li> <li>To change the title for each page inside the title tags: <pre><code>{% block title %}Hello World{% endblock %}\n</code></pre></li> <li>This will be the default if we don't include a title block on a specific web page.</li> <li>in home.html after the extends <pre><code>{% block title %}To-Do List{% endblock %}\n</code></pre></li> <li>same in about.html but <pre><code>{% block title %}To-Do List | About Me{% endblock %}\n</code></pre></li> <li>Now it works great.</li> </ul>"},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%204/","title":"Codemy Django ToDo Page 4","text":""},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%204/#video-12-bootstrap-navbar","title":"Video 12 Bootstrap Navbar","text":"<ul> <li>On getbootstrap.com find component navbar</li> <li>grab the first one and put it in base.html below the opening body tag. </li> <li>Making the navbar dark - change navbar-light to navbar-dark bg-dark.</li> <li>Changed success to secondary on the search button to make the colors match the rest of the navbar.</li> <li>Changed the button text to Add to List - going to use this part of the navbar to add todo items rather than search.</li> <li>On the corresponding input field changed the placeholder text to To-Do Item. </li> <li>Deleted (commented out for safety) the disabled button, the dropdown, and the Home link. </li> <li>Changed the Link to About and the href to \"/about/\"</li> <li>Changed the Navbar link to To-Do List and the href to \"/\"</li> <li>Later we will change those links to Django links</li> </ul>"},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%204/#video-13-django-links","title":"Video 13 Django Links","text":"<p><pre><code>&lt;a class=\"navbar-brand\" href=\"{% url 'home' %}\"&gt;To-Do List&lt;/a&gt;\n&lt;a class=\"nav-link\" href=\"{% url 'about' %}\"&gt;About&lt;/a&gt;\n</code></pre> The url corresponds to name in the path statement  of urlpatterns of urls.py.</p>"},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%205/","title":"Codemy Django ToDo Page 5","text":""},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%205/#video-14-context-dictionary","title":"Video 14 Context Dictionary","text":"<p>In the functions in views.py, the return statement has a dictionary which is used to pass information to the templates.   So to pass a name to the about template the function in views.py should look like this: <pre><code>my_name = \"Terry Dutcher\"\ndef about(request):\nreturn render(request, 'about.html', {'name':my_name})\n</code></pre> Then in about.html: <pre><code>{% block content %}\n&lt;h1&gt;About Page YAY!!!!&lt;/h1&gt;\n&lt;p&gt;My name is {{ name }}&lt;/p&gt;\n{% endblock %}\n</code></pre></p> <p>Alternative way in views.py define the dictionary first and pass it in the return statement: <pre><code>context = {'first_name': 'Terry', 'last_name': 'Dutcher'}\nreturn render(request, 'about.html', context)\n</code></pre></p>"},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%205/#video-15-database-class","title":"Video 15 Database Class","text":"<p>In models.py in todo_list, write a Python class: <pre><code># Describe the fields you're going to use.\nclass List(models.Model):\n    item = models.CharField(max_length=200)\n    completed = models.BooleanField(default=False)\n\n    # This is important for the Admin page to work correctly\n    def __str__(self):\n        return self.item\n</code></pre></p>"},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%205/#video-16-database-migrations-and-migrating","title":"Video 16 Database Migrations and Migrating","text":"<p>This is a 3 step process.  * Step 1 was creating the class - previous video.  * Step 2 is creating a migration, which converts the class into sql (the db language)     * <code>python3 manage.py makemigrations</code> * Step 3 is pushing the migrations into the database     * <code>python3 manage.py migrate</code></p>"},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%206/","title":"Codemy Django ToDo Page 6","text":""},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%206/#video-17-database-admin","title":"Video 17 Database Admin","text":"<p>Need to add new database to Admin section.  <pre><code># Import List from models.py\nfrom .models import List\n# Register your models here.\n# List is the db we created in models.py\nadmin.site.register(List)\n</code></pre> Now you can view, add and delete items in the database on the admin page. But usually build webpages to handle those activities.</p>"},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%206/#video-18-add-to-index-page","title":"Video 18 Add to Index Page","text":"<p>Need to be able to access the database from the views.py file.  <pre><code># Get access to the List (is it a table or the db name?)\nfrom .models import List\n# Then add this to the home function before the return statement\nall_items = List.objects.all\n# Then change the return statement to {'all_items': all_items}\n</code></pre> Now in home.html adding {{ all_items }} will show the queryset object for the db. </p> <p>But to actually show a list in home.html: <pre><code>{% if all_items %}\n{% for things in all_items %}\n        &lt;li&gt;{{ things.item }}&lt;/li&gt;\n{% endfor %}\n{% endif %}\n{% endblock %}\n</code></pre></p>"},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%207/","title":"Codemy Django ToDo Page 7","text":""},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%207/#bootstrap-tables","title":"Bootstrap Tables","text":"<p>Put table tags around the for loop in home.html. Then tr tags inside the for loop and td around things.item and things.completed. Then add a Delete item and put it in td tags. Then add center tags to things.completed and Delete. Center tags in html don't work anymore so I took them back out. Add <code>class=table table-bordered</code>  to the opening table tag. And then an if block that checks to see if the item is completed or not. If it is completed add table-secondary class to the table row. Final code looks like: <pre><code>&lt;table class=\"table table-bordered\"&gt;\n{% for things in all_items %}\n{% if things.completed %}\n            &lt;tr class=\"table-secondary\"&gt;\n                &lt;td&gt;{{ things.item }}&lt;/td&gt;\n                &lt;td&gt;{{ things.completed }}&lt;/td&gt;\n                &lt;td&gt;Delete&lt;/td&gt;\n            &lt;/tr&gt;\n{% else %}\n            &lt;tr&gt;\n                &lt;td&gt;{{ things.item }}&lt;/td&gt;\n                &lt;td&gt;{{ things.completed }}&lt;/td&gt;\n                &lt;td&gt;Delete&lt;/td&gt;\n            &lt;/tr&gt;\n{% endif %}\n{% endfor %}\n&lt;/table&gt;\n</code></pre></p>"},{"location":"django/Codemy_ToDo/Codemy%20Django%20ToDo%20Page%207/#video-20-static-css-files","title":"Video 20 Static CSS Files","text":"<p>There are 3 types of static files - CSS stylesheets, javascript and images. They all go in a static subdirectory under my_app. And then 3 subdirectories there - css, js, images. Then under css create my_style.css. </p> <p>To point to the static subdirectory in todo_app/settings.py <code>STATICFILES_DIRS = [os.path.join(BASE_DIR,'static')</code>  at the very end and import os at the top. </p> <p>And in the head section of base.html <code>&lt;link rel=\"stylesheet\" href = \"{% static 'css/mystyle.css' %}\"&gt;</code></p> <p>In my_style.css <pre><code>.striker {\ntext-decoration: line-through;\n}\n</code></pre> Then at the very top of base.html <code>{% load static %}</code></p> <p>In home.html class=\"striker\" on the things.item td if it's completed. </p>"},{"location":"django/Coding_Entrepenuers/Udemy%20Course%20Videos%203%20-4/","title":"Udemy Course Videos 3  4","text":""},{"location":"django/Coding_Entrepenuers/Udemy%20Course%20Videos%203%20-4/#video-3-setup-the-project","title":"Video 3 - Setup the project.","text":"<ul> <li>mkdir try_django</li> <li>cd try_django</li> <li>On Windows 11 Windows Subsystem for Linux<ul> <li>sudo apt install python3-venv</li> </ul> </li> <li>python3 -m venv try_django</li> <li>source try_django/bin/activate</li> <li>pip3 install django</li> <li>mkdir src</li> <li>cd src</li> <li>django-admin startproject try_django .</li> <li>cd try_django</li> <li>python3 manage.py runserver</li> <li>python3 manage.py migrate</li> <li>python3 manage.py createsuperuser --&gt; terry/jacqui</li> </ul> <p>At this point we've got try_django/src/try_django and are able to see the default rocketship on localhost:8000</p>"},{"location":"django/Coding_Entrepenuers/Udemy%20Course%20Videos%203%20-4/#video-4-what-django-does","title":"Video 4 - What Django Does","text":"<p>To get to the admin page: localhost:8000/admin and login with terry/jacqui. At this point users can be edited and he gave his user a first name to show that. </p>"},{"location":"django/DjangoWednesday/Django%20Wednesday%20Video1/","title":"Django Wednesday Video1","text":""},{"location":"django/DjangoWednesday/Django%20Wednesday%20Video1/#codemycom-youtube-playlist","title":"Codemy.com Youtube Playlist","text":""},{"location":"django/DjangoWednesday/Django%20Wednesday%20Video1/#47-videos","title":"47 Videos","text":""},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/","title":"Chapter 1 Initial Setup","text":""},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#build-websites-with-python-django","title":"Build websites with Python &amp; Django","text":""},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#william-s-vincent","title":"William S. Vincent","text":""},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#create-a-folder-where-were-going-to-build-our-first-project","title":"Create a folder where we're going to build our first project.","text":"<pre><code>mkdir code          # Create a directory for our projects\ncd code             # Change to that directory\nmkdir ch1-setup     # Make a subdirectory for Chapter 1\ncd ch1-setup        # Change to that subdirectory\n</code></pre>"},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#to-create-a-virtual-environment-within-this-new-directory-use-the-format","title":"To create a virtual environment within this new directory use the format:","text":"<pre><code>python3 -m venv &lt;name_of_env&gt; # This creates a venv\n</code></pre> <p>It is up to the developer to choose a proper environment name but a common choice is to call it .venv. That hides the venv and is therefore one less piece of clutter on screens.</p>"},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#activate-the-virtual-environment","title":"Activate the virtual environment","text":"<pre><code> source .venv/bin/activate\n</code></pre> <p>The shell prompt now has the environment name (.venv) prefixed which indicates that the virtual environment is active. Any Python packages installed or updated within this location will be confined to the active virtual environment. To deactivate and leave a virtual environment type <code>deactivate</code>.</p>"},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#install-django","title":"Install Django","text":"<p><pre><code>python -m pip install django~=4.0.0\n</code></pre> The comparison operator \u223c= ensures that subsequent security updates for Django, such as 4.0.1, 4.0.2, and so on are automatically installed. Note that while it is possible to use the shorter version of pip install , it is a best practice to use the longer but more explicit form of python -m pip install  to ensure that the correct version of Python is used. This can be an issue if you have multiple versions of Python installed on your computer."},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#first-django-project","title":"First Django Project","text":"<p>A Django project can have almost any name but we will use django_project in this book.  <pre><code>(.venv) &gt; django-admin startproject django_project .\n</code></pre></p> <p>It\u2019s worth pausing here to explain why you should add a period (.) to the end of the previous command. If you don't include the period, Django creates another django_project directory. This feels redundant to me which is why I prefer adding a period to the end which installs Django in the current directory.</p>"},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#runserver-to-test-installation","title":"Runserver to test installation","text":"<p>Now let\u2019s confirm everything is working by running Django\u2019s internal web server via the runserver command. This is suitable for local development purposes, but when it comes time to deploy our project\u2019s online we will switch to a more robust WSGI server like Gunicorn.</p> <pre><code>python manage.py runserver\n</code></pre>"},{"location":"django/Django_For_Beginners_Book/Chapter_1_Initial_Setup/#code-editor-and-git","title":"Code Editor and Git","text":"<p>Make sure you have a code editor and git installed. He recommends both the microsoft python extension for vscode and an extension called black which formats python code. </p>"},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/","title":"Django for Beginners","text":""},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/#build-websites-with-python-django","title":"Build websites with Python &amp; Django","text":""},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/#william-s-vincent","title":"William S. Vincent","text":""},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/#chapter-2-hello-world-app","title":"Chapter 2: Hello World App","text":"<p>In this chapter we will build a Django project that simply says \u201cHello, World\u201d on the homepage. This is the traditional way to start a new programming language or framework. We\u2019ll also work with Git for the first time and deploy our code to GitHub.</p>"},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/#initial-setup","title":"Initial Setup","text":"<pre><code>% cd ~/code\n% mkdir helloworld\n% cd helloworld\n</code></pre> <p>Create a new virtual environment called .venv, activate it, and install Django with Pip as we did in the previous chapter.</p> <p>Now we\u2019ll use the Django startproject command to make a new project called django_project. Don\u2019t forget to include the period (.) at the end of the command so that it is installed in our current directory.</p> <pre><code>(.venv) &gt; django-admin startproject django_project .\n</code></pre> <p>Django has added a django_project directory and a manage.py file. Within directory django_project are five new files: * <code>__init__.py</code> indicates that the files in the folder are part of a Python package. Without this file, we cannot import files from another directory which we will be doing a lot of in Django! * asgi.py allows for an optional Asynchronous Server Gateway Interface to be run * settings.py controls our Django project\u2019s overall settings * urls.py tells Django which pages to build in response to a browser or URL request * wsgi.py stands for Web Server Gateway Interface which helps Django serve our eventual web pages.</p> <p>The manage.py file is not part of django_project but is used to execute various Django commands such as running the local web server or creating a new app.</p> <p>Let\u2019s try out our new project by using Django\u2019s lightweight built-in web server for local development purposes. The command we\u2019ll use is runserver which is located in manage.py.</p> <p>Note that the full command line output will contain additional information including a warning about 18 unapplied migrations. Technically, this warning doesn\u2019t matter at this point. Django is complaining that we have not yet \u201cmigrated\u201d our initial database. Since we won\u2019t actually use a database in this chapter the warning won\u2019t affect the end result. However, since warnings are still annoying to see, we can remove it by first stopping the local server with the command Control+c and then running <code>python manage.py migrate</code>.</p> <p>What Django has done here is create a SQLite database and migrated its built-in apps provided for us. This is represented by the new file db.sqlite3 in our directory.</p> <p>The Django MVT pattern is as follows: * Model: Manages data and core business logic * View: Describes which data is sent to the user but not its presentation * Template: Presents the data as HTML with optional CSS, JavaScript, and Static Assets * URL Configuration: Regular-expression components configured to a View</p> <p>When you type in a URL, such as https://djangoproject.com, the first thing that happens within our Django project is a URL pattern (contained in urls.py) is found that matches it. The URL pattern is linked to a single view (contained in views.py) which combines the data from the model (stored in models.py) and the styling from a template (any file ending in .html). The view then returns a HTTP response to the user.</p>"},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/#create-an-app","title":"Create an App","text":"<p>Django uses the concept of projects and apps to keep code clean and readable. A single top-level Django project can contain multiple apps. Each app controls an isolated piece of functionality. For example, an e-commerce site might have one app for user authentication, another app for payments, and a third app to power item listing details. That\u2019s three distinct apps that all live within one top-level project. How and when you split functionality into apps is somewhat subjective, but in general, each app should have a clear function.</p> <pre><code>(.venv) % python3 manage.py startapp pages\n</code></pre> <p>If you look visually at the helloworld directory Django has created within it a new pages directory.</p> <p>Let\u2019s review what each new pages app file does:</p> <ul> <li>admin.py is a configuration file for the built-in Django Admin app</li> <li>apps.py is a configuration file for the app itself</li> <li>migrations/ keeps track of any changes to our models.py file so it stays in sync with our database</li> <li>models.py is where we define our database models which Django automatically translates into database tables</li> <li>tests.py is for app-specific tests</li> <li>views.py is where we handle the request/response logic for our web app</li> </ul> <p>Notice that the model, view, and url from the MVT pattern are present from the beginning. The only thing missing is a template which we\u2019ll add shortly. Even though our new app exists within the Django project, Django doesn\u2019t \u201cknow\u201d about it until we explicitly add it to the django_project/settings.py file. Add pages.apps.PagesConfig at the bottom.</p> <pre><code># django_project/settings.py\nINSTALLED_APPS = [\n\"django.contrib.admin\",\n\"django.contrib.auth\",\n\"django.contrib.contenttypes\",\n\"django.contrib.sessions\",\n\"django.contrib.messages\",\n\"django.contrib.staticfiles\",\n\"pages.apps.PagesConfig\", # new\n]\n</code></pre> <p>What is PagesConfig you might ask? Well, it is the name of the solitary function within the pages/apps.py file at this point.</p>"},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/#create-first-view","title":"Create First View","text":"<p>The next step is therefore to create our first view. Start by updating the views.py file in our pages app to look as follows:</p> <pre><code># pages/views.py\nfrom django.http import HttpResponse\n\ndef homePageView(request):\n    return HttpResponse(\"Hello, World!\")\n</code></pre> <p>There are two types of views in Django: function-based views (FBVs) and class-based views (CBVs). Our code in this example is a function-based view: it is relatively simple to implement and explicit. Django originally started with only FBVs but over time added CBVs which allow for much greater code reusability, keeps things DRY (Don\u2019t-Repeat-Yourself), and can be extended via mixins. The additional abstraction of CBVs makes them quite powerful and concise, however it also makes them harder to read for Django newcomers.</p> <p>Because web development quickly becomes repetitive Django also comes with a number of built- in generic class-based views (GCBVs) to handle common use cases such as creating a new object, forms, list views, pagination, and so on. We will be using GCBVs heavily in this book in later chapters.</p> <p>There are therefore technically three ways to write a view in Django: function-based views (FBVs), class-based views (CBVs), and generic class-based views (GCBVs). This customization is helpful for advanced developers but confusing for newcomers. Many Django developers\u2013including your author\u2013prefer to use GCBVs when possible and revert to CBVs or FBVs when required. </p> <p>We need to configure our URLs. In your text editor, create a new file called urls.py within the pages app. Then update it with the following code:</p> <pre><code># pages/urls.py\nfrom django.urls import path\nfrom .views import homePageView\n\nurlpatterns = [\n    path(\"\", homePageView, name=\"home\"),\n]\n</code></pre> <p>On the top line we import path from Django to power our URL pattern and on the next line we import our views. By referring to the views.py file as .views we are telling Django to look within the current directory for a views.py file and import the view homePageView from there. Our URL pattern has three parts: * a Python regular expression for the empty string \"\" * a reference to the view called homePageView * an optional named URL pattern22 called \"home\"</p> <p>In other words, if the user requests the homepage represented by the empty string \"\", Django should use the view called homePageView.</p> <p>The last step is to update our django_project/urls.py file. It\u2019s common to have multiple apps within a single Django project, like pages here, and they each need their own dedicated URL path.</p> <pre><code># django_project/urls.py\nfrom django.contrib import admin\nfrom django.urls import path, include\n # new\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"\", include(\"pages.urls\")), # new\n]\n</code></pre> <p>This need for two separate urls.py files is often confusing to beginners. Think of the top-level django_project/urls.py as the gateway to various url patterns distinct to each app.</p>"},{"location":"django/Django_For_Beginners_Book/Chapter_2_Hello_World_App/#git","title":"Git","text":"<p>initialize (or add) Git to our repository. Make sure you\u2019ve stopped the local server with Control+c, then run the command git init.</p> <p>If you then type git status you\u2019ll see a list of changes since the last Git commit. Since this is our first commit, this list is all of our changes so far.</p> <p>Note that our virtual environment .venv is included which is not a best practice. It should be kept out of Git source control since secret information such as API keys and the like are often included in it. The solution is to create a new file called .gitignore which tells Git what to ignore. In this new file, add a single line for .venv.</p> <p>We do want a record of packages installed in our virtual environment. The current best practice is to create a requirements.txt file with this information. The command <code>pip freeze</code> will output the contents of your current virtual environment and by using the &gt; operator we can do all this in one step: output the contents into a new file called requirements.txt.</p> <pre><code>(.venv) &gt; pip freeze &gt; requirements.txt\n</code></pre> <p>We next want to add all recent changes by using the command add -A and then commit the changes along with a message (-m) describing what has changed.</p> <pre><code>(.venv) &gt; git add -A\n(.venv) &gt; git commit -m \"initial commit\"\n</code></pre> <pre><code>cd existing_repo\ngit remote add origin https://gitlab.com/terryinfcco/hello-world.git\ngit branch -M main\ngit push -uf origin main\n</code></pre> <p>Note I added an ssh key to gitlab from the beelink i5 kubuntu 21.10 upgraded to 22.04 build. I couldn't make the ssh work, so I finally did the git push with username and password, deleted all the local stuff and then cloned the hello-world repo using ssh. Now it works.</p>"},{"location":"django/Django_For_Beginners_Book/Django-for-Beginners-Book/","title":"Django for Beginners","text":""},{"location":"django/Django_For_Beginners_Book/Django-for-Beginners-Book/#build-websites-with-python-django","title":"Build websites with Python &amp; Django","text":""},{"location":"django/Django_For_Beginners_Book/Django-for-Beginners-Book/#william-s-vincent","title":"William S. Vincent","text":""},{"location":"django/Django_For_Beginners_Book/Django-for-Beginners-Book/#chapter-one","title":"Chapter One","text":""},{"location":"django/Django_For_Beginners_Book/Django-for-Beginners-Book/#create-a-folder-where-were-going-to-build-our-first-project","title":"Create a folder where we're going to build our first project.","text":"<pre><code>mkdir code\ncd code\nmkdir ch1-setup\ncd ch1-setup\n</code></pre>"},{"location":"django/Django_For_Beginners_Book/Django-for-Beginners-Book/#to-create-a-virtual-environment-within-this-new-directory-use-the-format","title":"To create a virtual environment within this new directory use the format:","text":"<pre><code>python3 -m venv &lt;name_of_env&gt;\n</code></pre> <p>It is up to the developer to choose a proper environment name but a common choice is to call it .venv.</p>"},{"location":"django/Django_For_Beginners_Book/Django-for-Beginners-Book/#activate-the-virtual-environment","title":"Activate the virtual environment","text":"<pre><code> source .venv/bin/activate\n</code></pre> <p>The shell prompt now has the environment name (.venv) prefixed which indicates that the virtual environment is active. Any Python packages installed or updated within this location will be confined to the active virtual environment. To deactivate and leave a virtual environment type deactivate.</p>"},{"location":"django/Django_For_Beginners_Book/Django-for-Beginners-Book/#install-django","title":"Install Django","text":"<p><pre><code>python -m pip install django~=4.0.0\n</code></pre> The comparison operator \u223c= ensures that subsequent security updates for Django, such as 4.0.1, 4.0.2, and so on are automatically installed. Note that while it is possible to use the shorter version of pip install , it is a best practice to use the longer but more explicit form of python -m pip install  to ensure that the correct version of Python is used. This can be an issue if you have multiple versions of Python installed on your computer."},{"location":"django/Django_For_Beginners_Book/Django-for-Beginners-Book/#first-django-project","title":"First Django Project","text":"<p>A Django project can have almost any name but we will use django_project in this book.  <pre><code>(.venv) &gt; django-admin startproject django_project .\n</code></pre></p> <p>It\u2019s worth pausing here to explain why you should add a period (.) to the end of the previous command. If you don't include the period, Django creates another django_project directory. This feels redundant to me which is why I prefer adding a period to the end which installs Django in the current directory.</p>"},{"location":"django/Django_For_Beginners_Book/Django-for-Beginners-Book/#runserver-to-test-installation","title":"Runserver to test installation","text":"<p>Now let\u2019s confirm everything is working by running Django\u2019s internal web server via the runserver command. This is suitable for local development purposes, but when it comes time to deploy our project\u2019s online we will switch to a more robust WSGI server like Gunicorn.</p> <pre><code>python manage.py runserver\n</code></pre>"},{"location":"django/Django_For_Beginners_Book/Django-for-Beginners-Book/#code-editor-and-git","title":"Code Editor and Git","text":"<p>Make sure you have a code editor and git installed. He recommends both the microsoft python extension for vscode and an extension called black which formats python code. </p>"},{"location":"django/Django_For_Beginners_Book/Django-for-Beginners-Book/#chapter-2-hello-world-app","title":"Chapter 2: Hello World App","text":"<p>In this chapter we will build a Django project that simply says \u201cHello, World\u201d on the homepage. This is the traditional way to start a new programming language or framework. We\u2019ll also work with Git for the first time and deploy our code to GitHub.</p>"},{"location":"django/Django_For_Beginners_Book/Django-for-Beginners-Book/#initial-setup","title":"Initial Setup","text":"<pre><code>% cd ~/code\n% mkdir helloworld\n% cd helloworld\n</code></pre> <p>Create a new virtual environment called .venv, activate it, and install Django with Pip as we did in the previous chapter.</p> <p>Now we\u2019ll use the Django startproject command to make a new project called django_project. Don\u2019t forget to include the period (.) at the end of the command so that it is installed in our current directory.</p> <pre><code>(.venv) &gt; django-admin startproject django_project .\n</code></pre> <p>Django has added a django_project directory and a manage.py file. Within directory django_project are five new files: * <code>__init__.py</code> indicates that the files in the folder are part of a Python package. Without this file, we cannot import files from another directory which we will be doing a lot of in Django! * asgi.py allows for an optional Asynchronous Server Gateway Interface to be run * settings.py controls our Django project\u2019s overall settings * urls.py tells Django which pages to build in response to a browser or URL request * wsgi.py stands for Web Server Gateway Interface which helps Django serve our eventual web pages.</p> <p>The manage.py file is not part of django_project but is used to execute various Django commands such as running the local web server or creating a new app.</p> <p>Let\u2019s try out our new project by using Django\u2019s lightweight built-in web server for local development purposes. The command we\u2019ll use is runserver which is located in manage.py.</p> <p>Note that the full command line output will contain additional information including a warning about 18 unapplied migrations. Technically, this warning doesn\u2019t matter at this point. Django is complaining that we have not yet \u201cmigrated\u201d our initial database. Since we won\u2019t actually use a database in this chapter the warning won\u2019t affect the end result. However, since warnings are still annoying to see, we can remove it by first stopping the local server with the command Control+c and then running <code>python manage.py migrate</code>.</p> <p>What Django has done here is create a SQLite database and migrated its built-in apps provided for us. This is represented by the new file db.sqlite3 in our directory.</p> <p>The Django MVT pattern is as follows: * Model: Manages data and core business logic * View: Describes which data is sent to the user but not its presentation * Template: Presents the data as HTML with optional CSS, JavaScript, and Static Assets * URL Configuration: Regular-expression components configured to a View</p> <p>When you type in a URL, such as https://djangoproject.com, the first thing that happens within our Django project is a URL pattern (contained in urls.py) is found that matches it. The URL pattern is linked to a single view (contained in views.py) which combines the data from the model (stored in models.py) and the styling from a template (any file ending in .html). The view then returns a HTTP response to the user.</p>"},{"location":"django/Django_For_Beginners_Book/Django-for-Beginners-Book/#create-an-app","title":"Create an App","text":"<p>Django uses the concept of projects and apps to keep code clean and readable. A single top-level Django project can contain multiple apps. Each app controls an isolated piece of functionality. For example, an e-commerce site might have one app for user authentication, another app for payments, and a third app to power item listing details. That\u2019s three distinct apps that all live within one top-level project. How and when you split functionality into apps is somewhat subjective, but in general, each app should have a clear function.</p> <pre><code>(.venv) % python3 manage.py startapp pages\n</code></pre> <p>If you look visually at the helloworld directory Django has created within it a new pages directory.</p> <p>Let\u2019s review what each new pages app file does:</p> <ul> <li>admin.py is a configuration file for the built-in Django Admin app</li> <li>apps.py is a configuration file for the app itself</li> <li>migrations/ keeps track of any changes to our models.py file so it stays in sync with our database</li> <li>models.py is where we define our database models which Django automatically translates into database tables</li> <li>tests.py is for app-specific tests</li> <li>views.py is where we handle the request/response logic for our web app</li> </ul> <p>Notice that the model, view, and url from the MVT pattern are present from the beginning. The only thing missing is a template which we\u2019ll add shortly. Even though our new app exists within the Django project, Django doesn\u2019t \u201cknow\u201d about it until we explicitly add it to the django_project/settings.py file. Add pages.apps.PagesConfig at the bottom.</p> <pre><code># django_project/settings.py\nINSTALLED_APPS = [\n\"django.contrib.admin\",\n\"django.contrib.auth\",\n\"django.contrib.contenttypes\",\n\"django.contrib.sessions\",\n\"django.contrib.messages\",\n\"django.contrib.staticfiles\",\n\"pages.apps.PagesConfig\", # new\n]\n</code></pre> <p>What is PagesConfig you might ask? Well, it is the name of the solitary function within the pages/apps.py file at this point.</p>"},{"location":"django/Django_For_Beginners_Book/Django-for-Beginners-Book/#create-first-view","title":"Create First View","text":"<p>The next step is therefore to create our first view. Start by updating the views.py file in our pages app to look as follows:</p> <pre><code># pages/views.py\nfrom django.http import HttpResponse\n\ndef homePageView(request):\n    return HttpResponse(\"Hello, World!\")\n</code></pre> <p>There are two types of views in Django: function-based views (FBVs) and class-based views (CBVs). Our code in this example is a function-based view: it is relatively simple to implement and explicit. Django originally started with only FBVs but over time added CBVs which allow for much greater code reusability, keeps things DRY (Don\u2019t-Repeat-Yourself), and can be extended via mixins. The additional abstraction of CBVs makes them quite powerful and concise, however it also makes them harder to read for Django newcomers.</p> <p>Because web development quickly becomes repetitive Django also comes with a number of built- in generic class-based views (GCBVs) to handle common use cases such as creating a new object, forms, list views, pagination, and so on. We will be using GCBVs heavily in this book in later chapters.</p> <p>There are therefore technically three ways to write a view in Django: function-based views (FBVs), class-based views (CBVs), and generic class-based views (GCBVs). This customization is helpful for advanced developers but confusing for newcomers. Many Django developers\u2013including your author\u2013prefer to use GCBVs when possible and revert to CBVs or FBVs when required. </p> <p>We need to configure our URLs. In your text editor, create a new file called urls.py within the pages app. Then update it with the following code:</p> <pre><code># pages/urls.py\nfrom django.urls import path\nfrom .views import homePageView\n\nurlpatterns = [\n    path(\"\", homePageView, name=\"home\"),\n]\n</code></pre> <p>On the top line we import path from Django to power our URL pattern and on the next line we import our views. By referring to the views.py file as .views we are telling Django to look within the current directory for a views.py file and import the view homePageView from there. Our URL pattern has three parts: * a Python regular expression for the empty string \"\" * a reference to the view called homePageView * an optional named URL pattern22 called \"home\"</p> <p>In other words, if the user requests the homepage represented by the empty string \"\", Django should use the view called homePageView.</p> <p>The last step is to update our django_project/urls.py file. It\u2019s common to have multiple apps within a single Django project, like pages here, and they each need their own dedicated URL path.</p> <pre><code># django_project/urls.py\nfrom django.contrib import admin\nfrom django.urls import path, include\n # new\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"\", include(\"pages.urls\")), # new\n]\n</code></pre> <p>This need for two separate urls.py files is often confusing to beginners. Think of the top-level django_project/urls.py as the gateway to various url patterns distinct to each app.</p>"},{"location":"django/Django_For_Beginners_Book/Django-for-Beginners-Book/#git","title":"Git","text":"<p>initialize (or add) Git to our repository. Make sure you\u2019ve stopped the local server with Control+c, then run the command git init.</p> <p>If you then type git status you\u2019ll see a list of changes since the last Git commit. Since this is our first commit, this list is all of our changes so far.</p> <p>Note that our virtual environment .venv is included which is not a best practice. It should be kept out of Git source control since secret information such as API keys and the like are often included in it. The solution is to create a new file called .gitignore which tells Git what to ignore. In this new file, add a single line for .venv.</p> <p>We do want a record of packages installed in our virtual environment. The current best practice is to create a requirements.txt file with this information. The command <code>pip freeze</code> will output the contents of your current virtual environment and by using the &gt; operator we can do all this in one step: output the contents into a new file called requirements.txt.</p> <pre><code>(.venv) &gt; pip freeze &gt; requirements.txt\n</code></pre> <p>We next want to add all recent changes by using the command add -A and then commit the changes along with a message (-m) describing what has changed.</p> <pre><code>(.venv) &gt; git add -A\n(.venv) &gt; git commit -m \"initial commit\"\n</code></pre> <pre><code>cd existing_repo\ngit remote add origin https://gitlab.com/terryinfcco/hello-world.git\ngit branch -M main\ngit push -uf origin main\n</code></pre> <p>Note I added an ssh key to gitlab from the beelink i5 kubuntu 21.10 upgraded to 22.04 build. I couldn't make the ssh work, so I finally did the git push with username and password, deleted all the local stuff and then cloned the hello-world repo using ssh. Now it works.</p>"},{"location":"django/Django_For_Beginners_Book/Django-for-Beginners-Book/#chapter-3-pages-app","title":"Chapter 3 Pages App","text":"<p>In this chapter we will build, test, and deploy a Pages app containing a homepage and about page. </p>"},{"location":"django/Django_For_Beginners_Book/Django-for-Beginners-Book/#initial-set-up","title":"Initial Set Up","text":"<p>As in Chapter 2: Hello World App, our initial set up involves the following steps:</p> <ul> <li>make a new directory for our code called pages and navigate into it</li> <li>create a new virtual environment called .venv and activate it</li> <li>install Django</li> <li>create a new Django project called django_project</li> <li>create a new app called pages</li> </ul> <pre><code>cd ~/desktop/code\nmkdir pages\ncd pages\npython3 -m venv .venv\nsource .venv/bin/activate\n(.venv) python3 -m pip install django~=4.0.0\n(.venv) django-admin startproject django_project .\n(.venv) python3 manage.py startapp pages\n</code></pre> <p>Remember that even though we added a new app, Django will not recognize it until it is added to the INSTALLED_APPS setting within django_project/settings.py. Open your text editor and add it to the bottom now:</p> <pre><code># django_project/settings.py\nINSTALLED_APPS = [\n\"django.contrib.admin\",\n\"django.contrib.auth\",\n\"django.contrib.contenttypes\",\n\"django.contrib.sessions\",\n\"django.contrib.messages\",\n\"django.contrib.staticfiles\",\n\"pages.apps.PagesConfig\", # new\n]\n</code></pre> <p>Migrate the database with migrate and start the local web server with runserver.</p> <pre><code>(.venv) &gt; python manage.py migrate\n(.venv) &gt; python manage.py runserver\n</code></pre>"},{"location":"django/Udemy_Django_Academind/section1/","title":"Django Practical Guide Section 1","text":""},{"location":"django/Udemy_Django_Academind/section1/#getting-started","title":"Getting Started","text":""},{"location":"django/Udemy_Django_Academind/section1/#notes","title":"Notes","text":""},{"location":"django/Udemy_Django_Academind/section1/#what-is-django","title":"What is Django","text":"<p>HTML, CSS and Javascript still used for the front end. Django is just a python back end / web development framework. Tools for sessions, databases, request / response. And a clear set of rules for projects. Django is \"opinionated\". Still customizable and flexible. </p>"},{"location":"django/Udemy_Django_Academind/section1/#course-prequisites","title":"Course Prequisites","text":"<p>Basic Python knowledge. Basic Web Development knowledge. Request / response, HTML, CSS, Javascript. </p>"},{"location":"django/Udemy_Django_Academind/section1/#whats-inside-the-course","title":"What's Inside the Course","text":"<p>Three main pillars: Foundation - URL's, Routes, Views, Templates, Static Files, Data, Models</p> <p>Beyond the Basics - Forms, Class based views, File Uploads, Sessions</p> <p>Preparing for Reality - Many Small Examples, A Real Project Blog, Front End + Admin Area, Implementation. </p>"},{"location":"django/Udemy_Django_Academind/section1/#getting-the-most-out-of-the-course","title":"Getting the most out of the course.","text":"<p>Watch the videos. Don't hesitate to repeat as necessary. Use playback speed if too slow or fast. Code along and code ahead. Compare your approach to his. Use code attachments - github repo's for each section. </p>"},{"location":"django/Udemy_Django_Academind/section1/#course-path","title":"Course Path","text":"<p>Standard approach - start with video 1 and go in order. At end is a Django summary module. Great recap and refresh.</p> <p>Summary Approach - just take the summary. Not recommended. </p>"},{"location":"django/Udemy_Django_Academind/section1/#summary","title":"Summary","text":""},{"location":"django/Udemy_Django_Academind/section1/#category","title":"Category","text":""},{"location":"django/Very_Academy/Course%20Introduction/","title":"Course Introduction","text":"<p>Building an application with Django, HTMX, Bootstrap. Blog with search and tags. Use HTMX for infinite scroll on pages.</p> <p>Windows instructions:</p>"},{"location":"django/Very_Academy/Course%20Introduction/#vs-code","title":"VS Code","text":"<ul> <li>Using Dark Color Scheme. </li> <li>Open folder to your project folder / directory</li> <li>Can split screen to work on two files at a time. Icon looks like open book.</li> <li>White dot by file name shows not saved.</li> <li>Turned on autosave on file menu.</li> <li>Preferences Editor: Mouse Wheel Zoom checked. Font bigger Ctrl-MouseWheel</li> <li>Ctrl Plus or Minus also resizes font</li> <li>Shortcut for showing / hiding terminal (check under view) Ctrl+backquote (character under tilde). Can drag from bottom to show.</li> </ul>"},{"location":"django/Very_Academy/Course%20Introduction/#virtual-environment","title":"Virtual Environment","text":"<pre><code>python3 -m venv virt\nsource virt/bin/activate\n</code></pre>"},{"location":"django/Very_Academy/Django%20Initiation/","title":"Django Initiation","text":"<ul> <li>Create a folder called: First-Django-Project</li> <li>Create Virtual Environment called: venv:  <code>python3 -m venv venv</code></li> <li>Activate venv: <code>source venv/bin/activate</code></li> <li>Install Django - pip install django<ul> <li>other pip commands: pip uninstall, pip list, pip freeze (save to file - pip freeze &gt; requirements.txt)</li> </ul> </li> <li>Create requirements.txt: <code>pip freeze &gt; requirements.txt</code></li> <li></li> </ul>"},{"location":"django/codemy_django_intro/00-Home/","title":"00-Codemy Django Intro Index","text":"<ul> <li>Start a Django Project</li> <li>Add an App to the Project</li> </ul>"},{"location":"django/codemy_django_intro/01-Stuff_For_Every_Django_Project/","title":"01 Stuff For Every Django Project","text":""},{"location":"django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#set-up-a-development-environment","title":"Set up a Development Environment","text":"<ul> <li>install Python3</li> <li>install Pip3</li> <li>install venv</li> <li>You need a text editor</li> <li>Make sure you have a terminal app / a command line.</li> </ul>"},{"location":"django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#create-a-virtual-environment","title":"Create a Virtual Environment","text":"<pre><code>mkdir code # Create a directory for our code\ncd code # change to the code directory\npython3 -m venv venv # Creates a venv named venv\nsource venv/bin/activate # activates the venv\npip freeze # shows a list of what's installed in the venv \n</code></pre>"},{"location":"django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#install-django-make-sure-venv-is-active","title":"Install Django - make sure venv is active","text":"<p><code>pip install django</code></p>"},{"location":"django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#create-a-new-django-project","title":"Create a new Django Project","text":"<pre><code># Make sure you're in code and the venv is active\nmkdir djangoproject\ncd djangoproject\ndjango-admin startproject mysite .\n# This creates a mysite subdirectory and a manage.py file\n</code></pre>"},{"location":"django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#run-the-django-devlopment-server","title":"Run the Django Devlopment Server","text":"<pre><code># Make sure you're in code/djangoproject\npython manage.py runserver\n# go to localhost:8000 in a browser to make sure you get successful install screen\n</code></pre>"},{"location":"django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#fix-the-migration-errors","title":"Fix the migration errors","text":"<pre><code># To fix the initial migrations errors you get\npython3 manage.py migrate\n# This also creates the admin section which can be accessed at localhost:8000/admin\n</code></pre>"},{"location":"django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#create-the-superuser","title":"Create the Superuser","text":"<pre><code>python manage.py createsuperuser\n# give a username, email, and password\n# Now can login at localhost:8000/admin/\n</code></pre>"},{"location":"django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#notes","title":"Notes","text":"<p>I think I did the last two steps on the pi 400 in the basement, but they didn't exist when I moved upstairs. So they either don't get put on gitlab or I forgot to do a git push at the end.</p>"},{"location":"django/codemy_django_intro/02-Set_Up_App/","title":"02-These Are Steps to Add an App to a Django Project","text":""},{"location":"django/codemy_django_intro/02-Set_Up_App/#create-the-app","title":"Create the App","text":"<p>An app is one section of a large website, but this project has only one app.</p> <pre><code>python manage.py startapp pages\n# Creates code/djangoproject/pages\n</code></pre>"},{"location":"django/codemy_django_intro/02-Set_Up_App/#add-the-app-to-the-project","title":"Add the App to the Project","text":"<p>In code/djangoproject/mysite/settings.py add 'pages', to INSTALLED_APPS list.</p>"},{"location":"django/codemy_django_intro/02-Set_Up_App/#add-urlspy-at-app-level","title":"Add urls.py at app level","text":"<p>It's cleaner to keep urls separated by app. So in code/djangoproject/pages create urls.py. Then set up a skeleton in the new urls.py</p> <pre><code>from django.urls import path\nurlpatterns = []\n</code></pre>"},{"location":"django/codemy_django_intro/02-Set_Up_App/#create-the-views","title":"Create the Views","text":"<p>Every web page created in our app has to have a view so in pages/views.py:</p> <p><pre><code>from django.shortcuts import render\ndef home(request):\n    return render(request, \"home.html\", {})\ndef about(request):\n    return render(request, \"about.html\", {})\n</code></pre> In each function, request is required, the html files are the names of the templates we're going to use. {} is a dictionary that we can use to pass data to the template</p>"},{"location":"django/codemy_django_intro/02-Set_Up_App/#add-templates","title":"Add Templates","text":"<p>Add a subdirectory in pages called templates. Create home.html and about.html and add a header in each page. HOME PAGE and ABOUT PAGE.</p>"},{"location":"django/codemy_django_intro/02-Set_Up_App/#add-the-views-to-pagesurlspy","title":"Add the views to pages/urls.py","text":"<pre><code># import the views.py file so we can connect them to urls.\nfrom . import views\n# Then in usrpatterns list add a url for each view\npath ('', views.home, name='home'),\npath ('about/', views.about, name='about'),\n# First is the page name that follows localhost:8000,\n# Then the name of the function in views.py that we're attaching to that url,\n# Then a name we can use for linking to this page.\n</code></pre>"},{"location":"django/codemy_django_intro/02-Set_Up_App/#link-app-urlspy-to-project-urlspy","title":"Link App urls.py to Project urls.py","text":"<p>So in project urls.py </p> <pre><code>from django.urls import path, include\n# then add to urlpatterns list\npath('', include('pages.urls)),\n</code></pre>"},{"location":"django/codemy_django_intro/03-Django-Basics/","title":"03-Django Basics","text":""},{"location":"django/codemy_django_intro/03-Django-Basics/#creating-links","title":"Creating Links","text":"<p>You could use regular old html links:</p> <pre><code>&lt;a href=\"/\"&gt;Home&lt;/a&gt; | &lt;a href=\"/about\"&gt;About&lt;/a&gt;\n</code></pre> <p>But it's more flexible and easier to change later if necessary if we use Django links:</p> <pre><code>&lt;a href=\"{% url 'home' %}\"&gt;Home&lt;/a&gt; | &lt;a href=\"{% url 'about' %}\"&gt;About&lt;/a&gt;\n</code></pre> <p>The 'home' and 'about' refer to the names in the urlpatterns list in urls.py.  Later if we want to change a path, we don't have to change it on every page, we just have to change the path in urls.py.</p>"},{"location":"django/codemy_django_intro/03-Django-Basics/#extends-base-file","title":"Extends Base File","text":"<p>Sharing common things among web pages. </p> <ul> <li> <p>Create a template file called base.html in pages/templates and paste the bootstrap template.</p> </li> <li> <p>At beginning of body in base.html put a block where the code that's unique to the various web pages goes. </p> </li> </ul> <pre><code>{% block content %}\n{% endblock %}\n</code></pre> <ul> <li>Then in each web page put the content of that web page in:</li> </ul> <pre><code>{% extends 'base.html' %}\n\n{% block content %}\n&lt;h1&gt;\n    Home Page\n&lt;/h1&gt;\n{% endblock %}\n</code></pre>"},{"location":"django/codemy_django_intro/03-Django-Basics/#block-title","title":"Block Title","text":"<p>This will allow unique titles on each page of the website (what goes on the tab in the browser)</p> <p>So in about.html he put:</p> <pre><code>{% block title %}About John Elder{% endblock %}\n</code></pre> <p>This is a separate block from block content and isn't nested.</p> <p>Then in base.html:</p> <pre><code>&lt;title&gt;{% block title %}Hello, world! {% endblock %}&lt;/title&gt;\n</code></pre> <p>What happens is if the page we're displaying has a block named title, that name will be used, so in the above example the about page will show About John Elder. However on a page that doesn't have a block named title we'll see Hello, world! (like on our home page since we haven't added a block title to it).</p>"},{"location":"django/codemy_django_intro/03-Django-Basics/#add-a-navbar","title":"Add a Navbar","text":"<p>Grabs the navbar example at the top of the Bootstrap 4.1 Components navbar page and pastes it into base.html right below the opening body tag. </p> <p>At the opening nav tag, he changed navbar-light to navbar-dark and bg-light to bg-dark. </p> <p>Again in base.html, he wraps the block content and endblock statements in a div with the class of container, and adds a line break above the div that he just added.</p> <p>Then clean up the navbar. Delete the form that's a search box. Deletes the dropdown menu. Deletes the disabled link, and the home link. Change the label that says Navbar to John Elder.</p> <p>Then change the navbar links to Django style:</p> <pre><code>          &lt;li class=\"nav-item\"&gt;\n            &lt;a class=\"nav-link\" href=\"{% url 'home' %}\"&gt;Home&lt;/a&gt;\n          &lt;/li&gt;\n          &lt;li class=\"nav-item\"&gt;\n            &lt;a class=\"nav-link\" href=\"{% url 'about' %}\"&gt;About&lt;/a&gt;\n          &lt;/li&gt;\n</code></pre>"},{"location":"flask/Flask%20Corey%20Schaefer%20Video%201/","title":"Flask Corey Schaefer Video 1","text":""},{"location":"flask/Flask%20Corey%20Schaefer%20Video%201/#corey-schaefer-flask-video-1-from-2019","title":"Corey Schaefer Flask Video 1 From 2019","text":"<p>The series will create  a blog with multiple users, profile pictures, and the ability to create, update and delete posts. The same site built in Django is also available. I\u2019m pretty sure that Flask is easier, but there are a lot more examples and videos for Django.</p>"},{"location":"flask/Flask%20Corey%20Schaefer%20Video%201/#setup-folders-and-environment","title":"Setup Folders, and Environment","text":"<ul> <li> <p>Create virtual environment \u201cflaskblog\u2019</p> </li> <li> <p>pip install Flask</p> </li> <li> <p>mkdir Flask_Blog</p> </li> </ul>"},{"location":"flask/Flask%20Corey%20Schaefer%20Video%201/#first-program-demonstrating-routes","title":"First Program demonstrating routes","text":"<p>Create flaskblog.py in Flask_Blog</p> <pre><code>from flask import Flaskk #  import Flask class\n\napp = Flask(__name__) # helps Flask find templates static files\n\n@app.route(\"/\") #  oreate home page route\ndef hello():\n    return \u201cHello World!\"\n</code></pre> <pre><code>cd Flask_Blog\nexport FLASK_APP =flaskblog.py\nFlask run # 1270.0.0.1:5000\n</code></pre> <p>To show use of html change return to <code>\u201c&lt;h1&gt;Hello World&lt;/h1&gt;\"</code>and had to stop and start server. To fix that <code>export FLASK_DEBUG = 1</code></p> <p>To avoid export of environment variables at bottom of flaskblog.py add:</p> <pre><code>if __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>Then just run python3 flaskblog.py.</p> <p>There are debug advantages to the environment variable process.</p> <p>Add an about page by adding another decorator and another function.</p> <pre><code>@app.route(\"/about\")\ndef about():\n    return \"&lt;h1&gt;About Page&lt;/h1&gt;\"\n</code></pre> <p>You can have multiple decorators for one function. So here both terryinfcco.com/ and terryinfcco.com/home would both go to the home page.</p> <pre><code>@app.route(\"/\")\n@app.route(\"/home\")\ndef home():\n    return \"&lt;h1&gt;Home Page&lt;/h1&gt;\"\n</code></pre>"},{"location":"flask/Flask%20Corey%20Schaefer%20Video%202/","title":"Flask Corey Schaefer Video 2","text":""},{"location":"flask/Flask%20Corey%20Schaefer%20Video%202/#corey-schaefer-flask-video-2-from-2019","title":"Corey Schaefer Flask Video 2 From 2019","text":""},{"location":"flask/Flask%20Corey%20Schaefer%20Video%202/#learn-to-use-templates-and-pass-variables-to-web-pages","title":"Learn to use templates and pass variables to web pages","text":""},{"location":"flask/Flask%20Corey%20Schaefer%20Video%202/#using-templates","title":"Using templates","text":"<p>Flask expects the html templates in a specific place so create a folder called templates in Flask_Blog</p> <p>Then create about.html and home.html - just using the emmet ! in vscode and then adding header 1 to the body.</p> <pre><code>&lt;body&gt;\n    &lt;h1&gt;Home Page&lt;/h1&gt;\n&lt;/body&gt;\n</code></pre> <p><pre><code>&lt;body&gt;\n    &lt;h1&gt;About Page&lt;/h1&gt;\n&lt;/body&gt;\n</code></pre> Then you have to import render_template and change the return statements in the home and about functions to <code>return render_template('home.html')</code> and the same for the about function.</p> <p>If all you wanted to use Flask for was serving static pages you'd be done. More detailed HTML pages and some CSS and you're done.</p>"},{"location":"flask/Flask%20Corey%20Schaefer%20Video%202/#passing-data-to-html-template","title":"Passing Data to HTML template","text":"<p>He created a list of dictionaries at the top of the flaskblog.py file. In each dictionary were author, title, content, and date_posted fields. He called the list posts and then added <code>, posts = posts)</code> to the return statement in the home function. The first posts is the variable that's being passed to the html template and the second posts is the list of dictionaries that he created.</p> <p>Now to change home.html so it can use the data we're passing, we add code blocks. Code blocks in Jinja2 (the templating engine that Flask uses) are surrounded by opening curly brace, percent sign, percent sign, closing curly brace. In this example he does a for loop. Code blocks have to be closed, using in this case the endfor statement. </p> <p>Printing a variable you need to use double curly braces <code>{{ variable }}</code>. And dot notation works so to print the title he uses post.title.</p> <p>Jinja2 also supports if else logic. So in the head section he adds logic to look for a page title and use that instead of the default if we pass in a title. He did that in both the home and about templates. Then he passed a title to the about template but not to the home template.</p>"},{"location":"flask/Flask%20Corey%20Schaefer%20Video%202/#including-blocks-in-our-templates-template-inheritance","title":"Including Blocks in our Templates - Template Inheritance","text":"<p>He creates a layout.html template and puts all of the common sections (like the head section with the if else title code) into layout.html and then includes that in home.html and about.html. Then there are block sections in layout.html for the unique parts of each page. In about.html and home.html he now surrounds the unique part of the html (all in the body in this case) with block tags. Then at the top of each template is an extends tag to refer to the layout.html template.</p> <p>To show the power of this he adds bootstrap links to the layout.html file and is now able to use bootstrap specific classes in the templates. At this point he grabs some html from a snippets folder to add a navbar to the layout.html template. Then he creates a static folder in the Flask_Blog project and adds a main.css file to the static folder. Finally he adds a link to the stylesheet using the url_for function. He recommends using url_for for as many links as possible. </p> <p>This was all done really fast and was hard to follow, but it's just html, css and bootstrap and has nothing to do with flask, so if you want more you'd have to study those three in more detail.  </p>"},{"location":"flask/Flask_Tutorial_for_Beginners-Clever_%20Programmer_%20Youtube/","title":"Flask Tutorial for Beginners - Clever Programmer Youtube","text":""},{"location":"flask/Flask_Tutorial_for_Beginners-Clever_%20Programmer_%20Youtube/#section-1-very-basic-flask-app","title":"Section 1 Very Basic Flask App","text":"<ul> <li>Micro Framework - lightweight and bare bones</li> <li>Created directory called Flask App</li> <li>After creating a virtual environment called venv: <code>pip install flask</code> to install Flask</li> <li><code>flask --version</code> to make sure Flask is installed. He was on 1.1.1  and Python 2.7. So fairly old. We'll see if that messes me up.</li> <li>Create new file <code>app.py</code></li> </ul> <p>````Python from flask import Flask</p> <p>app = Flask(name)</p> <p>@app.route('/')   # Set up the root page of the website</p>"},{"location":"flask/Flask_Tutorial_for_Beginners-Clever_%20Programmer_%20Youtube/#could-put-multiple-routes-for-one-function-so","title":"Could put multiple routes for one function so:","text":"<p>@app.rount('/home') def hello():     return \"Hello World\"</p> <p>if name == \"main\":  # only true if running from command line on localhost     app.run(debug=True)</p> <p>```</p> <ul> <li>To run <code>python app.py</code> and should run at localhost:5000</li> </ul>"},{"location":"flask/Flask_Tutorial_for_Beginners-Clever_%20Programmer_%20Youtube/#section-2","title":"Section 2","text":""},{"location":"flask/Paul%20Baumgartner%20Flask%20Day%201/","title":"Paul Baumgartner Flask Day 1","text":""},{"location":"flask/Paul%20Baumgartner%20Flask%20Day%201/#creating-flask-skeleton","title":"Creating Flask Skeleton","text":"<p>Created server.py:</p> <pre><code>from flask import Flask \napp = Flask(__name__) # convention\n\n# Define home page - decorater and function\n@app.route('/')\ndef index_page():\n    print(\"Someone is visiting our website!\")\n    return(\"Index page\")\n\napp.run(host='0.0.0.0', port=8000, debug=True)\n</code></pre> <p>Can be run at localhost:8000 and displays Index page, and prints: Someone is visiting our website! on the python console. </p> <p>Then creates placeholders for all the other web pages he thinks he needs.</p> <pre><code># Registration page\n@app.route('/register')\ndef registration_page():\n    return(\"Registration page\")\n\n# Login page\n@app.route('/login')\ndef login_page():\n    return(\"Login page\")\n\n# Logout page\n@app.route('/logout')\ndef logout_page():\n    return(\"Logout page\")\n\n# Main page\n@app.route('/main')\ndef main_page():\n    return(\"Main page\")\n```\n</code></pre>"},{"location":"flask/Paul%20Baumgartner%20Flask%20Day%201/#html","title":"HTML","text":"<p>Creates folders static and templates at the same level as server.py.</p> <p>Then in templates create login.html. I used Emmet <code>(!&lt;tab&gt;)</code> to create an initial html skeleton and it was similar to what he created manually. In head section change title to \"Tasker\", and adds a link to a stylesheet. He adds a heading, instructions and a form in the body. It looks like this when it's done:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/static/login.css\" media=\"screen\"&gt;\n    &lt;title&gt;Tasker&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1 class=\"icon-tasker\"&gt;Tasker&lt;/h1&gt;\n        &lt;p&gt;Please login to continue&lt;/p&gt;\n        &lt;form action=\"/login\" method=\"POST\"&gt;\n            &lt;div&gt;&lt;input type=\"text\" name=\"userid\" placeholder=\"userid\"&gt;&lt;/div&gt;\n            &lt;div&gt;&lt;input type=\"password\" name=\"password\" placeholder=\"password\"&gt;&lt;/div&gt;\n            &lt;div&gt;&lt;input type=\"submit\" name=\"submit\" value=\"Login\" class=\"icon-login\"&gt;&lt;/div&gt;\n            &lt;div&gt;&lt;hr&gt;&lt;/div&gt;\n            &lt;div class=\"small\"&gt;No account? &lt;a href=\"/register\"&gt;Register!&lt;/a&gt;&lt;/div&gt;\n        &lt;/form&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Now fix up server.py to be able to find the login page. First add ,render_template after import Flask. And change the return statement in the login route to be <code>return render_template(\"login.html\")</code>.  So it should look like:</p> <pre><code># Login page\n@app.route('/login')\ndef login_page():\n    return render_template(\"login.html\")\n</code></pre>"},{"location":"flask/Paul%20Baumgartner%20Flask%20Day%201/#creating-css-for-the-login-page","title":"Creating CSS for the login page","text":""},{"location":"flask/Paul%20Baumgartner%20Flask%20Day%201/#python","title":"python","text":""},{"location":"flask/Paul%20Baumgartner%20Flask%20Day%201/#flask","title":"flask","text":""},{"location":"flask/bootcamp_section_7/","title":"Flask Bootcamp Jose Section 7","text":""},{"location":"flask/bootcamp_section_7/#flask-basics","title":"Flask Basics","text":""},{"location":"flask/bootcamp_section_7/#virtual-environments","title":"Virtual Environments.","text":"<p>He uses Anaconda, so I'll just do it my way. Each project can have it's own development environment. He created an enviroment called myflaskenv, activated it, and installed flask. </p>"},{"location":"flask/bootcamp_section_7/#flask-hello-world-site","title":"Flask Hello World Site","text":"<p>He created the following program and called it basic.py</p> <pre><code>from flask import Flask # import the Flask Class\napp = Flask(__name__)   # creates Flask application object. \n\n@app.route('/') # decorator links page to root route. \ndef index(): # defines page named index \n    return '&lt;h1&gt;Hello Puppy!'&lt;/h1&gt;\n\nif __name__ == '__main__': # Only run if we are running program directly\n    app.run()\n</code></pre>"},{"location":"flask/bootcamp_section_7/#basic-routes","title":"Basic Routes","text":"<p>String passed in the decorator determines the URL extension that will link to the function that directly follows the decorator. Also known as a view.</p> <pre><code># points to http://localhost:5000/some_page\n@app.route(\"/some_page\")\n</code></pre> <p>Add an info page to our application</p> <pre><code>from flask import Flask # import the Flask Class\napp = Flask(__name__)   # creates Flask application object. \n\n@app.route('/') # decorator links page to root route. \ndef index(): # defines page named index \n    return '&lt;h1&gt;Hello Puppy!'&lt;/h1&gt;\n\n@app.route('/information') #127.0.0.1:5000/information\ndef info():\n    return \"&lt;h1&gt;Puppies are cute!&lt;/h1&gt;\"\n\nif __name__ == '__main__': # Only run if we are running program directly\n    app.run()\n</code></pre>"},{"location":"flask/bootcamp_section_7/#dynamic-routing","title":"Dynamic Routing","text":"<p>Example would be when we want a landing page for each user, so after the user logs in, the page could be www.site.com/user/unique_user_name. </p> <pre><code>@app.route('/some_page/&lt;name&gt;')\ndef other_page(name):\n    return 'User: {}'.format(name)\n</code></pre> <p>Adding to our program</p> <pre><code>from flask import Flask # import the Flask Class\napp = Flask(__name__)   # creates Flask application object. \n\n@app.route('/') # decorator links page to root route. \ndef index(): # defines page named index \n    return '&lt;h1&gt;Hello Puppy!'&lt;/h1&gt;\n\n@app.route('/information') #127.0.0.1:5000/information\ndef info():\n    return \"&lt;h1&gt;Puppies are cute!&lt;/h1&gt;\"\n\n# Example of dynamic routing    \n@app.route('/puppy/&lt;name&gt;')\ndef puppy(name):\n    return \"&lt;h1&gt;This is a page for {}&lt;/h1&gt;\".format(name)\n\n# Example of dynamic routing    and return upper case\n@app.route('/puppy/&lt;name&gt;')\ndef puppy(name):\n    return \"&lt;h1&gt;Upper Case: {}&lt;/h1&gt;\".format(name.upper())\n\nif __name__ == '__main__': # Only run if we are running program directly\n    app.run()\n</code></pre>"},{"location":"flask/bootcamp_section_7/#debug-mode","title":"Debug Mode","text":"<pre><code># to get better error messages in the browser. You get a debugger PIN when you\nlaunch the application and can use that to start a python console. \napp.run(debug=True)\n</code></pre>"},{"location":"flask/bootcamp_section_7/#summary","title":"Summary","text":""},{"location":"flask/bootcamp_section_7/#category","title":"Category","text":""},{"location":"flask/Codemy-Intro/Codemy%20Intro%20to%20Flask/","title":"Codemy Intro to Flask","text":"<ul> <li>from 2020</li> <li>10 Videos (less one about heroku)</li> <li>about 2.5 hours</li> </ul>"},{"location":"flask/Codemy-Intro/Codemy%20Intro%20to%20Flask/#video-1","title":"Video 1","text":""},{"location":"tkinter/vid1_window_basics/","title":"Bro Code Youtube Channel Tkinter","text":""},{"location":"tkinter/vid1_window_basics/#video-1-windows","title":"Video 1 - Windows","text":"<pre><code>from tkinter import *\n\nwindow = Tk() # instantiate an instance of a tkinter window\n# Change the size of the window\nwindow.geometry(\"420x420\")\n\n# Change the title of the window\nwindow.title(\"Bro Code First GUI Program\")\n\n# Give it a favicon - I tried both True and False in the iconphoto stmt and \n# couldn't tell any difference.\n\nicon = PhotoImage(file=\"linux.png\")\nwindow.iconphoto(True, icon)\n\n# change background color of window\nwindow.config(background=\"#5cfcff\")\n\nwindow.mainloop() # place window on computer screen and listen for events.\n</code></pre>"},{"location":"tkinter/vid2_labels/","title":"Bro Code Youtube Channel Video 2","text":""},{"location":"tkinter/vid2_labels/#labels","title":"Labels","text":"<pre><code>from tkinter import *\n\nwindow = Tk()\n\n# label is an area widget that holds text or an image\n# window is the container where the label goes.\n# text puts text in the label\n# font changes the font color\n# fg is the foreground color - color name or hex value works for all these colors\n# bg is the background color\n# relief is the border style\n# bd is the width of the border in pixels\n# padx is horizontal spacing between text and border\n# pady is vertical spacing between text and border\nlabel = Label(window,\n     text=\"Hello World\", \n     font=(\"Arial\",40,'bold','underline'), \n     fg='green',\n     bg='black',\n     relief=RAISED,\n     bd=10, \n     padx=20,\n     pady=20)\n# label.place(relx = 0.35 , rely = 0.0)\nlabel.pack()\n\n# 2nd label to show SUNKEN relief\nlabel2 = Label(window,\n     text=\"Label 2\", \n     font=(\"Arial\",40,'bold','underline'), \n     fg='green',\n     bg='black',\n     relief=SUNKEN,\n     bd=10)\n# label.place(relx = 0.35 , rely = 0.0)\nlabel2.pack()\n\n# Put an image in a label\n# make it a photoimage, compound shows where the image goes relative to the text. \n# so in this case the image is above the text. \nphoto = PhotoImage(file=\"linux.png\")\nlabel3 = Label(text=\"Linux Penguin\",\n    font=(\"Arial\", 20), \n    image=photo, compound=\"top\")\nlabel3.pack()\nwindow.mainloop()\n</code></pre>"}]}