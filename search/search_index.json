{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"notes/django/codemy_django_intro/00-Home/","text":"00-Codemy Django Intro Index Start a Django Project Add an App to the Project","title":"00-Codemy Django Intro Index"},{"location":"notes/django/codemy_django_intro/00-Home/#00-codemy-django-intro-index","text":"Start a Django Project Add an App to the Project","title":"00-Codemy Django Intro Index"},{"location":"notes/django/codemy_django_intro/01-Stuff_For_Every_Django_Project/","text":"Set up a Development Environment install Python3 install Pip3 install venv Make sure you have a terminal app / a command line. Create a Virtual Environment mkdir code cd code python3 -m venv venv . venv/bin/activate pip freeze Install Django - make sure venv is active pip install django Create a new Django Project # Make sure you're in code and the venv is active mkdir djangoproject cd djangoproject django-admin startproject mysite . # This creates a mysite subdirectory and a manage.py file Run the Django Devlopment Server # Make sure you're in code/djangoproject python manage.py runserver # go to localhost:8000 in a browser to make sure you get successful install screen Fix the migration errors # To fix the initial migrations errors you get python3 manage.py migrate # This also creates the admin section which can be accessed at localhost:8000/admin Create the Superuser python manage.py createsuperuser # give a username, email, and password # Now can login at localhost:8000/admin/ Notes I think I did the last two steps on the pi 400 in the basement, but they didn't exist when I moved upstairs. So they either don't get put on gitlab or I forgot to do a git push at the end.","title":"01 Stuff For Every Django Project"},{"location":"notes/django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#set-up-a-development-environment","text":"install Python3 install Pip3 install venv Make sure you have a terminal app / a command line.","title":"Set up a Development Environment"},{"location":"notes/django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#create-a-virtual-environment","text":"mkdir code cd code python3 -m venv venv . venv/bin/activate pip freeze","title":"Create a Virtual Environment"},{"location":"notes/django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#install-django-make-sure-venv-is-active","text":"pip install django","title":"Install Django - make sure venv is active"},{"location":"notes/django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#create-a-new-django-project","text":"# Make sure you're in code and the venv is active mkdir djangoproject cd djangoproject django-admin startproject mysite . # This creates a mysite subdirectory and a manage.py file","title":"Create a new Django Project"},{"location":"notes/django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#run-the-django-devlopment-server","text":"# Make sure you're in code/djangoproject python manage.py runserver # go to localhost:8000 in a browser to make sure you get successful install screen","title":"Run the Django Devlopment Server"},{"location":"notes/django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#fix-the-migration-errors","text":"# To fix the initial migrations errors you get python3 manage.py migrate # This also creates the admin section which can be accessed at localhost:8000/admin","title":"Fix the migration errors"},{"location":"notes/django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#create-the-superuser","text":"python manage.py createsuperuser # give a username, email, and password # Now can login at localhost:8000/admin/","title":"Create the Superuser"},{"location":"notes/django/codemy_django_intro/01-Stuff_For_Every_Django_Project/#notes","text":"I think I did the last two steps on the pi 400 in the basement, but they didn't exist when I moved upstairs. So they either don't get put on gitlab or I forgot to do a git push at the end.","title":"Notes"},{"location":"notes/django/codemy_django_intro/02-Set_Up_App/","text":"02-These Are Steps to Add an App to a Django Project Create the App An app is one section of a large website, but this project has only one app. python manage.py startapp pages # Creates code/djangoproject/pages Add the App to the Project In code/djangoproject/mysite/settings.py add 'pages', to INSTALLED_APPS list. Add urls.py at app level It's cleaner to keep urls separated by app. So in code/djangoproject/pages create urls.py. Then set up a skeleton in the new urls.py from django.urls import path urlpatterns = [] Create the Views Every web page created in our app has to have a view so in pages/views.py: from django.shortcuts import render def home ( request ): return render ( request , \"home.html\" , {}) def about ( request ): return render ( request , \"about.html\" , {}) In each function, request is required, the html files are the names of the templates we're going to use. {} is a dictionary that we can use to pass data to the template Add Templates Add a subdirectory in pages called templates. Create home.html and about.html and add a header in each page. HOME PAGE and ABOUT PAGE. Add the views to pages/urls.py # import the views.py file so we can connect them to urls. from . import views # Then in usrpatterns list add a url for each view path ( '' , views . home , name = 'home' ), path ( 'about/' , views . about , name = 'about' ), # First is the page name that follows localhost:8000, # Then the name of the function in views.py that we're attaching to that url, # Then a name we can use for linking to this page. Link App urls.py to Project urls.py So in project urls.py from django.urls import path, include # then add to urlpatterns list path('', include('pages.urls)),","title":"02-These Are Steps to Add an App to a Django Project"},{"location":"notes/django/codemy_django_intro/02-Set_Up_App/#02-these-are-steps-to-add-an-app-to-a-django-project","text":"","title":"02-These Are Steps to Add an App to a Django Project"},{"location":"notes/django/codemy_django_intro/02-Set_Up_App/#create-the-app","text":"An app is one section of a large website, but this project has only one app. python manage.py startapp pages # Creates code/djangoproject/pages","title":"Create the App"},{"location":"notes/django/codemy_django_intro/02-Set_Up_App/#add-the-app-to-the-project","text":"In code/djangoproject/mysite/settings.py add 'pages', to INSTALLED_APPS list.","title":"Add the App to the Project"},{"location":"notes/django/codemy_django_intro/02-Set_Up_App/#add-urlspy-at-app-level","text":"It's cleaner to keep urls separated by app. So in code/djangoproject/pages create urls.py. Then set up a skeleton in the new urls.py from django.urls import path urlpatterns = []","title":"Add urls.py at app level"},{"location":"notes/django/codemy_django_intro/02-Set_Up_App/#create-the-views","text":"Every web page created in our app has to have a view so in pages/views.py: from django.shortcuts import render def home ( request ): return render ( request , \"home.html\" , {}) def about ( request ): return render ( request , \"about.html\" , {}) In each function, request is required, the html files are the names of the templates we're going to use. {} is a dictionary that we can use to pass data to the template","title":"Create the Views"},{"location":"notes/django/codemy_django_intro/02-Set_Up_App/#add-templates","text":"Add a subdirectory in pages called templates. Create home.html and about.html and add a header in each page. HOME PAGE and ABOUT PAGE.","title":"Add Templates"},{"location":"notes/django/codemy_django_intro/02-Set_Up_App/#add-the-views-to-pagesurlspy","text":"# import the views.py file so we can connect them to urls. from . import views # Then in usrpatterns list add a url for each view path ( '' , views . home , name = 'home' ), path ( 'about/' , views . about , name = 'about' ), # First is the page name that follows localhost:8000, # Then the name of the function in views.py that we're attaching to that url, # Then a name we can use for linking to this page.","title":"Add the views to pages/urls.py"},{"location":"notes/django/codemy_django_intro/02-Set_Up_App/#link-app-urlspy-to-project-urlspy","text":"So in project urls.py from django.urls import path, include # then add to urlpatterns list path('', include('pages.urls)),","title":"Link App urls.py to Project urls.py"},{"location":"notes/django/codemy_django_intro/03-Django-Basics/","text":"03-Django Basics Creating Links You could use regular old html links: < a href = \"/\" > Home </ a > | < a href = \"/about\" > About </ a > But it's more flexible and easier to change later if necessary if we use Django links: < a href = \"{% url 'home' %}\" > Home </ a > | < a href = \"{% url 'about' %}\" > About </ a > The 'home' and 'about' refer to the names in the urlpatterns list in urls.py. Later if we want to change a path, we don't have to change it on every page, we just have to change the path in urls.py. Extends Base File Sharing common things among web pages. Create a template file called base.html in pages/templates and paste the bootstrap template. At beginning of body in base.html put a block where the code that's unique to the various web pages goes. {% block content %} {% endblock %} Then in each web page put the content of that web page in: {% extends 'base.html' %} {% block content %} <h1> Home Page </h1> {% endblock %} Block Title This will allow unique titles on each page of the website (what goes on the tab in the browser) So in about.html he put: {% block title %} About John Elder {% endblock %} This is a separate block from block content and isn't nested. Then in base.html: <title> {% block title %} Hello, world! {% endblock %} </title> What happens is if the page we're displaying has a block named title, that name will be used, so in the above example the about page will show About John Elder. However on a page that doesn't have a block named title we'll see Hello, world! (like on our home page since we haven't added a block title to it). Add a Navbar Grabs the navbar example at the top of the Bootstrap 4.1 Components navbar page and pastes it into base.html right below the opening body tag. At the opening nav tag, he changed navbar-light to navbar-dark and bg-light to bg-dark. Again in base.html, he wraps the block content and endblock statements in a div with the class of container, and adds a line break above the div that he just added. Then clean up the navbar. Delete the form that's a search box. Deletes the dropdown menu. Deletes the disabled link, and the home link. Change the label that says Navbar to John Elder. Then change the navbar links to Django style: <li class=\"nav-item\"> <a class=\"nav-link\" href=\" {% url 'home' %} \">Home</a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\" {% url 'about' %} \">About</a> </li>","title":"03-Django Basics"},{"location":"notes/django/codemy_django_intro/03-Django-Basics/#03-django-basics","text":"","title":"03-Django Basics"},{"location":"notes/django/codemy_django_intro/03-Django-Basics/#creating-links","text":"You could use regular old html links: < a href = \"/\" > Home </ a > | < a href = \"/about\" > About </ a > But it's more flexible and easier to change later if necessary if we use Django links: < a href = \"{% url 'home' %}\" > Home </ a > | < a href = \"{% url 'about' %}\" > About </ a > The 'home' and 'about' refer to the names in the urlpatterns list in urls.py. Later if we want to change a path, we don't have to change it on every page, we just have to change the path in urls.py.","title":"Creating Links"},{"location":"notes/django/codemy_django_intro/03-Django-Basics/#extends-base-file","text":"Sharing common things among web pages. Create a template file called base.html in pages/templates and paste the bootstrap template. At beginning of body in base.html put a block where the code that's unique to the various web pages goes. {% block content %} {% endblock %} Then in each web page put the content of that web page in: {% extends 'base.html' %} {% block content %} <h1> Home Page </h1> {% endblock %}","title":"Extends Base File"},{"location":"notes/django/codemy_django_intro/03-Django-Basics/#block-title","text":"This will allow unique titles on each page of the website (what goes on the tab in the browser) So in about.html he put: {% block title %} About John Elder {% endblock %} This is a separate block from block content and isn't nested. Then in base.html: <title> {% block title %} Hello, world! {% endblock %} </title> What happens is if the page we're displaying has a block named title, that name will be used, so in the above example the about page will show About John Elder. However on a page that doesn't have a block named title we'll see Hello, world! (like on our home page since we haven't added a block title to it).","title":"Block Title"},{"location":"notes/django/codemy_django_intro/03-Django-Basics/#add-a-navbar","text":"Grabs the navbar example at the top of the Bootstrap 4.1 Components navbar page and pastes it into base.html right below the opening body tag. At the opening nav tag, he changed navbar-light to navbar-dark and bg-light to bg-dark. Again in base.html, he wraps the block content and endblock statements in a div with the class of container, and adds a line break above the div that he just added. Then clean up the navbar. Delete the form that's a search box. Deletes the dropdown menu. Deletes the disabled link, and the home link. Change the label that says Navbar to John Elder. Then change the navbar links to Django style: <li class=\"nav-item\"> <a class=\"nav-link\" href=\" {% url 'home' %} \">Home</a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\" {% url 'about' %} \">About</a> </li>","title":"Add a Navbar"},{"location":"perhaps/three_websites/","text":"The three websites are todo/perhaps, blog/learning log, and notes. Maybe set up a set of scripts and maybe a bash menu that would let me add a new todo, edit existing todos, add a new blog entry, etc.","title":"Three websites"},{"location":"perhaps/udemy/","text":"Maybe work out which courses you actually want to take. You've got several web development courses and several python courses. Maybe you should pick one web development course and finish it, then pick up pieces of the other courses that weren't covered in the one you did.","title":"Udemy"},{"location":"todo/todo_list/","text":"Fix up this todo list and write up instructions on how it might work.","title":"Todo list"},{"location":"todo/udemy/","text":"I really need to get back at all my udemy courses and work through them.","title":"Udemy"}]}